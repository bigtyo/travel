(function () { window.SKYSALES = {}; var b = window.SKYSALES; b.Json = window.JSON; b.Resource = {}; b.Util = {}; b.Class = {}; b.Instance = {}; b.Instance.index = 0; b.Instance.getNextIndex = function () { b.Instance.index += 1; return b.Instance.index }; window.__doPostBack = function (h, c) { var g = document, i = g.SkySales, f = g.getElementById("eventTarget"), e = g.getElementById("eventArgument"), d = g.getElementById("viewState"); if (!i.onsubmit || (i.onsubmit() !== false)) { f.value = h || f.value; f.name = "__EVENTTARGET"; if (c !== null) { e.value = c } e.name = "__EVENTARGUMENT"; d.name = "__VIEWSTATE"; i.submit() } }; $("#lang-switcher, .overlay").hide(); $(".language a").mouseover(function () { $(this).addClass("active"); $("#lang-switcher, .overlay").show("fade") }); $("#lang-switcher").mouseleave(function () { $("#lang-switcher, .overlay").hide("fade") }); b.Class.LocaleCurrency = function () { var o = new b.Class.SkySales(), f = b.Util.extendObject(o), g = b.Util.getResource(), n = 0, l = "", d = "", h = "", j = true, e = g.currencyCultureInfo, c = function () { var q = e.positivePattern; if (!j) { q = e.negativePattern } return q }, i = function (w) { var t = e.groupSizes || [], r = e.groupSeparator, u = 0, x = 0, v = 3, B = 0, C = "", y = [], z = [], q = [], A = null, s = ""; if (u > t.length) { v = t[u] } B = v - 1; n = Math.floor(w); C = n.toString(); y = C.split(""); z = y.reverse(); q = []; A = function () { var D = 3; if (u <= t.length - 2) { u += 1; D = t[u] } else { D = v } B += D; return D }; for (x = 0; x < z.length; x += 1) { if (x > B) { v = A(); q.push(r) } q.push(z[x]) } y = q.reverse(); s = y.join(""); return s }, k = function (t) { var r = t - n, q = r.toFixed(e.decimalDigits), s = q.substring(2); return s }, p = function () { var r = c() || "", q = b.Util.replace(r, "n", h); return q }, m = function () { f.currency = f.num.toString(); j = f.num >= 0; f.num = Math.abs(f.num); l = i(f.num); d = k(f.num); h = l; if (0 < e.decimalDigits) { h += e.decimalSeparator + d } f.integerPart = l; f.currency = p() }; f.num = null; f.localeCurrency = null; f.integerPart = ""; f.init = function (q) { this.setSettingsByObject(q); if (null !== this.num) { m() } }; return f }; b.Class.Resource = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.carLocationInfo = {}; c.carLocationArray = []; c.carLocationHash = {}; c.activityLocationInfo = {}; c.activityLocationArray = []; c.activityLocationHash = {}; c.hotelLocationInfo = {}; c.hotelLocationArray = []; c.hotelLocationHash = {}; c.countryInfo = {}; c.provinceStateInfo = {}; c.stationInfo = {}; c.macInfo = {}; c.marketInfo = {}; c.macHash = {}; c.stationHash = {}; c.marketHash = {}; c.sourceInfo = {}; c.clientHash = {}; c.dateCultureInfo = {}; c.currencyCultureInfo = {}; c.carrierInfo = {}; c.carrierHash = {}; c.datePickerInfo = {}; c.passengerInfo = {}; c.passengerHash = {}; c.titleInfo = {}; c.carInfo = {}; c.externalRateInfo = {}; c.currencyInfo = {}; c.currencyHash = {}; c.populateMacHash = function () { var f = 0, g = [], h = {}, j = null, e = -1; if (c.macInfo && c.macInfo.MacList) { g = c.macInfo.MacList; e = g.length; for (f = 0; f < e; f += 1) { j = g[f]; h[j.code] = j } } c.macHash = h }; c.populateStationList = function () { var f = 0, h = [], g = null, e = -1; if (c.stationInfo && c.stationInfo.StationList) { h = c.stationInfo.StationList; e = h.length; for (f = 0; f < e; f += 1) { g = h[f]; g.index = f } } c.stationInfo.StationList = h }; c.populateStationHash = function () { var f = 0, h = [], j = {}, g = null, e = -1; if (c.stationInfo && c.stationInfo.StationList) { h = c.stationInfo.StationList; e = h.length; for (f = 0; f < e; f += 1) { g = h[f]; j[g.code] = g } } c.stationHash = j }; c.populatePassengerHash = function () { var g = 0, j = [], f = {}, h = null, e = -1; if (c.passengerInfo && c.passengerInfo.PassengerList) { j = c.passengerInfo.PassengerList; e = j.length; for (g = 0; g < e; g += 1) { h = j[g]; f[h.PassengerNumber] = h } } c.passengerHash = f }; c.populateCarrierHash = function () { var f = 0, e = [], k = 0, j = {}, g = null, h = this.carrierInfo; if (h) { e = h.carrierList; if (e) { k = e.length; if (k > 0) { for (f = 0; f < k; f += 1) { g = e[f]; j[g.code] = g } } } c.carrierHash = j } }; c.populateMarketHash = function () { var h = 0, k = [], f = {}, j = {}, e = "", g = {}, l = c.stationHash; if (c.marketInfo && c.marketInfo.MarketList) { g = c.marketInfo.MarketList; for (e in g) { if (g.hasOwnProperty(e)) { k = g[e]; for (h = k.length - 1; h >= 0; h -= 1) { f = k[h]; j = l[f.code]; if (j) { f.name = j.name; f.index = j.index } else { k.splice(h, 1) } } k.sort(this.destinationSort) } } c.marketHash = g } }; c.destinationSort = function (h, g) { var f = h.index, e = g.index; return f - e }; c.populateClientHash = function () { var k = window.document.cookie, g = [], j = 0, f = "", h = "", l = "", m = -1, e = -1; if (k) { g = document.cookie.split("; "); e = g.length; for (j = 0; j < e; j += 1) { f = g[j]; m = f.indexOf("="); if (m > -1) { h = f.substring(0, m); l = f.substring(m + 1, f.length); if (h) { l = b.Util.decodeUriComponent(l); c.clientHash[h] = l } } } } }; c.populateCurrencyHash = function () { var j = 0, h = [], g = {}, f = null, e = -1; if (c.currencyInfo && c.currencyInfo.CurrencyList) { h = c.currencyInfo.CurrencyList; e = h.length; for (j = 0; j < e; j += 1) { f = h[j]; g[f.code] = f } } c.currencyHash = g }; c.populateAOSLocationInfoArray = function (l, k) { var j = 0, h = [], f = 0, g = null, e = "", m = null; l = l || {}; h = l.LocationList || []; f = h.length; for (j = 0; j < f; j += 1) { g = h[j]; e = g.parent; if (e) { m = k[e]; if (m) { g.name = "\xa0\xa0\xa0\xa0" + m.name + " - " + g.name; g.optionClass = "subLocation" } } } return h }; c.getAOSLocationHash = function (l) { var h = 0, g = null, k = {}, e = 0, f = null, j = l || {}; g = j.LocationList || []; e = g.length; for (h = 0; h < e; h += 1) { f = g[h]; k[f.code] = f } k = k || {}; return k }; c.setSettingsByObject = function (e) { d.setSettingsByObject.call(this, e); b.datepicker = this.datePickerInfo; this.populateStationList(); this.populateStationHash(); this.populateCarrierHash(); this.populateMacHash(); this.populateMarketHash(); this.populateClientHash(); this.populatePassengerHash(); this.populateCurrencyHash(); c.carLocationHash = this.getAOSLocationHash(this.carLocationInfo); c.carLocationArray = this.populateAOSLocationInfoArray(this.carLocationInfo, this.carLocationHash); c.activityLocationHash = this.getAOSLocationHash(this.activityLocationInfo); c.activityLocationArray = this.populateAOSLocationInfoArray(this.activityLocationInfo, this.activityLocationHash); c.hotelLocationHash = this.getAOSLocationHash(this.hotelLocationInfo); c.hotelLocationArray = this.populateAOSLocationInfoArray(this.hotelLocationInfo, this.hotelLocationHash) }; return c }; b.Util.createObjectArray = []; b.Util.createObject = function (c, g, e, f) { f = f || "ready"; var d = b.Util.createObjectArray; d[d.length] = { objNameBase: c, objType: g, json: e, createEvent: f} }; b.Util.initObjects = function (j) { j = j || "ready"; var g = 0, e = b.Util.createObjectArray, h = "", d = "", f = null, c = null; for (g = 0; g < e.length; g += 1) { c = e[g]; if (c.createEvent === j) { h = c.objNameBase + b.Instance.getNextIndex(); d = c.objType; f = c.json || {}; if (b.Class[d]) { b.Instance[h] = new b.Class[d](); b.Instance[h].init(f) } } } }; b.Util.decodeUriComponent = function (c) { c = c || ""; if (window.decodeURIComponent) { c = window.decodeURIComponent(c) } c = b.Util.replace(c, /\+/g, " "); return c }; b.Util.encodeUriComponent = function (c) { c = c || ""; if (window.encodeURIComponent) { c = window.encodeURIComponent(c) } return c }; b.Util.getTime = function (c, d, g) { var f = "", e = 0; c = Number(c); e = c; d = Number(d); g = Number(g); if (isNaN(c) === false) { if (c > 12) { c = c - 12 } else { if (c === 0) { c = 12 } else { if (c.toString().length === 1) { c = "0" + c } } } f = c; if (isNaN(d) === false) { if (d.toString().length === 1) { d = "0" + d } f = f + ":" + d; if (isNaN(g) === false) { if (g.toString().length === 1) { g = "0" + g } f = f + ":" + g } } if (e > 11 && e < 24) { f = f + " PM" } else { f = f + " AM" } } return f }; b.Util.getResource = function () { return b.Resource }; b.Util.getAttributeValue = function (g, f) { var d = f + ".validation", c = g.data(d); return c }; b.Util.setAttribute = function (g, d, f) { var c = d + ".validation"; g.data(c, f) }; b.Util.removeAttribute = function (f, d) { var c = d + ".validation"; f.removeData(c) }; b.Util.setRequiredAttribute = function (f, i) { var h = "required", c = "requirederror", g = "true", d = b.Util.setAttribute; d(f, h, g); if (i) { d(f, c, i) } b.Util.formatInputLabel(f) }; b.Util.removeRequiredAttribute = function (f) { var g = "required", d = "requirederror", c = b.Util.removeAttribute; c(f, g); c(f, d); b.Util.formatInputLabel(f) }; b.Util.extendObject = function (d) { var c = function () { }; c.prototype = d; return new c() }; b.Util.supplant = function (d, c) { var e = /\[(\w+)\]/g; if (d && d.replace && c) { return d.replace(e, function (h, g) { var f = null; if (c.hasOwnProperty(g)) { f = c[g] } if (f === null) { f = "" } else { if (f === undefined) { f = g } } return f }) } else { return "" } }; b.Util.parseIsoDate = function (e) { var d = /^(\d{4})-([0-3]\d)-(\d{2})/, c = null, f = d.exec(e); if (f) { c = new Date(+f[1], f[2] - 1, +f[3]) } return c }; b.Util.dateToIsoString = function (e) { var f = e.getFullYear(), g = (e.getMonth() + 1).toString(), d = e.getDate().toString(), c = ""; if (g.length === 1) { g = "0" + g } if (d.length === 1) { d = "0" + d } c = f + "-" + g + "-" + d; return c }; b.Util.parseIsoDate = function (e) { var d = /^(\d{4})-(\d{2})-(\d{2})/, c = null, f = d.exec(e); if (f) { c = new Date(+f[1], f[2] - 1, +f[3]) } return c }; b.Util.dateToIsoString = function (e) { var f = e.getFullYear(), g = (e.getMonth() + 1).toString(), d = e.getDate().toString(), c = ""; if (g.length === 1) { g = "0" + g } if (d.length === 1) { d = "0" + d } c = f + "-" + g + "-" + d; return c }; b.Util.populateSelect = function (d) { d = d || {}; var c = d.selectedItem || null, h = d.objectArray || [], g = d.selectBox || null, p = d.showCode || false, u = d.clearOptions || false, o = "", q = "", l = null, m = null, s = 0, t = 0, k = "", r = Option, f = d.codeName || "code", e = d.nameProperty || "name", j = null, n = false; if (g.length > 0) { l = g[0]; if (l && l.options) { j = l.options; if (u) { j.length = 0 } else { if (!l.originalOptionLength) { l.originalOptionLength = l.options.length } j.length = l.originalOptionLength } t = h.length; if ($.browser.msie && $.browser.version < 7) { n = true } for (s = 0; s < t; s += 1) { m = h[s] || {}; o = m[e] || ""; q = m[f]; if (!q && q !== 0) { q = "" } if (p) { o += " (" + q + ")" } if (n) { k = new r(o, q, false, false); if (m.optionClass) { $(k).addClass(m.optionClass) } j[j.length] = k } else { k += '<option value="' + q + '"'; if (m.optionClass) { k += ' class"="' + m.optionClass + '"' } k += ">" + o + "</option>" } } if (!n) { g.append(k) } if (c !== null) { g.val(c) } } } }; b.Util.populate = function (d) { d = d || {}; var c = d.input || $([]); if (c && c[0] && c[0].options) { d.selectBox = c; b.Util.populateSelect(d) } else { if (c) { d.options = d.objectArray || []; b.Class.DropDown.getDropDown(d) } } }; b.Util.cloneArray = function (c) { return c.concat() }; b.Util.convertToLocaleCurrency = function (c) { var d = { num: c }, e = new b.Class.LocaleCurrency(); e.init(d); return e.currency }; b.Util.convertToLocaleInteger = function (c) { var d = { num: c }, e = new b.Class.LocaleCurrency(); e.init(d); return e.integerPart }; b.Util.formatAmount = function (f, e, h, c) { var g = "", d = (e === "0" || e === ""); if (f !== "" && !d) { g = e + " " + h + " " + c + " " + f } else { if (f !== "" && d) { g = f } else { if (f === "" && !d) { g = e + " " + h } } } return g }; b.Util.replace = function (f, d, e) { var g = "", c = typeof (d); e = String(e); c = c.toLowerCase(); f = String(f); if (c === "object") { e = e.replace(/\$/g, "$$$$") } g = f.replace(d, e); return g }; b.Class.SkySales = function () { var c = this; c.containerId = ""; c.container = null; c.init = b.Class.SkySales.prototype.init; c.getById = b.Class.SkySales.prototype.getById; c.setSettingsByObject = b.Class.SkySales.prototype.setSettingsByObject; c.addEvents = b.Class.SkySales.prototype.addEvents; c.setVars = b.Class.SkySales.prototype.setVars; c.hide = b.Class.SkySales.prototype.hide; c.show = b.Class.SkySales.prototype.show; return c }; b.Class.SkySales.prototype.init = function (c) { this.setSettingsByObject(c); this.setVars() }; b.Class.SkySales.prototype.getById = function (e, c) { var d = null; if (e && c) { d = $("#" + e, c) } else { if (e) { d = window.document.getElementById(e); if (d) { d = $(d) } } } if (!d) { d = $([]) } return d }; b.Class.SkySales.prototype.setSettingsByObject = function (c) { var d = ""; for (d in c) { if (c.hasOwnProperty(d)) { if (this[d] !== undefined) { this[d] = c[d] } } } }; b.Class.SkySales.prototype.addEvents = function () { }; b.Class.SkySales.prototype.setVars = function () { this.container = this.getById(this.containerId) }; b.Class.SkySales.prototype.hide = function () { this.container.hide() }; b.Class.SkySales.prototype.show = function () { this.container.show("slow") }; b.Class.BaseToggleView = function () { var c = b.Class.SkySales(), d = b.Util.extendObject(c); d.toggleViewIdArray = []; d.toggleViewArray = []; d.addToggleView = function (h) { if (h.toggleViewIdArray) { h = h.toggleViewIdArray } var f = h || [], e = null, g = 0, j = null; if (f.length === undefined) { f = []; f[0] = h } for (g = 0; g < f.length; g += 1) { e = f[g]; j = new b.Class.ToggleView(); j.init(e); d.toggleViewArray[d.toggleViewArray.length] = j } }; return d }; b.Class.FlightSearch = function () { var e = new b.Class.SkySales(), c = b.Util.extendObject(e), d = []; c.marketArray = []; c.flightTypeInputIdArray = []; c.countryInputIdArray = []; c.countryInputArray = []; c.init = function (f) { this.setSettingsByObject(f); this.setVars(); this.addEvents(); this.initFlightTypeInputIdArray(); this.initCountryInputIdArray(); this.populateFlightType() }; c.setSettingsByObject = function (g) { e.setSettingsByObject.call(this, g); var f = 0, h = this.marketArray || [], j = null; for (f = 0; f < h.length; f += 1) { j = new b.Class.FlightSearchMarket(); j.flightSearch = this; j.index = f; j.init(h[f]); this.marketArray[f] = j } }; c.initCountryInputIdArray = function () { var g = 0, f = null, j = {}, h = this.countryInputIdArray || []; for (g = 0; g < h.length; g += 1) { f = h[g]; j = new b.Class.CountryInput(); j.init(f); c.countryInputArray[this.countryInputArray.length] = j } }; c.initFlightTypeInputIdArray = function () { var g = 0, j = null, f = {}, h = this.flightTypeInputIdArray || []; for (g = 0; g < h.length; g += 1) { j = h[g]; f = new b.Class.FlightTypeInput(); f.flightSearch = this; f.index = g; f.init(j); d[d.length] = f } }; c.populateFlightType = function () { var f = 0, h = null, g = null; for (f = 0; f < d.length; f += 1) { h = d[f]; g = $(h.input); if (g.attr("checked")) { g.click(); break } } }; c.updateFlightType = function (i) { var g = 0, k = null, h = null, f, j = null; for (g = 0; g < d.length; g += 1) { k = d[g]; j = k.hideInputArray; for (f = 0; f < j.length; f += 1) { h = $(j[f]); h.show() } } j = i.hideInputArray; for (f = 0; f < j.length; f += 1) { h = $(j[f]); h.hide() } }; return c }; b.Class.FlightSearchMarket = function () { var e = new b.Class.SkySales(), d = b.Util.extendObject(e), c = [], f = [], h = [], g = []; d.flightSearch = null; d.index = -1; d.validationMessageObject = {}; d.validationObjectIdArray = []; d.stationInputIdArray = []; d.stationDropDownIdArray = []; d.marketInputIdArray = []; d.macInputIdArray = []; d.marketDateIdArray = []; d.lowFareAvailabilityArray = []; d.marketDateArray = []; d.init = function (i) { this.setSettingsByObject(i); this.setVars(); this.addEvents(); this.initMarketInputIdArray(); this.initStationInputIdArray(); this.initStationDropDownIdArray(); this.initMacInputIdArray(); this.initMarketDateIdArray(); this.initLowFareAvailabilityArray() }; d.initMacInputIdArray = function () { var k = 0, m = null, j = {}, l = this.macInputIdArray || []; for (k = 0; k < l.length; k += 1) { m = l[k]; j = new b.Class.MacInput(); j.init(m); g[g.length] = j; j.showMac.call(j.stationInput) } }; d.initMarketDateIdArray = function () { var j = 0, l = null, m = {}, k = this.marketDateIdArray || []; for (j = 0; j < k.length; j += 1) { l = k[j]; m = new b.Class.MarketDate(); m.init(l); this.marketDateArray[this.marketDateArray.length] = m } }; d.initMarketInputIdArray = function () { var k = 0, j = null, m = {}, l = this.marketInputIdArray || []; for (k = 0; k < l.length; k += 1) { j = l[k]; m = new b.Class.MarketInput(); m.init(j); c[c.length] = m } }; d.initStationInputIdArray = function () { var j = 0, k = null, m = {}, l = this.stationInputIdArray; for (j = 0; j < l.length; j += 1) { k = l[j]; m = new b.Class.StationInput(); m.init(k); f[f.length] = m } }; d.initStationDropDownIdArray = function () { var k = 0, m = null, j = {}, l = this.stationDropDownIdArray; for (k = 0; k < l.length; k += 1) { m = l[k]; j = new b.Class.StationDropDown(); j.init(m); h[h.length] = j } }; d.initLowFareAvailabilityArray = function () { var l = 0, m = null, k = this.lowFareAvailabilityArray, j = k.length, n = {}; for (l = 0; l < j; l += 1) { m = new b.Class.LowFareAvailability(); n = k[l]; n.datePickerManager = this.marketDateArray[0].datePickerManager; m.init(n); k[k.length] = m } }; return d }; b.Class.LowFareAvailability = function () { var f = new b.Class.SkySales(), e = b.Util.extendObject(f), d = "", c = "", g = ""; e.request = {}; e.url = "TripPlannerLowFareSelectAjax-resource.aspx"; e.containerId = "lowFareAvailabilityContainerId"; e.container = {}; e.showId = ""; e.show = null; e.flightSearch = {}; e.tripPlannerSearchFlight = {}; e.originId = ""; e.destinationId = ""; e.marketDateId = ""; e.marketDateObject = {}; e.datePickerManager = {}; e.requestStartDate = null; e.requestEndDate = null; e.lowFareAvailabilityMisconfiguredErrorDivId = "lowFareAvailabilityMisconfiguredErrorText"; e.lowFareAvailabilityMisconfiguredErrorText = ""; e.updateShow = function () { this.tripPlannerSearchFlight.tripPlannerSearchFlights.dontRequireOriginAndDestinationOnFlights(); this.tripPlannerSearchFlight.requireOriginAndDestination(); var h = this.validate(); if (h) { this.populateRequest(); this.sendLowFareAvailabilityRequest() } }; e.updateShowHandler = function () { e.updateShow() }; e.validate = function () { return b.Util.validate(this.show[0]) }; e.addEvents = function () { this.show.click(this.updateShowHandler) }; e.populateRequest = function () { var w = this.flightSearch.countryInputArray[0].input.val(), n = this.tripPlannerSearchFlight.tripPlannerSearchFlights.tripPlannerSearch, j = n.preferredFareDropDown.val(), z = n.passengerDiscountDropDown.val(), F = {}, C = n.passengerTypeDropDowns.passengerTypeDropDownArray || [], x = C.length, A = 0, G = "", q = "", y = "", k = d.val(), t = c.val(), h = g.val(), o = h.split("-"), E = o[0], p = o[1] - 1, r = o[2], m = {}, u = {}, D = new Date(), v = new Date(), s = new Date(), l = new Date(), B = new Date(); e.marketDateObject = new Date(E, p, r); e.request = { "Search.ResidentCountry": w, "Search.PreferredFare": j, "Search.DiscountCode": z }; for (A = 0; A < x; A += 1) { F = C[A]; G = F.attr("name"); y = F.val(); e.request[G] = y } v = new Date(D.getFullYear(), D.getMonth(), D.getDate() - 1); s = new Date(this.marketDateObject); s.setDate(s.getDate() - 7); if (v > s) { l = v } else { l = s } B = new Date(this.marketDateObject); B.setDate(B.getDate() + 7); e.requestStartDate = l; e.requestEndDate = B; q = "Search.DateMarkets[0]."; e.request[q + "OriginStation.MarketCode"] = k; e.request[q + "DestinationStation.MarketCode"] = t; m = b.Util.dateToIsoString(l); e.request[q + "DepartureDate"] = m; u = b.Util.dateToIsoString(B); e.request[q + "ArrivalDate"] = u; this.tripPlannerSearchFlight.hideTripIsUnavailable(); this.tripPlannerSearchFlight.hideTripHasNoFares() }; e.sendLowFareAvailabilityRequest = function () { $.post(this.url, this.request, this.responseHandler) }; e.availabilityExists = function (i) { i = i || []; var l = false, h = i.length || 0, k = 0, j = []; while ((k < h) && !l) { j = i[k].JourneyDateMarketList; if (j.length > 0) { l = true } k += 1 } return l }; e.makeDateMarketHash = function (h) { h = h || []; var t = {}, w = 0, n = h.length, x = {}, r = [], m = 0, s = 0, p, l = {}, i = 0, o = [], u = [], j = [], q = [], k = [], y = {}, v = 0, z = ""; for (w = 0; w < n; w += 1) { x = h[w]; r = x.JourneyDateMarketList; m = r.length; for (s = 0; s < m; s += 1) { p = r[s]; l = p.DepartureDate; i = l.Month - 1; z = "date_0_" + l.Year + "_" + i + "_" + l.Day; o = p.Journeys || []; v = 0; if (o.length) { u = o[0].Segments || []; if (u.length) { j = u[0].Fares || []; if (j.length) { q = j[0].PaxFares || []; if (q.length) { k = q[0].ServiceCharges || []; if (k.length) { y = k[0] || {}; v = y.Amount || 0; v = parseFloat(v, 10) } } } } } t[z] = { year: l.Year, month: i, day: l.Day, containerId: z, price: v} } } return t }; e.processResponse = function (q) { var o = $(q), k = o.html(), x = b.Json.parse(k), n = { containerId: "lowFareAvailabilityContainerId", templateId: "tripPlannerCalendar", totalTemplateId: "totalTemplateId", totalId: "totalId", marketArray: [], requestStartDate: this.requestStartDate, requestEndDate: this.requestEndDate }, l = [], m = {}, s = x.TripAvailabilityResponse || {}, p = s.Schedules || [], r = null, v = null, w = [], h = 0, u = 0, j = {}, t = {}, i = {}; v = this.availabilityExists(p); if (!v) { this.tripPlannerSearchFlight.showTripIsUnavailable(); this.container.hide() } else { if (p.length > 0) { r = p[0]; w = r.JourneyDateMarketList || []; h = w.length; if (h > 0) { j = w[0]; m = { departureStation: j.DepartureStation, arrivalStation: j.ArrivalStation, selectedDate: this.marketDateObject, startYear: j.DepartureDate.Year, startMonth: j.DepartureDate.Month - 1, startDay: j.DepartureDate.Day }; u = w.length; if (u > 0) { t = w[u - 1]; m.endYear = t.DepartureDate.Year; m.endMonth = t.DepartureDate.Month - 1; m.endDay = t.DepartureDate.Day } } m.dateMarketHash = this.makeDateMarketHash(p); m.datePickerManager = this.datePickerManager; l.push(m); n.marketArray = l; i = new b.Class.TripPlannerCalendarAvailabilityInput(); i.init(n); this.container.show() } } }; e.validateResponse = function (i) { var h = true; if (i === "") { h = false } else { if (!$(i)[0].innerHTML) { h = false } } return h }; e.validateAndProcessResponse = function (j) { var i = $(j), h = this.validateResponse(i); if (h) { this.processResponse(i) } else { alert(e.lowFareAvailabilityMisconfiguredErrorText) } }; e.responseHandler = function (h) { e.validateAndProcessResponse(h) }; e.ajaxErrorHandler = function (h) { e.ajaxError(h) }; e.setVars = function () { var h = this.getById(this.lowFareAvailabilityMisconfiguredErrorDivId); if (h.length > 0) { e.lowFareAvailabilityMisconfiguredErrorText = h.text() } e.show = this.getById(this.showId); e.container = this.getById(this.containerId); d = this.getById(this.originId); c = this.getById(this.destinationId); g = this.getById(this.marketDateId); e.flightSearch = this.tripPlannerSearchFlight.tripPlannerSearchFlights.tripPlannerSearch.flightSearch }; e.init = function (h) { this.setSettingsByObject(h); this.setVars(); this.addEvents() }; return e }; b.Class.MacInput = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.macHash = b.Util.getResource().macHash; d.stationHash = b.Util.getResource().stationHash; d.stationInputId = ""; d.macContainerId = ""; d.macLabelId = ""; d.macInputId = ""; d.macContainer = {}; d.stationInput = {}; d.macInput = {}; d.macLabel = {}; d.showMac = function () { var g = $(this).val(), e = null, f = "", i = "", h = null; g = g || ""; g = g.toUpperCase(); d.macInput.removeAttr("checked"); d.macContainer.hide(); e = d.stationHash[g]; if (e) { f = e.macCode; h = d.macHash[f]; if ((h) && (h.stations.length > 0)) { i = h.stations.join(); d.macLabel.html(i); d.macContainer.show() } } }; d.addEvents = function () { d.stationInput.change(d.showMac) }; d.setVars = function () { d.stationInput = this.getById(d.stationInputId); d.macContainer = this.getById(d.macContainerId); d.macLabel = this.getById(d.macLabelId); d.macInput = this.getById(d.macInputId) }; d.init = function (e) { c.init.call(this, e); d.macContainer.hide(); this.addEvents() }; return d }; b.Class.MarketDate = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.dateFormat = b.datepicker.datePickerFormat; c.dateDelimiter = b.datepicker.datePickerDelimiter; c.marketDateId = ""; c.marketDate = null; c.marketDayId = ""; c.marketDay = null; c.marketMonthYearId = ""; c.marketMonthYear = null; c.useJQueryDatePicker = true; c.datePickerManager = {}; c.fullDateFormatString = "mm/dd/yy"; c.parseDate = function (h) { var n = "", l = "", m = "", g = new Date(), f = "", o = "", j = [], k = 0, e = b.Util.parseIsoDate(h); if (e) { g = e } else { if (h.indexOf(c.dateDelimiter) > -1) { j = h.split(this.dateDelimiter); for (k = 0; k < this.dateFormat.length; k += 1) { f = j[k]; if (f.charAt(0) === "0") { f = f.substring(1) } o = this.dateFormat.charAt(k); switch (o) { case "m": l = f; break; case "d": n = f; break; case "y": m = f; break } } g = new Date(m, l - 1, n) } } return g }; c.addEvents = function () { var e = { isAOS: false, yearMonth: this.marketMonthYear, day: this.marketDay, linkedDate: this.marketDate, useJQueryDatePicker: this.useJQueryDatePicker, fullDateFormatString: this.fullDateFormatString }; c.datePickerManager = new b.Class.DatePickerManager(); this.datePickerManager.init(e) }; c.setVars = function () { c.marketDate = this.getById(this.marketDateId); c.marketDay = this.getById(this.marketDayId); c.marketMonthYear = this.getById(this.marketMonthYearId) }; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; c.datesInOrder = function (g) { var h = true, f = null, e = null; f = this.parseDate(g[0]); e = this.parseDate(g[1]); if (f > e) { h = false } return h }; return c }; b.Class.CountryInput = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.countryInfo = b.Util.getResource().countryInfo; c.countryInputId = ""; c.input = {}; c.defaultValue = null; c.showCode = true; c.populateCountryInput = function () { var g = {}, f = this.countryInfo || {}, e = this.defaultValue, h = f.CountryList || []; if (e === null) { e = f.DefaultValue } g = { input: this.input, objectArray: h, selectedItem: e, showCode: this.showCode }; b.Util.populate(g) }; c.setVars = function () { c.input = this.getById(this.countryInputId) }; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.populateCountryInput(); this.addEvents() }; return c }; b.Class.DateInput = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.yearStart = 1900; c.yearEnd = 0; c.dayCount = 31; c.date = null; c.dateId = ""; c.dateYear = null; c.dateYearId = ""; c.dateYearValue = ""; c.dateMonth = null; c.dateMonthId = ""; c.dateMonthValue = ""; c.dateDay = null; c.dateDayId = ""; c.dateDayValue = ""; c.dateDayInfo = []; c.dateMonthInfo = []; c.dateYearInfo = []; c.useOneBasedMonth = false; c.useTwoDigitMonth = false; c.showNumberMonth = false; c.defaultDayOfMonth = ""; c.initDateInfo = function () { var l = b.Util.getResource() || {}, f = l.dateCultureInfo.monthNamesShort || [], u = "", q = 0, m = 0, k = 0, j = this.useOneBasedMonth, e = this.dayCount, r = this.yearStart, h = new Date(), p = h.getFullYear(), t = this.yearEnd || p, n = this.dateDayInfo, o = this.dateMonthInfo, s = this.dateYearInfo, g = this.useTwoDigitMonth, v = this.showNumberMonth; for (m = 1; m <= e; m += 1) { n.push({ name: m, code: m }) } q = f.length; for (m = 0; m < q; m += 1) { k = m; u = f[m]; if (u) { if (v) { u = k; u = parseInt(u, 10); u += 1; if (u < 10) { u = "0" + u } } if (j) { k = m + 1 } if (g && k < 10) { k = "0" + k } o.push({ name: u, code: k }) } } if (t < r) { for (m = t; m <= r; m += 1) { s.push({ name: m, code: m }) } } else { for (m = t; m >= r; m -= 1) { s.push({ name: m, code: m }) } } }; c.initDropDown = function (e, g) { var f = {}; f = { objectArray: e, input: g, showCode: false, clearOptions: false, selectedItem: "" }; b.Util.populate(f) }; c.initDropDownValues = function () { var f = null, g = "", h = "", e = ""; if (this.dateYearValue !== "" && this.dateMonthValue !== "" && this.dateDayValue !== "") { f = new Date(this.dateYearValue, this.dateMonthValue - 1, this.dateDayValue); if (f) { g = f.getFullYear(); h = f.getMonth(); e = f.getDate(); if (g !== 9999) { this.dateYear.val(g); this.dateMonth.val(h); this.dateDay.val(e); this.updateDate() } } } }; c.updateDateHandler = function () { c.updateDate() }; c.updateDate = function () { var i = "", f = null, g = 0, j = 0, e = 0, h = this.defaultDayOfMonth; g = this.dateYear.val(); j = this.dateMonth.val(); e = this.dateDay.val(); if (!e && h === "last") { g = parseInt(g, 10); j = parseInt(j, 10); e = 1; f = new Date(g, j, e); if (!this.useOneBasedMonth) { f.setMonth(f.getMonth() + 1) } f.setDate(f.getDate() - 1); e = f.getDate() } if (g && j !== "" && e && j !== null) { g = parseInt(g, 10); j = parseInt(j, 10); if (this.useOneBasedMonth) { j -= 1 } e = parseInt(e, 10); f = new Date(g, j, e); i = b.Util.dateToIsoString(f) } this.date.val(i) }; c.setVars = function () { this.date = this.getById(this.dateId); this.dateYear = this.getById(this.dateYearId); this.dateMonth = this.getById(this.dateMonthId); this.dateDay = this.getById(this.dateDayId) }; c.addEvents = function () { this.dateYear.change(this.updateDateHandler); this.dateMonth.change(this.updateDateHandler); this.dateDay.change(this.updateDateHandler) }; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.initDateInfo(); this.initDropDown(this.dateYearInfo, this.dateYear); this.initDropDown(this.dateMonthInfo, this.dateMonth); this.initDropDown(this.dateDayInfo, this.dateDay); this.initDropDownValues(); this.addEvents() }; return c }; b.Class.FlightTypeInput = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.flightSearch = null; d.index = -1; d.flightTypeId = ""; d.hideInputIdArray = []; d.hideInputArray = []; d.input = {}; d.updateFlightTypeHandler = function () { d.flightSearch.updateFlightType(d) }; d.addEvents = function () { c.addEvents.call(this); this.input.click(this.updateFlightTypeHandler) }; d.setVars = function () { c.setVars.call(this); var e = 0, f = null, g = []; d.input = this.getById(this.flightTypeId); for (e = 0; e < this.hideInputIdArray.length; e += 1) { f = d.getById(this.hideInputIdArray[e]); if (f) { g[g.length] = f } } d.hideInputArray = $(g) }; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; return d }; b.Class.MarketInput = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d), e = b.Util.getResource() || {}; c.marketHash = e.marketHash; c.stationList = e.stationInfo.StationList || []; c.containerId = ""; c.container = null; c.disableInputId = ""; c.disableInput = null; c.originId = ""; c.origin = null; c.destinationId = ""; c.destination = null; c.toggleMarketCount = 0; c.toggleMarketHandler = function () { c.toggleMarket() }; c.toggleMarket = function () { if ((this.toggleMarketCount % 2) === 0) { $(":input", this.container).attr("disabled", "disabled") } else { $(":input", this.container).removeAttr("disabled") } c.toggleMarketCount += 1 }; c.updateMarketOriginHandler = function () { var f = $(this).val(); c.updateMarketOrigin(f) }; c.updateMarketOrigin = function (f) { var h = [], g = {}; f = f.toUpperCase(); h = this.marketHash[f]; h = h || []; g = { input: this.destination, objectArray: h, showCode: true }; b.Util.populate(g); this.destination.change() }; c.addEvents = function () { this.origin.change(this.updateMarketOriginHandler); this.disableInput.click(this.toggleMarketHandler) }; c.setVars = function () { c.container = this.getById(this.containerId); c.disableInput = this.getById(this.disableInputId); c.origin = this.getById(this.originId); c.destination = this.getById(this.destinationId) }; c.populateMarketInput = function (f) { var g = {}; g = { input: f, objectArray: this.stationList, showCode: true }; b.Util.populate(g) }; c.init = function (f) { this.setSettingsByObject(f); this.setVars(); this.addEvents(); this.populateMarketInput(this.origin); this.populateMarketInput(this.destination); this.disableInput.click(); this.disableInput.removeAttr("checked") }; return c }; b.Class.StationInput = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.stationInputId = ""; c.stationInput = null; c.setVars = function () { d.setVars.call(this); c.stationInput = this.getById(this.stationInputId) }; c.init = function (e) { d.init.call(this, e); this.addEvents() }; return c }; b.Class.StationDropDown = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.selectBoxId = ""; c.selectBox = null; c.inputId = ""; c.input = null; c.updateStationDropDown = function () { var e = $(this).val(); if (e) { c.selectBox.val(e) } }; c.updateStationInput = function () { var e = $(this).val(); c.input.val(e); c.input.change() }; c.addEvents = function () { c.input.change(c.updateStationDropDown); c.selectBox.change(c.updateStationInput) }; c.setVars = function () { c.selectBox = this.getById(c.selectBoxId); c.input = this.getById(c.inputId) }; c.init = function (e) { d.init.call(this, e); this.addEvents(); c.input.change() }; return c }; b.Class.TravelDocumentInput = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.instanceName = ""; c.delimiter = "_"; c.travelDocumentInfoId = ""; c.travelDocumentInfo = null; c.documentNumberId = ""; c.documentNumber = null; c.documentTypeId = ""; c.documentType = null; c.documentIssuingCountryId = ""; c.documentIssuingCountry = null; c.documentBirthCountryId = ""; c.documentBirthCountry = null; c.documentExpYearId = ""; c.documentExpYear = null; c.documentExpMonthId = ""; c.documentExpMonth = null; c.documentExpDayId = ""; c.documentExpDay = null; c.actionId = ""; c.action = null; c.travelDocumentKey = ""; c.missingDocumentText = ""; c.missingDocumentTypeText = ""; c.invalidExpDateText = ""; c.emptyExpDateText = ""; c.invalidDaysOfMonthTextPre = ""; c.invalidDaysOfMonthTextMid = ""; c.invalidDaysOfMonthTextPost = ""; c.missingDocumentNumberText = ""; c.missingDocumentCountryText = ""; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; c.setVars = function () { c.travelDocumentInfo = this.getById(this.travelDocumentInfoId); c.documentType = this.getById(this.documentTypeId); c.documentNumber = this.getById(this.documentNumberId); c.documentIssuingCountry = this.getById(this.documentIssuingCountryId); c.documentBirthCountry = this.getById(this.documentBirthCountryId); c.documentExpYear = this.getById(this.documentExpYearId); c.documentExpMonth = this.getById(this.documentExpMonthId); c.documentExpDay = this.getById(this.documentExpDayId); c.action = this.getById(this.actionId) }; c.setTravelDocumentInfo = function () { var i = "", e = this.documentType.val(), f = this.documentNumber.val(), g = this.documentIssuingCountry.val(), h = this.documentBirthCountry.val(); if (e && f && g) { i = this.delimiter + e + this.delimiter + f + this.delimiter + g + this.delimiter + h; this.travelDocumentInfo.val(i) } return true }; c.validateTravelDocumentHandler = function () { var e = c.validateTravelDocument(); return e }; c.validateTravelDocument = function () { this.setTravelDocumentInfo(); var f = this.action[0], e = b.Util.validate(f) && this.validateInput(); return e }; c.addEvents = function () { this.action.click(this.validateTravelDocumentHandler) }; c.validateInput = function () { var e = true, f = "", l = "", p = this.documentNumber.val() || "", k = this.documentExpYear.val() || "", g = this.documentExpMonth.val() || "", h = this.documentExpDay.val() || "", o = this.documentType.val() || "", m = this.documentIssuingCountry.val() || "", i = false, j = false, n = ""; if (p || o || m || k || g || h) { if (!p) { f = f + this.missingDocumentNumberText + "\n" } if (!o) { f = f + this.missingDocumentTypeText + "\n" } if (!m) { f = f + this.missingDocumentCountryText + "\n" } j = this.checkDaysOfMonth(h, g, k); i = this.isPastDate(h, g, k); if (h && g && k) { if (!j) { n = this.documentExpMonth.find(":selected").text(); l = this.invalidDaysOfMonthTextPre + h; l += this.invalidDaysOfMonthTextMid + n + this.invalidDaysOfMonthTextPost; f = f + l + "\n" } else { if (!i) { f = f + this.invalidExpDateText + "\n" } } } else { f = f + this.emptyExpDateText + "\n" } if (f) { window.alert(this.missingDocumentText + "\n" + f); e = false } } return e }; c.checkDaysOfMonth = function (g, k, h) { h = window.parseInt(h, 10); k = window.parseInt(k, 10); g = window.parseInt(g, 10); var j = false, i = null, e = -1, f = null; if (h && k && g) { k -= 1; i = new Date(); i.setMonth(2); i.setDate(1); i.setDate(i.getDate() - 1); e = i.getDate(); f = [31, e, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; if (g <= f[k]) { j = true } } return j }; c.isPastDate = function (f, j, h) { h = window.parseInt(h, 10); j = window.parseInt(j, 10); f = window.parseInt(f, 10); var i = false, e = null, g = null; if (h && j && f) { j -= 1; e = new Date(); g = new Date(h, j, f); if (g > e) { i = true } } return i }; return c }; b.Class.ControlGroup = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.actionId = "SkySales"; c.action = null; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; c.setVars = function () { d.setVars.call(this); c.action = this.getById(this.actionId) }; c.addEvents = function () { d.addEvents.call(this); this.action.click(this.validateHandler) }; c.validateHandler = function () { var e = c.validate(); return e }; c.validate = function () { var e = this.action[0], f = b.Util.validate(e); return f }; return c }; b.Class.ControlGroupRegister = function () { var d = new b.Class.ControlGroup(), c = b.Util.extendObject(d); c.travelDocumentInput = null; c.setSettingsByObject = function (e) { d.setSettingsByObject.call(this, e); var f = new b.Class.TravelDocumentInput(); f.init(this.travelDocumentInput); c.travelDocumentInput = f }; c.validateHandler = function () { var e = c.validate(); return e }; c.validate = function () { var e = false; e = (this.travelDocumentInput.setTravelDocumentInfo() && this.travelDocumentInput.validateExpDate()); if (e) { e = d.validate.call(this) } return e }; return c }; b.Class.PersonInput = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d), e = b.Util.getResource(); c.countryInputId = ""; c.countryInput = null; c.stateInputId = ""; c.stateInput = null; c.emptyStateSelect = ""; c.defaultProvinceStateCode = ""; c.defaultCountryCode = ""; c.countryStateHash = null; c.clientHash = e.clientHash; c.countryArray = e.countryInfo.CountryList; c.allStateArray = e.provinceStateInfo.ProvinceStateList; c.enableSeatLocation = false; c.seatLocationInputId = ""; c.seatLocationInput = null; c.seatLocationHiddenFieldId = ""; c.seatLocationHiddenField = null; c.seatTypeInputId = ""; c.seatTypeInput = null; c.seatTypeArray = []; c.seatLocationArray = []; c.defaultSeatLocation = ""; c.defaultSeatType = ""; c.init = function (f) { this.setSettingsByObject(f); this.setVars(); this.addEvents(); this.initCountryInput(); this.initStateInput(); this.initializeSeatPreferences() }; c.initCountryInput = function () { var f = {}, g = this.countryArray || []; f = { selectedItem: this.defaultCountryCode, input: this.countryInput, objectArray: g, showCode: false }; b.Util.populate(f) }; c.initStateInput = function () { var k = {}, h = this.allStateArray || [], l, j = 0, f = h.length, g = this.defaultCountryCode + "|" + this.defaultProvinceStateCode; if (this.defaultProvinceStateCode.indexOf("|") > -1) { g = this.defaultProvinceStateCode } for (j = 0; j < f; j += 1) { l = h[j]; l.code = l.ccode + "|" + l.scode } k = { selectedItem: g, input: this.stateInput, objectArray: h, showCode: false }; b.Util.populate(k) }; c.getCountryStateHash = function () { var m = 0, g = 0, i = [], f = null, h = null, k = {}, l = 0, n = 0, o = this.countryArray, j = this.allStateArray; l = o.length; for (m = 0; m < l; m += 1) { h = o[m]; i = []; i.push({ name: this.emptyStateSelect, code: "", ccode: "", scode: "" }); if (j !== undefined) { n = j.length; for (g = 0; g < n; g += 1) { f = j[g]; if (f.ccode === h.code) { i.push(f) } } } k[h.code] = i } return k }; c.updateCountryHandler = function () { c.updateCountry() }; c.updateCountry = function () { var f = this.stateInput.val(), g = f.split("|"), h = ""; if (g.length === 2) { h = g[0]; this.countryInput.val(h) } }; c.updateStateHandler = function () { c.updateState() }; c.updateState = function () { var m = this.countryInput.val(), g = [], j = {}, n = [], h = 0, f = 0, k = this.getCountryStateHash(), l = {}; g = k[m]; g = g || []; if (g.length === 0) { n.push({ name: this.emptyStateSelect, code: "", ccode: "", scode: "" }); g = this.allStateArray } f = g.length; for (h = 0; h < f; h += 1) { j = g[h]; n.push(j) } l = { objectArray: n, input: this.stateInput, showCode: false, clearOptions: true }; b.Util.populate(l) }; c.addEvents = function () { this.countryInput.change(this.updateStateHandler); this.stateInput.change(this.updateCountryHandler); this.seatLocationInput.change(this.updateSeatLocationHiddenHandler) }; c.updateSeatLocationHiddenHandler = function () { c.updateSeatLocationHidden() }; c.updateSeatLocationHidden = function () { var f = this.seatLocationInput || {}, h = f.val(), g = this.seatLocationHiddenField || {}; g.val(h) }; c.setVars = function () { c.countryInput = this.getById(this.countryInputId); c.stateInput = this.getById(this.stateInputId); c.seatLocationHiddenField = this.getById(this.seatLocationHiddenFieldId); c.seatLocationInput = this.getById(this.seatLocationInputId); c.seatTypeInput = this.getById(this.seatTypeInputId) }; c.populateSeatDropDowns = function () { var f = {}, g = {}; f = { selectBox: this.seatTypeInput, objectArray: this.seatTypeArray, selectedItem: this.defaultSeatType }; b.Util.populateSelect(f); g = { selectBox: this.seatLocationInput, objectArray: this.seatLocationArray, selectedItem: this.defaultSeatLocation }; b.Util.populateSelect(g) }; c.updateSeatLocationDropDownList = function () { var g = this.enableSeatLocation || false, f = this.seatLocationInput || {}; if (g) { f.removeAttr("disabled") } else { f.attr("disabled", "disabled") } }; c.initializeSeatPreferences = function () { this.populateSeatDropDowns(); this.updateSeatLocationDropDownList(); this.updateSeatLocationHidden() }; return c }; b.Class.AgencyInput = function () { var c = new b.Class.PersonInput(), d = b.Util.extendObject(c); d.updateCountryHandler = function () { d.updateCountry() }; d.updateStateHandler = function () { d.updateState() }; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents(); this.initCountryInput(); this.initStateInput() }; return d }; b.Class.ContactInput = function () { var d = new b.Class.PersonInput(), c = b.Util.extendObject(d); c.clientId = ""; c.keyIdArray = []; c.keyArray = []; c.clientStoreIdHash = null; c.imContactId = ""; c.imContact = null; c.currentContactData = {}; c.logOutButton = null; c.clearCurrentContactHandler = function () { c.clearCurrentContact() }; c.clearCurrentContact = function () { var e = this.clientId; this.getById(e + "_DropDownListTitle").val(""); this.getById(e + "_TextBoxFirstName").val(""); this.getById(e + "_TextBoxMiddleName").val(""); this.getById(e + "_TextBoxLastName").val(""); this.getById(e + "_TextBoxAddressLine1").val(""); this.getById(e + "_TextBoxAddressLine2").val(""); this.getById(e + "_TextBoxAddressLine3").val(""); this.getById(e + "_TextBoxCity").val(""); this.getById(e + "_DropDownListStateProvince").val(""); this.getById(e + "_DropDownListCountry").val(""); this.getById(e + "_TextBoxPostalCode").val(""); this.getById(e + "_TextBoxHomePhone").val(""); this.getById(e + "_TextBoxWorkPhone").val(""); this.getById(e + "_TextBoxOtherPhone").val(""); this.getById(e + "_TextBoxFax").val(""); this.getById(e + "_TextBoxEmailAddress").val("") }; c.populateCurrentContactHandler = function () { c.populateCurrentContact() }; c.populateCurrentContact = function () { if (this.currentContactData) { if (this.imContact.attr("checked") === true) { this.populateContactFields() } else { this.clearCurrentContact() } } }; c.populateContactFields = function () { var e = this.clientId, f = this.currentContactData; this.getById(e + "_DropDownListTitle").val(f.title); this.getById(e + "_TextBoxFirstName").val(f.firstName); this.getById(e + "_TextBoxMiddleName").val(f.middleName); this.getById(e + "_TextBoxLastName").val(f.lastName); this.getById(e + "_TextBoxAddressLine1").val(f.streetAddressOne); this.getById(e + "_TextBoxAddressLine2").val(f.streetAddressTwo); this.getById(e + "_TextBoxAddressLine3").val(f.streetAddressThree); this.getById(e + "_TextBoxCity").val(f.city); this.getById(e + "_DropDownListStateProvince").val(f.country + "|" + f.stateProvince); this.getById(e + "_DropDownListCountry").val(f.country); this.getById(e + "_TextBoxPostalCode").val(f.postalCode); this.getById(e + "_TextBoxHomePhone").val(f.eveningPhone); this.getById(e + "_TextBoxWorkPhone").val(f.dayPhone); this.getById(e + "_TextBoxOtherPhone").val(f.mobilePhone); this.getById(e + "_TextBoxFax").val(f.faxPhone); this.getById(e + "_TextBoxEmailAddress").val(f.email) }; c.updateCountryHandler = function () { c.updateCountry() }; c.updateStateHandler = function () { c.updateState() }; c.getKey = function () { var j = 0, f = this.keyArray, g = null, h = "", e = f.length; for (j = 0; j < e; j += 1) { g = f[j]; h += g.val() } h = this.clientId + "_" + (h.toLowerCase()); return h }; c.populateClientStoreIdHash = function () { var m = this.clientHash, j = 0, h = "", f = [], e = "", l = -1, g = this.getKey(), k = null; c.clientStoreIdHash = {}; if (g && m && m[g]) { c.clientStoreIdHash = this.clientStoreIdHash || {}; h = m[g]; f = h.split("&"); for (j = 0; j < f.length; j += 1) { e = f[j]; l = e.indexOf("="); if (l > -1) { g = e.substring(0, l); k = e.substring(l + 1, e.length); if (g) { c.clientStoreIdHash[g] = k } } } } }; c.autoPopulateFormHandler = function () { c.autoPopulateForm() }; c.autoPopulateForm = function () { var e = this.clientStoreIdHash, f = "", g = ""; this.populateClientStoreIdHash(); for (f in e) { if (e.hasOwnProperty(f)) { g = e[f]; this.getById(f).val(g) } } }; c.addEvents = function () { var h = 0, f = this.keyArray, g = null, e = f.length; d.addEvents.call(this); for (h = 0; h < e; h += 1) { g = f[h]; g.change(this.autoPopulateFormHandler) } this.imContact.click(this.populateCurrentContactHandler); this.logOutButton.click(this.clearCurrentContactHandler) }; c.setVars = function () { var f = 0, g = this.keyIdArray, e = this.keyArray, h = ""; d.setVars.call(this); for (f = 0; f < g.length; f += 1) { h = g[f]; e[e.length] = this.getById(h) } c.imContact = this.getById(this.imContactId); c.logOutButton = this.getById("MemberLoginContactView_ButtonLogOut") }; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents(); this.initCountryInput(); this.initStateInput() }; return c }; b.Class.ToggleView = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.showId = ""; c.hideId = ""; c.elementId = ""; c.show = null; c.hide = null; c.element = null; c.setVars = function () { d.setVars.call(this); c.show = this.getById(this.showId); c.hide = this.getById(this.hideId); c.element = this.getById(this.elementId) }; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; c.updateShowHandler = function () { c.updateShow() }; c.updateHideHandler = function () { c.updateHide() }; c.updateShow = function () { this.element.show("slow") }; c.updateHide = function () { this.element.hide() }; c.updateToggleHandler = function () { c.updateToggle() }; c.updateToggle = function () { if (this.element.is(":visible")) { this.updateHide() } else { this.updateShow() } }; c.addEvents = function () { d.addEvents.call(this); if (this.showId === this.hideId) { this.show.click(this.updateToggleHandler) } else { this.show.click(this.updateShowHandler); this.hide.click(this.updateHideHandler) } }; return c }; b.Class.PaymentInputBase = function () { var d = b.Class.SkySales(), c = b.Util.extendObject(d); c.paymentInputCreditCardTypeId = ""; c.paymentInputCreditCardType = {}; c.paymentInputCreditCardNumberId = ""; c.paymentInputCreditCardNumber = {}; c.paymentInputCreditCardExpirationMonthId = ""; c.paymentInputCreditCardExpirationMonth = {}; c.paymentInputCreditCardExpirationYearId = ""; c.paymentInputCreditCardExpirationYear = {}; c.paymentInputCreditCardHolderNameId = ""; c.paymentInputCreditCardHolderName = {}; c.paymentInputCreditCardAmountId = ""; c.paymentInputCreditCardAmount = {}; c.paymentInputCreditCardCvvId = ""; c.paymentInputCreditCardCvv = {}; c.paymentInputCreditCardIssueNumberId = ""; c.paymentInputCreditCardIssueNumber = {}; c.init = function (e) { this.setSettingsByObject(e); this.setVars() }; c.setVars = function () { c.paymentInputCreditCardAmount = this.getById(this.paymentInputCreditCardAmountId); c.paymentInputCreditCardCvv = this.getById(this.paymentInputCreditCardCvvId); c.paymentInputCreditCardExpirationMonth = this.getById(this.paymentInputCreditCardExpirationMonthId); c.paymentInputCreditCardExpirationYear = this.getById(this.paymentInputCreditCardExpirationYearId); c.paymentInputCreditCardHolderName = this.getById(this.paymentInputCreditCardHolderNameId); c.paymentInputCreditCardNumber = this.getById(this.paymentInputCreditCardNumberId); c.paymentInputCreditCardType = this.getById(this.paymentInputCreditCardTypeId); c.paymentInputCreditCardIssueNumber = this.getById(this.paymentInputCreditCardIssueNumberId) }; return c }; b.Class.InlineDCC = function () { var c = b.Class.PaymentInputBase(), d = b.Util.extendObject(c); d.inlineDCCOfferKeyInputId = ""; d.cultureCode = ""; d.foreignAmountId = ""; d.foreignCurrencyNameId = ""; d.foreignCurrencySymbolId = ""; d.ownCurrencyAmountId = ""; d.ownCurrencyNameId = ""; d.ownCurrencySymbolId = ""; d.rejectInlineDccRadioButtonId = ""; d.acceptInlineDccRadioButtonId = ""; d.doubleOptOutId = ""; d.inlineDCCAjaxSucceededId = ""; d.dccId = ""; d.inlineDCCConversionLabelId = ""; d.paymentMethodInputId = ""; d.paymentMethodInput = {}; d.amountInputId = ""; d.accountNumberInputId = ""; d.currencyCode = ""; d.feeAmt = null; d.inlineDCCJson = {}; d.inlineDCCActive = false; d.paymentMethod = null; d.setDCCVars = function (e) { d.dcc = this.getById(this.dccId); d.inlineDCCConversionLabel = this.getById(this.inlineDCCConversionLabelId); d.paymentMethodInput = e.methodInput; d.accountNoTextBox = e.accountNumber; d.amountTextBox = e.amountDom; d.inlineDCCAjaxSucceeded = this.getById(this.inlineDCCAjaxSucceededId); d.inlineDCCActive = e.inlineDCCActive }; d.inlineDCCAjaxRequestHandler = function () { d.getInlineDCC() }; d.addEvents = function () { if (this.accountNoTextBox) { this.accountNoTextBox.change(this.inlineDCCAjaxRequestHandler) } }; d.init = function (e) { this.setSettingsByObject(e) }; d.getInlineDCC = function (n) { this.setDCCVars(n); this.clearInlineDCCOffer(); var f = {}, j = n.key, h = 0, g = n.inlineDCCActive, o = n.paymentType, m = o.paymentTypes.paymentFees.paymentFeeHash, e = {}, i = n.accountNumberValue, k = 0, l = 0; if (g) { e = m[j] || {}; h = e.amount || 0; if (!k) { k = n.accountNumber.val(); if (!k) { k = n.maskedNumber } } if (!l) { l = this.amountTextBox.val() } if (l && k) { f = { amount: l, paymentFee: h, currencyCode: this.currencyCode, accountNumber: k, accountNumberId: i, paymentMethod: j, cultureCode: this.cultureCode }; if (this.currencyCode && l && k && (0 < parseFloat(l)) && (12 <= k.length)) { this.inlineDCCAjaxSucceeded.val("false"); this.paymentMethod = n; $.post("DccOffer-rest.aspx", f, this.inlineDCCResponseHandler) } } else { this.clearInlineDCCOffer() } } else { this.clearInlineDCCOffer() } }; d.clearInlineDCCOffer = function () { this.dcc.html("") }; d.setVarsAfterAjaxResponse = function (e) { d.foreignAmount = e.foreignCurrencyAmount; d.foreignCurrencyName = e.foreignCurrencyName; d.foreignCurrencySymbol = e.foreignCurrencySymbol; d.ownCurrencyAmount = e.ownCurrencyAmount; d.ownCurrencyName = e.ownCurrencyName; d.ownCurrencySymbol = e.ownCurrencySymbol; d.rejectInlineDccRadioButton = this.getById(this.rejectInlineDccRadioButtonId); d.acceptInlineDccRadioButton = this.getById(this.acceptInlineDccRadioButtonId) }; d.foreignUpdateConversionLabel = function () { this.inlineDCCConversionLabel.text("( " + this.foreignAmount + " " + this.foreignCurrencyName + ")") }; d.ownUpdateConversionLabel = function () { this.inlineDCCConversionLabel.text("") }; d.noThanks = function () { this.getById("dccCont").show("slow") }; d.noShowThanks = function () { this.getById("dccCont").hide("slow") }; d.updateAcceptRadioBtn = function (e) { this.acceptInlineDccRadioButton.attr("checked", e); this.rejectInlineDccRadioButton.attr("checked", !e); this.foreignUpdateConversionLabel() }; d.updateInlineDCCOffer = function (h) { var j = {}, o = this.getById(this.inlineDCCOfferKeyInputId), n = this.dcc, e = "", l = "", i = this.paymentMethod, m = i.paymentType, g = m.getCurrentPaymentMethodKey(), f = i.accountNumber.val(), k = ""; if (h) { j = b.Json.parse(h); if (j) { k = "ExternalAccount:" + j.paymentMethodCode; if (k === g && j.accountNumber === f) { if (j.paymentMethodCode) { this.inlineDCCAjaxSucceeded.val("true") } o.val(h); n.empty(); if (j.applicable === true) { l = $("#inlineDccTemplate").html(); l = b.Util.replace(l, "<!--", ""); l = b.Util.replace(l, "-->", ""); e = b.Util.supplant(l, j); n.append(e) } this.setVarsAfterAjaxResponse(j); this.updateAcceptRadioBtn(j.acceptByDefault) } } } }; d.inlineDCCResponseHandler = function (e) { d.updateInlineDCCOffer(e) }; return d }; b.Class.PaymentFees = function () { var d = b.Class.SkySales(), c = b.Util.extendObject(d); c.paymentFeeArray = []; c.paymentFeeHash = {}; c.quotedAmount = -1; c.templateId = ""; c.template = null; c.submitName = ""; c.url = "PaymentFeesAjax-resource.aspx"; c.quotedAmountName = ""; c.keyName = ""; c.key = ""; c.paymentMethod = {}; c.setVars = function () { d.setVars.call(this); c.template = this.getById(this.templateId) }; c.updatePaymentAmountHandler = function () { c.updatePaymentAmount() }; c.updatePaymentAmount = function (i, h) { var l = this.submitName, g = h, k = this.quotedAmountName, j = this.keyName, f = {}, e = "__EVENTTARGET"; f[k] = g; f[j] = i; f[e] = ""; f[l] = "UpdatePaymentArray"; $.post(this.url, f, this.updatePaymentFeeArrayHandler) }; c.updatePaymentFeeArrayHandler = function (e) { c.updatePaymentFeeArray(e) }; c.updatePaymentFeeArray = function (e) { e = $(e).text(); e = b.Json.parse(e) || {}; c.paymentFeeArray = e.paymentFeeArray || []; c.quotedAmount = e.quotedAmount || 0; c.key = e.key || ""; this.initPaymentFeeHash(); this.updatePaymentFee(this.key, this.quotedAmount) }; c.updatePaymentFeeHandler = function () { c.updatePaymentFee() }; c.updatePaymentFee = function (i, h) { var f = this.paymentFeeHash[i] || {}, g = this.quotedAmount, e = this.paymentMethod; this.deactivatePaymentFees(); h = parseFloat(h, 10); g = parseFloat(g, 10); if (g === h) { this.activatePaymentFees(f); if (e) { e.paymentType.paymentTypes.inlineDCC.getInlineDCC(e) } } else { this.updatePaymentAmount(i, h) } }; c.activatePaymentFees = function (e) { var f = "", g = e.amount; g = parseFloat(g, 10); if (g > 0) { f = this.getHtml(e); this.container.html(f); this.container.show() } }; c.deactivatePaymentFees = function () { var e = ""; this.container.html(e); this.container.hide() }; c.getHtml = function (e) { var f = ""; f = this.template.text(); f = b.Util.supplant(f, e); return f }; c.initPaymentFeeHash = function () { var k = this.paymentFeeArray || [], g = null, j = 0, e = k.length, f = {}, h = ""; for (j = 0; j < e; j += 1) { g = new b.Class.PaymentFee(); g.init(k[j]); h = g.key; f[h] = g } this.paymentFeeHash = f }; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents(); this.initPaymentFeeHash() }; return c }; b.Class.PaymentFee = function () { var c = b.Class.SkySales(), d = b.Util.extendObject(c); d.amount = -1; d.total = -1; d.feeCode = -1; d.isFixedAmount = false; d.key = ""; d.amountFormatted = ""; d.totalFormatted = ""; d.init = function (e) { this.setSettingsByObject(e); d.amount = parseFloat(this.amount, 10); d.total = parseFloat(this.total, 10) }; return d }; b.Class.PaymentTypes = function () { var d = b.Class.SkySales(), c = b.Util.extendObject(d); c.paymentTypeArray = []; c.paymentFees = {}; c.showDeviceFingerprint = false; c.passThroughForChargePaymentArray = []; c.passThroughForHoldPaymentArray = []; c.inlineDCC = {}; c.storedPaymentInputId = ""; c.storedPaymentInput = {}; c.initPaymentTypeArray = function () { var f = this.paymentTypeArray || [], h = null, g = 0, e = f.length, j = false; for (g = 0; g < e; g += 1) { h = new b.Class.PaymentType(); h.paymentTypes = this; h.init(f[g]); f[g] = h; if (h.isDefault === true && j === false) { h.activate(); j = true } } this.paymentTypeArray = f }; c.initPassThroughPaymentArray = function (j, o) { j = j || ""; o = o || {}; var q = this.passThroughForChargePaymentArray || [], m = this.passThroughForHoldPaymentArray || [], p = null, e = null, h = 0, r = {}, f = o.paymentMethodType || "", l = o.paymentMethodCode || "", g = j + f + "_" + l + "_", n = q.concat(m), k = n.length; for (h = 0; h < k; h += 1) { e = n[h]; p = new b.Class.PassThroughPayment(); r = { paymentInputCreditCardTypeId: f + "_PaymentMethodCode", paymentInputCreditCardNumberId: g + "ACCTNO", paymentInputCreditCardExpirationMonthId: g + "EXPDAT_MONTH", paymentInputCreditCardExpirationYearId: g + "EXPDAT_YEAR", paymentInputCreditCardHolderNameId: g + "CC::AccountHolderName", paymentInputCreditCardCvvId: g + "CC::VerificationCode", paymentInputCreditCardIssueNumberId: g + "CC::IssueNumber" }; e.paymentInputContentIds = r; p.init(e); n[h] = p } this.passThroughPaymentArray = n }; c.initPaymentFees = function () { var e; e = new b.Class.PaymentFees(); e.init(this.paymentFees); this.paymentFees = e }; c.updatePaymentTypes = function (j) { var f = this.paymentTypeArray || [], h = null, g = 0, e = f.length; if (j) { for (g = 0; g < e; g += 1) { h = f[g]; h.deactivate() } j.activate() } }; c.enableDeviceFingerprint = function () { var e = b.Class.PaymentTypes.deviceFingerprintLoaded; if (this.showDeviceFingerprint === true && e === false) { b.Class.PaymentTypes.deviceFingerprintLoaded = true; $("body").append('<iframe id="deviceFingerprint" src="DeviceFingerprint.aspx" width="0" height="0"></iframe>') } }; c.initDCC = function () { var e = new b.Class.InlineDCC(); e.init(this.inlineDCC); this.inlineDCC = e }; c.setVars = function () { c.storedPaymentInput = this.getById(this.storedPaymentInputId) }; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents(); this.initDCC(); this.initPaymentFees(); this.initPassThroughPaymentArray(); this.initPaymentTypeArray(); this.enableDeviceFingerprint() }; return c }; b.Class.PaymentTypes.deviceFingerprintLoaded = false; b.Class.PaymentType = function () { var c = b.Class.SkySales(), d = b.Util.extendObject(c); d.paymentTypes = null; d.actionId = ""; d.action = null; d.paymentMethodActionId = ""; d.paymentMethodAction = null; d.isDefault = false; d.nameSpaceName = ""; d.nameSpaceId = ""; d.hint = ""; d.paymentMethodArray = []; d.setVars = function () { c.setVars.call(this); d.action = this.getById(this.actionId); d.paymentMethodAction = this.getById(this.paymentMethodActionId) }; d.addEvents = function () { this.action.click(this.updatePaymentTypeHandler); this.paymentMethodAction.change(this.updatePaymentMethodHandler) }; d.updatePaymentTypeHandler = function (f) { f.preventDefault(); d.updatePaymentType(); return false }; d.updatePaymentType = function () { this.paymentTypes.updatePaymentTypes(this) }; d.deactivate = function () { this.action.removeClass("tabactive"); this.container.hide(); var g = this.paymentMethodArray || [], m = null, k = 0, l = g.length, n = this.nameSpaceName, f = this.paymentMethodAction, e = f.attr("name") || "", j = this.hint, h = new b.Hint(); if (j !== "" && f.length > 0) { h.removeEventFunction.call(f[0]); b.Util.removeAttribute(f, "hint", j) } e = b.Util.replace(e, n, ""); this.paymentMethodAction.attr("name", e); for (k = 0; k < l; k += 1) { m = g[k]; m.deactivate() } }; d.activate = function () { this.action.addClass("tabactive"); this.container.show(); var g = this.nameSpaceName, j = this.paymentMethodAction, h = j.attr("name") || "", i = this.hint, f = new b.Hint(), e = this.getActivePaymentMethod(); if (i !== "" && j.length > 0) { b.Util.setAttribute(j, "hint", i); f.eventFunction.call(j[0]) } h = g + h; j.attr("name", h); this.updatePaymentMethod(e.staticKey) }; d.getActivePaymentMethod = function () { var g = this.paymentMethodArray || [], k = this.paymentMethodAction.val(), j = {}, f = {}, e = g.length, h = 0; if (e > 0) { j = g[0]; for (h = 0; h < e; h += 1) { f = g[h]; if (f.staticKey === k) { j = f; break } } } return j }; d.initPaymentMethodArray = function () { var g = this.paymentMethodArray || [], f = null, h = 0, e = g.length; for (h = 0; h < e; h += 1) { f = new b.Class.PaymentMethod(); f.paymentType = this; f.nameSpaceName = this.nameSpaceName; f.init(g[h]); g[h] = f } this.paymentMethodArray = g }; d.updatePaymentMethodHandler = function () { var e = $(this).val(); d.updatePaymentMethod(e) }; d.getCurrentStoredPaymentId = function () { var f = "", e = this.paymentMethodAction, g = e.val(); f = this.getStoredPaymentIdFromValue(g); return f }; d.getStoredPaymentIdFromValue = function (g) { g = g || ""; var e = 0, f = g.split("-"); if (f.length > 1) { e = f[1] } return e }; d.getCurrentPaymentMethodKey = function () { var f = "", e = this.paymentMethodAction, g = e.val(); f = this.getPaymentMethodKeyFromValue(g); return f }; d.getPaymentMethodKeyFromValue = function (g) { g = g || ""; var e = "", f = g.split("-"); e = f[0]; return e }; d.updatePaymentMethod = function (g) { g = g || ""; var m = g, f = this.paymentMethodArray || [], k = {}, h = 0, j = f.length, e = m.indexOf("-"), l = m.indexOf("_"), n = ""; if (e > -1) { m = m.substring(0, e) } if (l > -1) { n = m.substring(l + 1, m.length); m = m.substring(0, l) } for (h = 0; h < j; h += 1) { k = f[h]; k.deactivate() } for (h = 0; h < j; h += 1) { k = f[h]; if (g === k.staticKey) { k.activate(); if (n) { k.updateRefundPaymentAmount(n) } } } }; d.setPaymentFieldsOnStoredPayments = function () { var g = this.paymentMethodArray, f = null, l = null, k = 0, e = g.length, h = 0; for (k = 0; k < e; k += 1) { l = g[k]; if (l.isStoredPayment) { for (h = 0; h < e; h += 1) { f = g[h]; if (!f.isStoredPayment && l.key === f.key) { l.paymentFieldArray = f.paymentFieldArray } } } } }; d.setPaymentFieldsOnBookingPayments = function () { var g = this.paymentMethodArray, f = null, l = null, k = 0, e = g.length, h = 0; for (k = 0; k < e; k += 1) { l = g[k]; if (l.isBookingPayment) { for (h = 0; h < e; h += 1) { f = g[h]; if (!f.isBookingPayment && l.key === f.key) { l.paymentFieldArray = f.paymentFieldArray } } } } }; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents(); this.initPaymentMethodArray() }; return d }; b.Class.PaymentMethod = function () { var c = b.Class.SkySales(), d = b.Util.extendObject(c); d.paymentInputJson = {}; d.paymentInput = {}; d.paymentType = null; d.isDefault = false; d.key = ""; d.staticKey = ""; d.accountNumberId = ""; d.accountNumberValue = 0; d.accountNumber = null; d.amountId = ""; d.amountDom = null; d.paymentFieldArray = []; d.nameSpaceName = ""; d.isStoredPayment = false; d.isBookingPayment = false; d.inlineDCCActive = false; d.paymentMethodType = ""; d.paymentMethodCode = ""; d.maskedNumber = ""; d.expirationYear = ""; d.expirationMonth = ""; d.expirationYearInputId = ""; d.expirationYearInput = ""; d.expirationMonthInputId = ""; d.expirationMonthInput = ""; d.cardNameIdArray = []; d.cardNameArray = []; d.cardNameValue = ""; d.isActive = false; d.accountNumberTextId = ""; d.accountNumberText = null; d.refundAmount = 0; d.clearFields = false; d.supportPaymentFees = true; d.initPaymentFieldArray = function () { var h = this.paymentFieldArray || [], f = null, g = 0, e = h.length; for (g = 0; g < e; g += 1) { f = new b.Class.PaymentField(); f.nameSpaceName = this.nameSpaceName; f.init(h[g]); h[g] = f } this.paymentFieldArray = h }; d.deactivate = function () { this.container.hide(); var h = this.paymentFieldArray || [], f = null, g = 0, e = h.length; d.isActive = false; if (this.clearFields) { this.clearStoredFields() } for (g = 0; g < e; g += 1) { f = h[g]; f.deactivate() } }; d.activate = function () { var j = this.paymentFieldArray || [], g = null, l = 0, o = j.length, f = this.amountDom, m = f.val(), p = this.paymentType, e = p.paymentTypes, k = e.paymentFees, n = this.accountNumber, h = this.accountNumberText; d.isActive = true; if (!this.isStoredPayment) { n.show(); h.html("") } if (o === 0) { this.paymentType.setPaymentFieldsOnStoredPayments(); this.paymentType.setPaymentFieldsOnBookingPayments(); j = this.paymentFieldArray || []; o = j.length } if (this.isStoredPayment) { this.populateStoredFields() } for (l = 0; l < o; l += 1) { g = j[l]; g.activate(this) } this.container.show(); if (this.supportPaymentFees) { k.paymentMethod = this; k.updatePaymentFee(this.key, m); e.initPassThroughPaymentArray(p.nameSpaceId, this) } }; d.populateStoredFields = function () { var m = this.accountNumber, o = this.cardNameArray, k = 0, n = o.length, j = null, e = this.cardNameValue, f = this.accountNumberText, g = this.staticKey || "", l = g.split("-"), p = l.length, h = this.paymentType.paymentTypes.storedPaymentInput || {}; m.val(this.maskedNumber); m.hide(); f.html(this.maskedNumber); for (k = 0; k < n; k += 1) { j = o[k]; j.val(e) } if (p === 2 && this.key === l[0]) { h.val(l[1]) } if (this.expirationMonth.length === 1) { this.expirationMonth = "0" + this.expirationMonth } this.expirationYearInput.val(this.expirationYear); this.expirationMonthInput.val(this.expirationMonth); this.expirationYearInput.change() }; d.clearStoredFields = function () { var j = this.accountNumber, f = this.cardNameArray, h = 0, e = f.length, k = null, g = this.paymentType.paymentTypes.storedPaymentInput || {}; j.val(""); for (h = 0; h < e; h += 1) { k = f[h]; k.val("") } g.val(""); if (this.expirationMonth.length === 1) { this.expirationMonth = "0" + this.expirationMonth } this.expirationYearInput.val(""); this.expirationMonthInput.val(""); this.expirationYearInput.change() }; d.updatePaymentAmountHandler = function () { d.updatePaymentAmount() }; d.updatePaymentAmount = function () { var e = this.amountDom, g = e.val(), h = this.paymentType || {}, i = h.paymentTypes || {}, f = i.paymentFees; if (this.isActive && f) { f.updatePaymentAmount(this.key, g) } }; d.updateRefundPaymentAmount = function () { var e = this.amountDom || {}; e.val(this.refundAmount) }; d.setVars = function () { var f = 0, h = "", j = null, g = this.cardNameIdArray, e = g.length; c.setVars.call(this); d.amountDom = this.getById(this.amountId); d.accountNumber = this.getById(this.accountNumberId); d.accountNumberText = this.getById(this.accountNumberTextId); d.methodInput = this.paymentType.paymentMethodAction; d.expirationYearInput = this.getById(this.expirationYearInputId); d.expirationMonthInput = this.getById(this.expirationMonthInputId); for (f = 0; f < e; f += 1) { h = g[f]; j = this.getById(h); this.cardNameArray.push(j) } }; d.updatePaymentAccountNumberHandler = function () { d.updatePaymentAccountNumber() }; d.updatePaymentAccountNumber = function () { if (this.isActive) { this.paymentType.paymentTypes.inlineDCC.getInlineDCC(this) } }; d.addEvents = function () { this.amountDom.change(this.updatePaymentAmountHandler); this.accountNumber.change(this.updatePaymentAccountNumberHandler) }; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents(); this.initPaymentFieldArray() }; return d }; b.Class.PaymentField = function () { var d = b.Class.SkySales(), c = b.Util.extendObject(d); c.nameSpaceName = ""; c.requiredType = ""; c.requiredError = ""; c.validationFunction = null; c.validationFunctionParams = []; c.validationTypeError = ""; c.valueMaxLength = -1; c.valueMinLength = -1; c.fieldType = ""; c.maxValue = ""; c.maxLengthError = ""; c.minValue = ""; c.minLengthError = ""; c.valueRegEx = ""; c.valueType = ""; c.hint = ""; c.deactivate = function () { var e = this.nameSpaceName, f = this.container.attr("name") || ""; f = b.Util.replace(f, e, ""); this.container.attr("name", f); this.removeAttributes() }; c.activate = function (e) { var f = this.nameSpaceName, g = this.container.attr("name") || ""; g = f + g; this.container.attr("name", g); this.addAttributes(e) }; c.removeAttributes = function () { var t = this.requiredType, h = "", s = this.valueMaxLength, r = this.maxLengthError, f = this.valueMinLength, o = this.minLengthError, g = this.valueRegEx, j = this.valueType, n = this.validationFunction, q = this.validationFunctionParams, m = this.validationTypeError, l = this.fieldType || "", k = this.hint, i = new b.Hint(), p = this.container; t = t.toLowerCase(); l = l.toLowerCase(); if (t === "required") { b.Util.removeRequiredAttribute(p) } j = j.toLowerCase(); b.Util.removeAttribute(p, "requirederror", h); b.Util.removeAttribute(p, "validationtype", j); b.Util.removeAttribute(p, "validationfunction", n); b.Util.removeAttribute(p, "validationfunctionparams", q); b.Util.removeAttribute(p, "validationtypeerror", m); b.Util.removeAttribute(p, "minlength", f); b.Util.removeAttribute(p, "maxlength", s); b.Util.removeAttribute(p, "minlengtherror", o); b.Util.removeAttribute(p, "maxlengtherror", r); b.Util.removeAttribute(p, "regex", g); if (l === "amount") { b.Util.removeAttribute(p, "maxvalue"); b.Util.removeAttribute(p, "minvalue") } if (k !== "" && p.length > 0) { i.removeEventFunction.call(p[0]); b.Util.removeAttribute(p, "hint", k) } }; c.addAttributes = function (p) { var f = this.requiredType, k = this.requiredError, g = this.valueMaxLength, m = this.maxLengthError, i = this.valueMinLength, q = this.minLengthError, l = this.valueRegEx, x = this.valueType, h = this.validationFunction, j = this.validationFunctionParams, y = this.validationTypeError, r = this.hint, o = this.fieldType || "", w = this.maxValue || "", s = this.minValue || "", n = p.isStoredPayment, v = this.container, t = new b.Hint(), u = b.Util.setAttribute; x = x.toLowerCase(); o = o.toLowerCase(); f = f.toLowerCase(); if (!n || o !== "accountnumber") { if (f === "required") { b.Util.setRequiredAttribute(v) } if (f === "notallowed") { v.css("visibility", "hidden") } u(v, "requirederror", k); u(v, "validationtype", x); u(v, "validationtypeerror", y); u(v, "minlength", i); u(v, "maxlength", g); u(v, "minlengtherror", q); u(v, "maxlengtherror", m); u(v, "regex", l); if (o === "amount") { if (p.isBookingPayment) { w = p.refundAmount } w = w.toString(); u(v, "maxvalue", w); u(v, "minvalue", s) } if (h) { u(v, "validationfunction", h); u(v, "validationfunctionparams", j) } } if (r !== "" && v.length > 0) { u(v, "hint", r); t.eventFunction.call(v[0]) } }; c.init = function (e) { this.setSettingsByObject(e); this.setVars() }; return c }; b.Class.BookingPayment = function () { var d = b.Class.SkySales(), c = b.Util.extendObject(d); c.paymentId = ""; c.paymentMethodType = ""; c.paymentMethodCode = ""; c.refundAmount = ""; c.init = function (e) { this.setSettingsByObject(e); this.setVars() }; return c }; b.Class.PriceDisplay = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.toggleViewIdArray = null; d.init = function (g) { this.setSettingsByObject(g); var e = this.toggleViewIdArray || [], f = 0, h = null; for (f = 0; f < e.length; f += 1) { h = new b.Class.ToggleView(); h.init(e[f]); d.toggleViewIdArray[f] = h } }; return d }; b.Class.FlightDisplay = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.toggleViewIdArray = null; c.init = function (g) { this.setSettingsByObject(g); var e = this.toggleViewIdArray || [], f = 0, h = null; for (f = 0; f < e.length; f += 1) { h = new b.Class.ToggleView(); h.init(e[f]); c.toggleViewIdArray[f] = h } }; return c }; b.Class.UpgradeAvailabilityInput = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.cabinUpgradeSegmentArray = []; c.init = function (e) { this.setSettingsByObject(e); this.initCabinUpgradeSegmentArray() }; c.initCabinUpgradeSegmentArray = function () { var h = 0, g = this.cabinUpgradeSegmentArray || [], f = g.length, e = null; for (h = 0; h < f; h += 1) { e = new b.Class.CabinUpgradeSegment(); e.init(g[h]); c.cabinUpgradeSegmentArray[h] = e } }; return c }; b.Class.CabinUpgradeSegment = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.segmentInputId = ""; c.segmentInput = null; c.cabinUpgradeOptionsArray = []; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.initCabinUpgradeOptionsArray() }; c.initCabinUpgradeOptionsArray = function () { var g = 0, f = this.cabinUpgradeOptionsArray || [], e = f.length, h = null; for (g = 0; g < e; g += 1) { h = new b.Class.CabinUpgrade(); h.init(f[g]); h.cabinUpgradeSegment = this; c.cabinUpgradeOptionsArray[g] = h } }; c.setVars = function () { c.segmentInput = this.getById(this.segmentInputId) }; return c }; b.Class.CabinUpgrade = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.upgradeOptionId = ""; c.upgradeOption = null; c.optionValue = ""; c.cabinUpgradeSegment = null; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; c.setVars = function () { c.upgradeOption = this.getById(this.upgradeOptionId) }; c.addEvents = function () { this.upgradeOption.click(this.updateDataHandler) }; c.updateDataHandler = function () { c.updateData() }; c.updateData = function () { var f = this.cabinUpgradeSegment || {}, e = f.segmentInput; e.val(this.optionValue) }; return c }; b.Class.RandomImage = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.imageUriArray = []; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.setAsBackground() }; d.getRandomNumber = function () { var e = this.imageUriArray.length, f = Math.floor(Math.random() * e); return f }; d.setAsBackground = function () { var f = this.getRandomNumber(), e = "url(" + this.imageUriArray[f] + ")"; this.container.css("background-image", e) }; return d }; b.Class.DropDown = function (e) { e = e || {}; var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.container = {}; c.name = ""; c.showCode = true; c.options = []; c.dropDownContainer = null; c.dropDownContainerInput = null; c.document = null; c.optionList = null; c.optionActiveClass = "optionActive"; c.timeOutObj = null; c.timeOut = 225; c.minCharLength = 2; c.optionMax = 100; c.html = '<div></div><div class="dropDownContainer"></div>'; c.autoComplete = true; c.getOptionHtml = function (o) { o = o || ""; o = o.toLowerCase(); var k = {}, f = "", l = "", m = 0, j = this.options, n = this.showCode, g = "", h = "", i = ""; if (o.length < c.minCharLength) { l = "" } else { for (f in j) { if (j.hasOwnProperty(f)) { k = j[f]; g = k.name || ""; g = g.toLowerCase(); h = k.code || ""; h = h.toLowerCase(); if ((g.indexOf(o) > -1) || (h.indexOf(o) > -1)) { if (k.optionClass) { i = ' class="' + k.optionClass + '"' } else { i = "" } l += "<div" + i + "><span>" + k.code + "</span>" + k.name; if (n) { l += " (" + k.code + ")" } l += "</div>"; m += 1 } } } } return l }; c.close = function () { if (c.timeOutObj) { window.clearTimeout(c.timeOutObj) } c.document.unbind("click", c.close); if (c.optionList) { c.optionList.unbind("hover"); c.optionList.unbind("click") } c.optionList = null; c.dropDownContainer.html("") }; c.getActiveOptionIndex = function () { var g = -1, f = $("." + c.optionActiveClass, c.dropDownContainer); if (c.optionList && (f.length > 0)) { g = c.optionList.index(f[0]) } return g }; c.arrowDown = function () { var f = c.getActiveOptionIndex(); if (c.optionList) { if ((f === -1) && (c.optionList.length > 0)) { c.optionActive.call(c.optionList[0]) } else { if (c.optionList.length > f + 1) { c.optionInActive.call(c.optionList[f]); c.optionActive.call(c.optionList[f + 1]) } else { c.arrowDownOpen() } } } else { c.arrowDownOpen() } }; c.arrowDownOpen = function () { var f = c.minCharLength; c.minCharLength = 0; c.open(); c.minCharLength = f }; c.arrowUp = function () { var f = c.getActiveOptionIndex(); if (c.optionList) { if ((f === -1) && (c.optionList.length > 0)) { c.optionActive.call(c.optionList[0]) } else { if ((f > 0) && (c.optionList.length > 0)) { c.optionInActive.call(c.optionList[f]); c.optionActive.call(c.optionList[f - 1]) } } } }; c.selectButton = function () { var g = c.getActiveOptionIndex(), f = c.optionMax; if (g > -1) { c.selectOption.call(c.optionList[g]) } else { if (c.autoComplete === true) { c.optionMax = 1; c.open(); if (c.optionList && (c.optionList.length > 0)) { c.selectOption.call(c.optionList[0]) } c.optionMax = f } } }; c.keyEvent = function (f) { var h = true, g = f.which; if (g === 40) { c.arrowDown(); c.autoComplete = true; h = false } else { if (g === 38) { c.arrowUp(); c.autoComplete = true; h = false } else { if (g === 9) { c.selectButton(); c.inputBlur() } else { if (g === 13) { c.selectButton(); c.autoComplete = false; h = false } else { c.autoComplete = true } } } } return h }; c.inputKeyEvent = function (f) { var h = true, g = f.which; if ((g !== 40) && (g !== 38) && (g !== 9) && (g !== 13)) { if (c.timeOutObj) { window.clearTimeout(c.timeOutObj) } c.timeOutObj = window.setTimeout(c.open, c.timeOut); h = false } return h }; c.catchEvent = function () { return false }; c.open = function () { var k = "", i = null, g = c.dropDownContainerInput.val(), h = c.getOptionHtml(g), f = 0, j = 0; c.dropDownContainer.html(h); c.addOptionEvents(); c.dropDownContainer.click(c.catchEvent); c.document.click(c.close); c.dropDownContainer.show(); if (c.optionList && (c.optionList.length > 0) && c.optionActive) { c.optionActive.call(c.optionList[0]) } j = c.dropDownContainer.width(); if ($.browser.msie) { f = c.dropDownContainer.height(); k = '<iframe src="#"></iframe>'; c.dropDownContainer.prepend(k); i = $("iframe", c.dropDownContainer); i.width(j); i.height(f) } }; c.optionActive = function () { var f = $(this); c.optionList.removeClass(c.optionActiveClass); f.addClass(c.optionActiveClass) }; c.optionInActive = function () { var f = $(this); f.removeClass(c.optionActiveClass) }; c.selectOption = function () { var f = $("span", this).text(); c.dropDownContainerInput.val(f); c.close(); c.dropDownContainerInput.change() }; c.addOptionEvents = function () { c.optionList = $("div", c.dropDownContainer); c.optionList.hover(c.optionActive, c.optionInActive); c.optionList.click(c.selectOption) }; c.inputBlur = function () { c.close() }; c.addEvents = function (f) { c.dropDownContainerInput = f.input; c.dropDownContainer = $("div.dropDownContainer", c.container); c.document = $(document); c.dropDownContainerInput.keyup(c.inputKeyEvent); c.dropDownContainerInput.keydown(c.keyEvent) }; c.init = function (g) { c.setSettingsByObject(g); var f = c.html; g.input.attr("autocomplete", "off"); g.input.wrap('<span class="dropDownOuterContainer"></span>'); g.input.after(f); c.container = g.input.parent("span.dropDownOuterContainer"); c.addEvents(g); b.Class.DropDown.dropDownArray[b.Class.DropDown.dropDownArray.length] = c }; c.init(e); return c }; b.Class.DropDown.dropDownArray = []; b.Class.DropDown.getDropDown = function (f) { var h = null, e = 0, g = null, j = b.Class.DropDown.dropDownArray, d = null, c = f.input[0]; for (e = 0; e < j.length; e += 1) { g = j[e]; d = g.dropDownContainerInput[0]; if ((d) && (c) && (d === c)) { h = j[e]; if (f.options) { h.options = f.options } } } if (!h) { h = new b.Class.DropDown(f) } return h }; b.Class.DatePickerManager = function () { var h = new b.Class.SkySales(), j = b.Util.extendObject(h), c = [], e = "-", i = "yy-mm", f = "first", g = new RegExp("\\d{4}-\\d{2}"), d = new Date(); j.isAOS = false; j.yearMonth = null; j.day = null; j.linkedDate = null; j.useJQueryDatePicker = true; j.yearMonthOptionArray = []; j.fullDateFormatString = "mm/dd/yy"; j.beginDateBound = new Date(); j.endDateBound = new Date(); j.currentDate = new Date(); j.setBeginDateBound = function (k) { j.beginDateBound = k; j.yearMonthOptionArray = [] }; j.setEndDateBound = function (k) { j.endDateBound = k; j.yearMonthOptionArray = [] }; j.getDaysInMonth = function (l) { var m = new Date(l.getFullYear(), l.getMonth(), 32), k = m.getDate(); return 32 - k }; j.validateDay = function (k) { k = k || ""; return k.match(/\d{2}/) }; j.validateYearMonth = function (k) { k = k || ""; return k.match(g) }; j.getDate = function (n, k) { var q = null, p = 0, r = 1, o = [], m = 0, l = 0; n = n || this.yearMonth.val(); k = k || this.day.val(); if (n && k) { o = n.split(e); if (true === this.isAOS) { p = 1; r = 0 } m = o[p]; l = o[r] - 1; q = new Date(m, l, k) } else { q = this.currentDate } return q }; j.parseDate = function (o, k) { var q = new Date(), m = this.validateDay(k), r = this.validateYearMonth(o), l = {}, n = 31, p = 1; if (m && r) { l = this.getDate(o, k); n = this.getDaysInMonth(l); p = k; if (k > n) { p = n } q = new Date(l.getFullYear(), l.getMonth(), p) } else { q = new Date() } return q }; j.readLinked = function () { var k = this.parseDate(this.yearMonth.val(), this.day.val()), l = b.Util.dateToIsoString(k); this.linkedDate.val(l); return {} }; j.readLinkedHandler = function () { return j.readLinked() }; j.trimDaysBeforeBeginDateBound = function (k) { var r = this.beginDateBound.getFullYear(), q = this.beginDateBound.getMonth(), p = this.beginDateBound.getDate(), m = parseInt(k[0].code, 10), o = 0, l = this.currentDate.getFullYear(), n = this.currentDate.getMonth(); if ((n === q) && (l === r)) { if (m < p) { o = p - m; k.splice(0, o) } } return k }; j.dayArrayIndexOf = function (n, k) { var m = k.length, l = 0, q = {}, p = -1, o; for (l = 0; l < m; l += 1) { q = k[l]; o = parseInt(q.code, 10); if (o === n) { p = l; break } } return p }; j.trimDaysAfterEndDateBound = function (l) { var r = this.endDateBound.getFullYear(), s = this.endDateBound.getMonth(), q = this.endDateBound.getDate(), t = l.length, m = l[t - 1].code, p = 0, k = 0, n = this.currentDate.getFullYear(), o = this.currentDate.getMonth(); if ((o === s) && (n === r)) { if (m > q) { k = this.dayArrayIndexOf(q, l) + 1; if (k >= 0) { p = m - q; l.splice(k, p) } } } return l }; j.removeDaysOutsideOfBounds = function (k) { k = this.trimDaysBeforeBeginDateBound(k); k = this.trimDaysAfterEndDateBound(k); return k }; j.dayPopulate = function (l) { var n = l.getDate(), m = this.getDaysInMonth(l), p = 31 - m, k = b.Util.cloneArray(c), q = 31, o = {}; if (p > 0) { q = 31 - p; k.splice(q, p) } k = this.removeDaysOutsideOfBounds(k); o = { selectedItem: n, objectArray: k, input: this.day, clearOptions: true }; b.Util.populate(o) }; j.getYearMonthOptionArray = function () { var s = this.yearMonthOptionArray, u = 0, r = "0", q = 2009, p = 0, v = {}, k = "", l = "", o = this.beginDateBound, t = this.endDateBound, m = {}, w = {}, n = 31; if (s.length === 0) { u = o.getMonth(); q = o.getFullYear(); v = b.Resource.dateCultureInfo.monthNamesShort; for (p = 0; p < 12; p += 1) { m = new Date(q, u, 1); n = this.getDaysInMonth(m); w = new Date(q, u, n); if ((w >= o) && (m <= t)) { k = v[u]; if (u < 9) { r = "0" } else { r = "" } l = q + "-" + r + (u + 1); s[p] = { name: k, code: l} } else { if (w > this.endDateBound) { break } } u += 1; if (u > 11) { u = 0; q += 1 } } } return s }; j.yearMonthPopulate = function (k) { var l = this.getYearMonthOptionArray(), n = $.datepicker.formatDate(i, k), m = {}; m = { selectedItem: n, objectArray: l, input: this.yearMonth, clearOptions: true }; b.Util.populate(m) }; j.datePopulate = function (k) { if (!k) { k = this.currentDate } else { j.currentDate = k } this.yearMonthPopulate(k); this.dayPopulate(k); this.copyDayAndYearMonthInputToLinkedDate() }; j.repopulateDayInputAndUpdateLinkedDate = function () { var m = this.day.val(), k = this.getDate(this.yearMonth.val(), 1), l = this.getDaysInMonth(k), n = ""; if (m > l) { m = l } k = new Date(k.getFullYear(), k.getMonth(), m); if (k < this.beginDateBound) { k = this.beginDateBound } j.currentDate = k; this.dayPopulate(k); n = b.Util.dateToIsoString(k); this.linkedDate.val(n) }; j.repopulateDayInputAndUpdateLinkedDateHandler = function () { j.repopulateDayInputAndUpdateLinkedDate() }; j.setYearMonthAndDayInput = function (l) { var m = "", k = b.Util.parseIsoDate(l); if (k) { m = $.datepicker.formatDate(i, k); this.yearMonth.val(m); this.repopulateDayInputAndUpdateLinkedDate(); this.dayPopulate(k); this.readLinked() } j.currentDate = k }; j.setYearMonthAndDayInputHandler = function (k) { j.setYearMonthAndDayInput(k) }; j.copyDayAndYearMonthInputToLinkedDate = function () { var l = this.yearMonth.val(), m = this.day.val(), k = this.parseDate(l, m), n = b.Util.dateToIsoString(k); this.linkedDate.val(n); j.currentDate = k }; j.copyDayAndYearMonthInputToLinkedDateHandler = function () { j.copyDayAndYearMonthInputToLinkedDate() }; j.createAllDayOptionArray = function () { var k = [], m = 1, l = {}; for (m = 1; m <= 31; m += 1) { l = {}; l.name = m; if (m <= 9) { l.code = "0" + m } else { l.code = m } k[m - 1] = l } return k }; j.dateLastDayOfMonthOneYearFromToday = function () { var m = d.getFullYear() + 1, k = d.getMonth(), l = new Date(m, k, 0); return l }; j.setVars = function () { this.beginDateBound.setDate(d.getDate() - 1); this.endDateBound = this.dateLastDayOfMonthOneYearFromToday(); if (true === this.isAOS) { e = "/"; i = "m/yy"; g = new RegExp("\\d{1,2}\\/\\d{4}"); f = "eq(1)" } c = this.createAllDayOptionArray() }; j.initInputs = function () { var k = new Date(); if (this.isAOS) { k = new Date(this.linkedDate.val()) } else { k = this.getDate(this.yearMonth.val(), this.day.val()) } if (k !== null) { j.currentDate = k; this.dayPopulate(k); j.currentDate = k; if (!this.isAOS) { this.copyDayAndYearMonthInputToLinkedDate() } } }; j.getMaxDate = function () { var k = null, m = new Date(), l = 31; if (this.yearMonth.val() !== null) { k = $("option:last", this.yearMonth).val(); m = this.getDate(k, 1); l = this.getDaysInMonth(m); m = new Date(m.getFullYear(), m.getMonth(), l) } else { m.setYear(m.getFullYear() + 1) } return m }; j.addEventsToJQueryDatePicker = function () { var o = new Date(), p = {}, n = b.Util.getResource(), l = n.dateCultureInfo, k = b.datepicker, m = {}; o.setDate(o.getDate() - 1); p = this.getMaxDate(); if (this.useJQueryDatePicker) { m = { beforeShow: this.readLinkedHandler, onSelect: this.setYearMonthAndDayInputHandler, minDate: o, maxDate: p, showOn: "both", buttonImageOnly: true, buttonImage: "images/Citilink/calendar-up.gif", buttonText: "Calendar", numberOfMonths: 1, mandatory: true, monthNames: l.monthNames, monthNamesShort: l.monthNamesShort, dayNames: l.dayNames, dayNamesShort: l.dayNamesShort, dayNamesMin: l.dayNamesMin, closeText: k.closeText, prevText: k.prevText, nextText: k.nextText, currentText: k.currentText, dateFormat: "yy-mm-dd" }; this.linkedDate.datepicker(m) } }; j.addEvents = function () { this.yearMonth.change(this.repopulateDayInputAndUpdateLinkedDateHandler); this.day.change(this.copyDayAndYearMonthInputToLinkedDateHandler); this.addEventsToJQueryDatePicker() }; j.init = function (k) { this.setSettingsByObject(k); this.setVars(); this.initInputs(); this.addEvents() }; return j }; b.initializeSkySalesForm = function () { document.SkySales = document.forms.SkySales }; b.getSkySalesForm = function () { var c = $("SkySales")[0]; return c }; b.Common = function () { var d = this, c = null; d.allInputObjects = null; d.initializeCommon = function () { var e = new b.Hint(); d.addKeyDownEvents(); d.addSetAndEraseEvents(); d.setValues(); e.addHintEvents() }; d.setValues = function () { var e = function () { if ((this.jsvalue !== null) && (this.jsvalue !== undefined)) { this.value = this.jsvalue } }; d.getAllInputObjects().each(e) }; d.stopSubmit = function () { return false }; d.resetSubmit = function () { var e = $("form"); e.unbind("submit", d.stopSubmit) }; d.addKeyDownEvents = function () { var e = function (g) { var f = $("form"); if (g.keyCode === 13) { f.submit(d.stopSubmit); g.preventDefault(); g.stopPropagation(); setTimeout(d.resetSubmit, 25); iname = $(this).val(); if (iname !== 'Submit') { var fields = $(this).parents('form:eq(0),body').find('button,input,textarea,select'); var index = fields.index(this); if (index > -1 && (index + 1) < fields.length) { fields.eq(index + 1).focus(); } return false; } return false; } return true }; this.getAllInputObjects().keydown(e) }; d.getAllInputObjects = function () { if (d.allInputObjects === null) { d.allInputObjects = $(":input") } return d.allInputObjects }; d.addSetAndEraseEvents = function () { var g = null, e = null, f = null; g = function () { var i = $(this), h = b.Util.getAttributeValue(i, "requiredempty"); d.eraseElement(this, h) }; e = function () { var i = $(this), h = b.Util.getAttributeValue(i, "requiredempty"); d.setElement(this, h); i.change() }; f = function () { var i = $(this), h = null; h = b.Util.getAttributeValue(i, "requiredempty"); if ((h !== null) && (h !== undefined)) { if (i.is(":text") && (i.is(":hidden") === false)) { i.focus(g); i.blur(e) } } }; d.getAllInputObjects().each(f) }; d.eraseElement = function (f, e) { if (f.value === e) { f.value = "" } }; d.setElement = function (f, e) { if (f.value === "") { f.value = e } }; d.getCountryInfo = function () { if (c === null) { c = window.countryInfo } return c }; d.setCountryInfo = function (e) { c = e; return d }; d.isEmpty = function (f, e) { var h = null, g = false; if ((f) && (e === undefined)) { if (f.requiredempty) { e = f.requiredempty } else { e = "" } } h = b.Common.getValue(f); if ((h === null) || (h === undefined) || (h.length === 0) || (h === e)) { g = true } return g }; d.stripeTables = function () { $(".stripeMe tr:even").addClass("alt"); return d } }; b.Common.addEvent = function (e, c, d) { $(e).bind(c, d) }; b.Common.getValue = function (c) { var d = null; if (c) { d = $(c).val(); return d } return null }; b.Util.getRequiredFlag = function () { return "*" }; b.Util.formatInputLabel = function (g) { var j = g.attr("id"), d = b.Util.getRequiredFlag(), c = null, f = "", i = "", h = -1; if (j) { c = $("label[for=" + j + "]"); f = c.text(); if (f) { i = b.Util.getAttributeValue(g, "required"); i = i || ""; i = i.toString().toLowerCase(); h = f.indexOf(d); if (h === 0) { f = f.substring(1) } if (i === "true") { f = d + f } c.text(f) } } }; b.Dhtml = function () { var c = this; c.getX = function (d) { var e = 0; if (d.x) { e += d.x } else { if (d.offsetParent) { while (d.offsetParent) { e += d.offsetLeft; d = d.offsetParent } } } return e }; c.getY = function (d) { var e = 0; if (d.y) { e += d.y } else { if (d) { while (d) { e += d.offsetTop; d = d.offsetParent } } } return e }; return c }; b.Hint = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.addHintEvents = function () { b.common.getAllInputObjects().each(this.eventFunction) }; d.eventFunction = function () { var e = b.Util.getAttributeValue($(this), "hint"); if (e) { if (this.tagName && (this.tagName.toString().toLowerCase() === "input")) { d.addHintFocusEvents(this) } else { d.addHintHoverEvents(this) } } }; d.removeEventFunction = function () { var e = $(this), f = b.Util.getAttributeValue(e, "hint"); if (f) { if (this.tagName && (this.tagName.toString().toLowerCase() === "input")) { e.unbind("focus"); e.unbind("blur") } else { e.unbind("mouseenter"); e.unbind("mouseleave") } } }; d.addHintFocusEvents = function (h, f) { var g = null, e = null; g = function () { d.showHint(h, f) }; e = function () { d.hideHint(h, f) }; if ($(h).is(":hidden") === false) { $(h).focus(g); $(h).blur(e) } }; d.addHintHoverEvents = function (g, e) { var f = null, h = null; f = function () { d.showHint(g, e) }; h = function () { d.hideHint(g, e) }; $(g).hover(f, h) }; d.getHintDivId = function () { return "cssHint" }; d.showHint = function (j, q, l, h, e) { var t = d.getHintDivId(), k = this.getById(t), p = 0, n = 0, s = 0, m = 0, i = b.Util.getAttributeValue($(j), "hint"), r = null, o = null, g = 0, f = 0; if (l === undefined) { l = j.hintxoffset } if (h === undefined) { h = j.hintyoffset } if (e === undefined) { e = j.hintReferenceid } r = this.getById(e)[0]; o = new b.Dhtml(); if (!r) { p = o.getX(j); n = o.getY(j); if (l === undefined) { p += j.offsetWidth + 5 } } else { p = o.getX(r); n = o.getY(r); if (l === undefined) { p += r.offsetWidth + 5 } } if (!q && i) { q = i } k.html(q); k.show(); l = (l !== undefined) ? l : s; h = (h !== undefined) ? h : m; g = parseInt(l, 10) + parseInt(p, 10); f = parseInt(h, 10) + parseInt(n, 10); k.css("left", g + "px"); k.css("top", f + "px") }; d.hideHint = function () { var e = d.getHintDivId(); this.getById(e).hide() }; return d }; b.ValidationErrorReadAlong = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.objId = ""; d.obj = null; d.errorMessage = ""; d.isError = false; d.hasBeenFixed = false; d.hasValidationEvents = false; d.getValidationErrorHtml = function () { var e = '<iframe id="validationErrorContainerReadAlongIFrame" class="hidden" ></iframe> <div id="validationErrorContainerReadAlong" > <p class="close"> <input id="validationErrorContainerReadAlongCloseButton" type="button" class="closeBtn" value="Close" /> </p> <div id="validationErrorContainerReadAlongContent" > <h3 class="error">ERROR</h3> <div id="validationErrorContainerReadAlongList" > </div> </div> </div>'; return e }; d.getValidationErrorCloseId = function () { return "validationErrorContainerReadAlongCloseButton" }; d.getValidationErrorListId = function () { return "validationErrorContainerReadAlongList" }; d.getValidationErrorIFrameId = function () { return "validationErrorContainerReadAlongIFrame" }; d.getValidationErrorDivId = function () { return "validationErrorContainerReadAlong" }; d.getFixedClass = function () { return "fixedValidationError" }; d.addCloseEvent = function () { var f = d.getValidationErrorCloseId(), e = null; e = function () { d.hide() }; this.getById(f).click(e) }; d.addValidationErrorDiv = function () { var e = this.getById("mainContent"); if (e.length === 0) { e = this.getById("mainContentExpanded") } e.append(d.getValidationErrorHtml()) }; d.hide = function () { var f = d.getValidationErrorIFrameId(), e = d.getValidationErrorDivId(); this.getById(f).hide(); this.getById(e).hide() }; d.addFocusEvent = function () { var f = { obj: this }, e = null; e = function (g) { var j = g.data.obj, h = null, p = null, i = 0, n = 0, m = 0, k = 0, l = null, o = null; if (j.isError === true) { h = new b.Hint(); h.hideHint(); p = d.getById(d.getValidationErrorDivId()); i = parseInt(p.width(), 10) + 5; n = parseInt(p.height(), 10) + 5; l = new b.Dhtml(); m = l.getX(j.obj); k = l.getY(j.obj); m = m + this.offsetWidth + 5; k = k - 72; if ($.browser.msie) { o = d.getById(d.getValidationErrorIFrameId()); o.css("position", "absolute"); o.show(); o.width(i - 25); o.height(n - 5); o.css("left", m + 16); o.css("top", k) } p.css("left", m); p.css("top", k); p.css("position", "absolute"); p.show("slow"); return false } }; if ($(this.obj).is(":hidden") === false) { $(this.obj).bind("focus", f, e) } }; d.addBlurEvent = function (e) { var g = { obj: this }, f = null; f = function (i) { var n = i.data.obj, s = new b.Validate(null, "", "", null), p = "", l = false, m = true, o = "", j = null, k = "", q = null, r = null; var h = b.Util.replace($("input[id*='_']").attr("id"), /_[a-zA-Z0-9]+$/, ""); if (this.id === h + "originStation1") { r = document.getElementById(h + "_TextBoxMarketOrigin1") } if (this.id === h + "destinationStation1") { r = document.getElementById(h + "_TextBoxMarketDestination1") } if (r) { s.validateSingleElement(r) } else { s.validateSingleElement(this) } p = s.errors; if (s.validationErrorArray.length > 0) { if (s.validationErrorArray[0].isError === false) { l = true } } o = n.getValidationErrorListId(); j = d.getById(o).find("li").eq(e); k = n.getFixedClass(); q = function () { if ((m === true) && ($(this).attr("class").indexOf("hidden") === -1) && ($(this).attr("class").indexOf(k) === -1)) { m = false } }; if (l === true) { n.hasBeenFixed = true; j.addClass(k); m = true; d.getById(o).find("li").each(q); if (m === true) { d.hide() } } else { n.hasBeenFixed = false; j.removeClass(k); j.removeClass("hidden"); n.isError = true; n.errorMessage = p; j.text(p) } return false }; $(this.obj).bind("blur", g, f) }; return d }; b.errorsHeader = "Please correct the following.\n\n"; b.Validate = function (g, f, c, i) { var e = new b.Class.SkySales(), d = b.Util.extendObject(e), h = null; if (c === undefined) { c = b.errorsHeader } d.form = g; d.namespace = f; d.errors = ""; d.validationErrorArray = []; d.setfocus = null; d.clickedObj = null; d.errorDisplayMethod = "read_along"; d.errorsHeader = c; d.namedErrors = []; d.dateRangeArray = []; if (i) { d.regexElementIdFilter = i } d.requiredAttribute = "required"; d.requiredEmptyAttribute = "requiredempty"; d.validationTypeAttribute = "validationtype"; d.regexAttribute = "regex"; d.minLengthAttribute = "minlength"; d.numericMinLengthAttribute = "numericminlength"; d.maxLengthAttribute = "maxlength"; d.numericMaxLengthAttribute = "numericmaxlength"; d.minValueAttribute = "minvalue"; d.maxValueAttribute = "maxvalue"; d.equalsAttribute = "equals"; d.dateRangeAttribute = "daterange"; d.dateRange1HiddenIdAttribute = "date1hiddenid"; d.dateRange2HiddenIdAttribute = "date2hiddenid"; d.defaultErrorAttribute = "error"; d.requiredErrorAttribute = "requirederror"; d.validationTypeErrorAttribute = "validationtypeerror"; d.regexErrorAttribute = "regexerror"; d.minLengthErrorAttribute = "minlengtherror"; d.maxLengthErrorAttribute = "maxlengtherror"; d.minValueErrorAttribute = "minvalueerror"; d.maxValueErrorAttribute = "maxvalueerror"; d.equalsErrorAttribute = "equalserror"; d.dateRangeErrorAttribute = "daterangeerror"; d.defaultError = "{label} is invalid."; d.defaultRequiredError = "{label} is required."; d.defaultValidationTypeError = "{label} is invalid."; d.defaultRegexError = "{label} is invalid."; d.defaultMinLengthError = "{label} is too short in length."; d.defaultMaxLengthError = "{label} is too long in length."; d.defaultMinValueError = "{label} must be greater than {minValue}."; d.defaultMaxValueError = "{label} must be less than {maxValue}."; d.defaultEqualsError = "{label} is not equal to {equals}"; d.defaultNotEqualsError = "{label} cannot equal {equals}"; d.defaultValidationErrorClass = "validationError"; d.defaultValidationErrorLabelClass = "validationErrorLabel"; d.run = function () { var k = $(":input", b.getSkySalesForm()).get(), l = null, j = 0; for (j = 0; j < k.length; j += 1) { l = k[j]; if (!this.isExemptFromValidation(l)) { d.validateSingleElement(l) } } return d.outputErrors() }; d.runBySelector = function (m) { var l = $(m).find(":input").get(), k = null, j = 0; for (j = 0; j < l.length; j += 1) { k = l[j]; d.validateSingleElement(k) } return false }; d.validateSingleElement = function (l) { $(l).removeClass(d.defaultValidationErrorClass); $("label[for=" + l.id + "]").eq(0).removeClass(this.defaultValidationErrorLabelClass); var k = new b.ValidationErrorReadAlong(), j; k.objId = l.id; k.obj = l; this.validationErrorArray[d.validationErrorArray.length] = k; this.validateRequired(l); j = d.getValue(l); if ((d.errors.length < 1) && (j !== null) && (j !== "")) { d.validateType(l); d.validateRegex(l); d.validateMinLength(l); d.validateMaxLength(l); d.validateMinValue(l); d.validateMaxValue(l); d.validateEquals(l); d.validateDateRange(l) } }; d.outputErrors = function () { var j = this.errorDisplayMethod.toString().toLowerCase(), m = "", k = [], l = 0, n = true; if (this.errors) { k = d.errors.split("\n"); m += '<ul class="validationErrorList" >'; for (l = 0; l < k.length; l += 1) { if (k[l] !== "") { m += '<li class="validationErrorListItem" >' + k[l] + "</li>" } } m += "</ul>"; if (j.indexOf("read_along") > -1) { d.outputErrorsReadAlong(m); n = false } if (j.indexOf("alert") > -1) { alert(d.errorsHeader + d.errors) } if (n === true) { alert(d.errorsHeader + d.errors) } if (d.setfocus) { if ($(d.setfocus).is(":hidden") === false) { d.setfocus.blur(); d.setfocus.focus() } } return false } else { return true } }; d.outputErrorsReadAlong = function () { var k = 0, j = "", l = null, n = this, m = null; m = function (o) { this.hasValidationEvents = true; this.addFocusEvent(o); this.addBlurEvent(o) }; n.validationErrorReadAlong = new b.ValidationErrorReadAlong(); n.readAlongDivId = this.getById(this.validationErrorReadAlong.getValidationErrorDivId()).attr("id"); if (n.readAlongDivId === undefined) { n.validationErrorReadAlong.addValidationErrorDiv(); n.validationErrorReadAlong.addCloseEvent() } j += '<ul class="validationErrorList" >'; for (k = 0; k < n.validationErrorArray.length; k += 1) { l = this.validationErrorArray[k]; if (l.isError === true) { j += '<li class="validationErrorListItem" >' + l.errorMessage + "</li>" } else { j += '<li class="validationErrorListItem hidden" >' + l.errorMessage + "</li>" } } this.getById(n.validationErrorReadAlong.getValidationErrorListId()).html(j); $(n.validationErrorArray).each(m) }; d.checkFocus = function (k, j) { if (!d.setfocus) { if (j) { d.setfocus = j } else { d.setfocus = k } } }; d.setError = function (s, n, m) { var l = "", t = "", r = "", q = 0, k = null, p, o = "", u = null; var j = b.Util.replace($("input[id*='_']").attr("id"), /_[a-zA-Z0-9]+$/, ""); if (s.id === j + "_TextBoxMarketOrigin1") { u = document.getElementById(j + "originStation1") } if (s.id === j + "_TextBoxMarketDestination1") { u = document.getElementById(j + "destinationStation1") } if (s.type === "radio") { l = s.getAttribute("name"); if (l.length > 0) { if (d.namedErrors[l] !== undefined) { return } d.namedErrors[l] = l } } t = this.attributeValue(s, n); if (!t) { t = this.attributeValue(s, this.defaultErrorAttribute); if (!t) { if (m) { t = m } else { t = this.defaultError } } } p = t.match(/\{\s*(\w+)\s*\}/g); if (p) { for (q = 0; q < p.length; q += 1) { r = p[q].replace(/\{\s*(\w+)\s*\}/, "$1"); t = t.replace(/\{\s*\w+\s*\}/, d.cleanAttributeForErrorDisplay(s, r)) } } if (u) { $(u).addClass(this.defaultValidationErrorClass) } $(s).addClass(this.defaultValidationErrorClass); $("label[for=" + s.id + "]").eq(0).addClass(d.defaultValidationErrorLabelClass); this.errors += t + "\n"; o = s.id; for (q = 0; q < d.validationErrorArray.length; q += 1) { k = d.validationErrorArray[q]; if (k.objId === o) { if (u) { k.objId = u.id; k.obj = u } k.errorMessage = t; k.isError = true; break } } this.checkFocus(s, u) }; d.cleanAttributeForErrorDisplay = function (n, p) { var o = "", r = b.Util.getRequiredFlag(), k = "", l = /^(minvalue|maxvalue)$/i, q = new RegExp("[^\\d.,]", "g"), m = $(n), j = ""; if (!p) { p = "" } p = p.toLowerCase(); if (p === "label") { k = $("label[for=" + m.attr("id") + "]").text(); o = r; j = b.Util.replace(k, o, "") } if (!j) { j = this.attributeValue(n, p) } if (!j) { j = p } else { if (p.match(l)) { j = b.Util.replace(j, q, "") } } return j }; d.attributeValue = function (l, j) { l = $(l); var k = b.Util.getAttributeValue(l, j); if (typeof k !== "string") { k = "" } return k }; d.validateRequired = function (n) { var q = d.requiredAttribute, l = d.requiredEmptyAttribute, p = this.attributeValue(n, q), o = this.attributeValue(n, l), m = null, k = "", j = false; d.radioGroupHash = {}; if (p !== undefined) { p = p.toString().toLowerCase(); if (o) { o = o.toString().toLowerCase() } if (p === "true") { m = d.getValue(n); if ((n.type === "checkbox") && (n.checked === false)) { m = "" } else { if (n.type === "radio") { k = n.getAttribute("name"); if (d.radioGroupHash[k] === undefined) { d.radioGroupHash[k] = $("input[name='" + k + "']") } j = d.radioGroupHash[k].is(":checked"); if (!j) { m = "" } } } if ((m === undefined) || (m === null) || (m === "") || (m.toLowerCase() === o)) { d.setError(n, d.requiredErrorAttribute, d.defaultRequiredError) } } } }; d.validateType = function (p) { var n = this.attributeValue(p, this.validationTypeAttribute), o = this.getValue(p), k = $(p), j = b.Util.getAttributeValue(k, "validationfunction") || "", l = b.Util.getAttributeValue(k, "validationfunctionparams") || [], m = true; if ((n) && (o !== null)) { n = n.toLowerCase(); if ((n === "address") && (!o.match(d.stringPattern))) { d.setValidateTypeError(p) } else { if ((n === "alphanumeric") && (!o.match(d.alphaNumericPattern))) { d.setValidateTypeError(p) } else { if ((n === "amount") && (!d.validateAmount(o))) { d.setValidateTypeError(p) } else { if ((n === "country") && (!o.match(d.stringPattern))) { d.setValidateTypeError(p) } else { if ((n === "email") && (!o.match(d.emailPattern))) { d.setValidateTypeError(p) } else { if ((n === "mod10") && (!d.validateMod10(o))) { d.setValidateTypeError(p) } else { if ((n === "name") && (!o.match(d.stringPattern))) { d.setValidateTypeError(p) } else { if ((n === "numeric") && (!d.validateNumeric(o))) { d.setValidateTypeError(p) } else { if ((n.indexOf("date") === 0) && (!d.validateDate(p, n, o))) { d.setValidateTypeError(p) } else { if ((n === "state") && (!o.match(d.stringPattern))) { d.setValidateTypeError(p) } else { if ((n === "string") && (!o.match(d.stringPattern))) { d.setValidateTypeError(p) } else { if ((n === "uppercasestring") && (!o.match(d.upperCaseStringPattern))) { d.setValidateTypeError(p) } else { if ((n === "zip") && (!o.match(d.stringPattern))) { d.setValidateTypeError(p) } else { if (n === "function") { if ($.isFunction(j)) { m = j.apply(this, l) } if (!m) { d.setValidateTypeError(p) } } } } } } } } } } } } } } } } }; d.validateRegex = function (l) { var j = this.attributeValue(l, d.regexAttribute), k = d.getValue(l); if ((k !== null) && (j) && (!k.match(j))) { this.setError(l, d.regexErrorAttribute, d.defaultRegexError) } }; d.validateMinLength = function (m) { var j = this.attributeValue(m, d.minLengthAttribute), l = this.attributeValue(m, d.numericMinLengthAttribute), k = this.getValue(m); if ((0 < j) && (k !== null) && (k.length < j)) { d.setError(m, d.minLengthErrorAttribute, d.defaultMinLengthError) } else { if ((0 < l) && (0 < k.length) && (b.Util.replace(k, d.numericStripper, "").length < l)) { d.setError(m, d.minLengthErrorAttribute, d.defaultMinLengthError) } } }; d.validateMaxLength = function (m) { var j = this.attributeValue(m, d.maxLengthAttribute), l = this.attributeValue(m, d.numericMaxLengthAttribute), k = this.getValue(m); if ((0 < j) && (k !== null) && (j < k.length)) { d.setError(m, d.maxLengthErrorAttribute, d.defaultMaxLengthError) } else { if ((0 < l) && (0 < k.length) && (l < b.Util.replace(k, d.numericStripper, "").length)) { d.setError(m, d.maxLengthErrorAttribute, d.defaultMaxLengthError) } } }; d.validateMinValue = function (l) { var j = this.attributeValue(l, d.minValueAttribute), k = d.getValue(l); if ((k !== null) && (j !== undefined) && (0 < j.length)) { if ((5 < j.length) && (j.substring(0, 5) === "&gt;=")) { if (k < parseFloat(j.substring(5, j.length))) { d.setError(l, d.minValueErrorAttribute, d.defaultMinValueError) } } else { if ((4 < j.length) && (j.substring(0, 4) === "&gt;")) { if (k <= parseFloat(j.substring(4, j.length))) { d.setError(l, d.minValueErrorAttribute, d.defaultMinValueError) } } else { if (k < parseFloat(j)) { d.setError(l, d.minValueErrorAttribute, d.defaultMinValueError) } } } } }; d.validateMaxValue = function (l) { var j = this.attributeValue(l, this.maxValueAttribute), k = this.getValue(l); if ((k !== null) && (j !== undefined) && (0 < j.length)) { if ((5 < j.length) && (j.substring(0, 5) === "&lt;=")) { if (k > parseFloat(j.substring(5, j.length))) { d.setError(l, d.maxValueErrorAttribute, d.defaultMaxValueError) } } else { if ((4 < j.length) && (j.substring(0, 4) === "&lt;")) { if (k >= parseFloat(j.substring(4, j.length))) { d.setError(l, d.maxValueErrorAttribute, d.defaultMaxValueError) } } else { if (parseFloat(k) > j) { d.setError(l, d.maxValueErrorAttribute, d.defaultMaxValueError) } } } } }; d.validateEquals = function (l) { var j = this.attributeValue(l, d.equalsAttribute), k = d.getValue(l); if ((k !== null) && (j !== undefined) && (0 < j.length)) { if ((2 < j.length) && (j.substring(0, 2) === "!=")) { if (k === j.substring(2, j.length)) { d.setError(l, d.equalsErrorAttribute, d.defaultEqualsError) } } } }; h = function (o) { var m = o.parent().parent().parent(), j = m.parent(), l = m.is(":hidden"), k = j.is(":hidden"), n = !(l || k); return n }; d.checkIfValidateDateRangeNeeded = function (p) { var l = this.attributeValue(p, d.dateRangeAttribute), k = this.attributeValue(p, d.dateRange1HiddenIdAttribute), q = this.attributeValue(p, d.dateRange2HiddenIdAttribute), t = "", m = "", j = p.id, s = false, n = false, r = null, o = null; if ((l !== undefined) && (0 < l.length)) { t = j.charAt(j.length - 1); if (this.validateNumeric(t)) { m = t } if (("1" === m) || ("" === m)) { o = this.getById(q); n = h(o); if (n) { s = true; r = this.getById(k); d.dateRangeArray[0] = r.val(); d.dateRangeArray[1] = o.val() } } } return s }; d.validateDateRange = function (l) { var m = null, k = false, j = false; j = d.checkIfValidateDateRangeNeeded(l); if (j) { m = new b.Class.MarketDate(); k = m.datesInOrder(this.dateRangeArray); if (!k) { this.setError(l, this.dateRangeErrorAttribute, this.defaultError) } } }; d.isExemptFromValidation = function (j) { if (j.id.indexOf(this.namespace) !== 0) { return true } if (this.regexElementIdFilter && (!j.id.match(this.regexElementIdFilter))) { return true } return false }; d.setValidateTypeError = function (j) { this.setError(j, this.validationTypeErrorAttribute, this.defaultValidationTypeError) }; d.validateAmount = function (j) { if ((!j.match(this.amountPattern)) || (j === 0)) { return false } return true }; d.validateDate = function (m, o, q) { var s = "", p = new Date(), j, l, r, k, n; if (o) { s = o.toLowerCase() } q = q || ""; if ((s === "dateyear") && ((q < p.getFullYear()) || (!q.match(d.dateYearPattern)))) { return false } else { if ((s === "datemonth") && (!q.match(d.dateMonthPattern))) { return false } else { if ((s === "dateday") && (!q.match(d.DateDayPattern))) { return false } else { if (s === "dateexpiration") { r = b.Util.parseIsoDate(q); j = r.getFullYear(); l = r.getMonth(); k = p.getFullYear(); n = p.getMonth(); if (j < k || (j === k && l < n)) { return false } } } } } return true }; d.validateMod10 = function (o) { var n = /\D/, l = b.Util.replace(o, / /g, ""), m, k = 0, p = 0, j = 0; if (!n.test(l)) { while (l.length < 16) { l = "0" + l } for (j = l.length - 1; 0 <= j; j -= 2) { k += parseInt(l.charAt(j), 10); m = (l.charAt(j - 1) * 2); m += ""; for (p = 0; p < m.length; p += 1) { k += parseInt(m.charAt(p), 10) } } return (k % 10 === 0) } return false }; d.validateNumeric = function (j) { if (!j.match(d.numericPattern)) { return false } return true }; d.getValue = function (j) { return b.Common.getValue(j) }; d.stringPattern = new RegExp("^.+$"); d.upperCaseStringPattern = /^[A-Z]([A-Z|\s])*$/; d.numericPattern = /^\d+$/; d.numericStripper = /\D/g; d.alphaNumericPattern = /^\w+$/; d.amountPattern = /^(\d+((\.|,|\s|\xA0)\d+)*)$/; d.dateYearPattern = /^\d{4}$/; d.dateMonthPattern = /^\d{2}$/; d.dateDayPattern = /^\d{2}$/; d.emailPattern = /^\w+([\.\-\']?\w+)*@\w+([\.\-\']?\w+)*(\.\w{1,8})$/; return d }; b.Util.validateBySelector = function (d) { var e = null, c = null; if (d !== undefined) { e = new b.Validate(null, "", b.errorsHeader, null); e.clickedObj = c; e.runBySelector(d); return e.outputErrors() } return true }; b.Util.validate = function (g, c, f) { var d = null, j = "", i = null, h = null; if (document.getElementById && document.createTextNode) { if (g.getAttribute) { j = g.getAttribute("id"); d = g; g = b.Util.replace(j, /_[a-zA-Z0-9]+$/, "") } i = new b.Validate(b.getSkySalesForm(), g + "_", b.errorsHeader, f); i.clickedObj = d; if (c) { h = c; if (!c.getAttribute) { h = document.getElementById(g + "_" + c) } i.validateSingleElement(h); return i.outputErrors() } return i.run() } return true }; b.Util.displayPopUpConverter = function () { var c = "CurrencyConverter.aspx", d = window.converterWindow; if (!window.converterWindow || d.closed) { d = window.open(c, "converter", "width=360,height=220,toolbar=0,status=0,location=0,menubar=0,scrollbars=0,resizable=0") } else { d.open(c, "converter", "width=360,height=220,toolbar=0,status=0,location=0,menubar=0,scrollbars=0,resizable=0"); if ($(d).is(":hidden") === false) { d.focus() } } }; b.toggleAtAGlanceEvent = function () { $(this).next().toggle() }; b.toggleAtAGlance = function () { $("div.atAGlanceDivHeader").click(b.toggleAtAGlanceEvent) }; b.initializeTime = function () { var c = 0, d = ""; for (c = 0; c < 23; c += 1) { d += "<option value=" + c + ">" + c + "</option>" } if (d !== "") { $("select.Time").append(d) } }; b.aosAvailabilityShow = function () { $(this).parent().find("div.hideShow").show("slow"); return false }; b.aosAvailabilityHide = function () { $(this).parent().parent(".hideShow").hide("slow"); return false }; b.dropDownMenuEvent_MR_BK = function () { $("div.slideDownUp_BK").show("fast"); $("#liMenu1 a").addClass("liactive"); return false }; b.dropDownMenuEvent_MO_BK = function () { $("div.slideDownUp_BK").hide("fast"); $("#liMenu1 a").removeClass("liactive"); return false }; b.dropDownMenuEvent_MR_ATA = function () { $("div.slideDownUp_ATA").show("fast"); $("#liMenu2 a").addClass("liactive"); return false }; b.dropDownMenuEvent_MO_ATA = function () { $("div.slideDownUp_ATA").hide("fast"); $("#liMenu2 a").removeClass("liactive"); return false }; b.dropDownMenuEvent_MR_FI = function () { $("div.slideDownUp_FI").show("fast"); $("#liMenu3 a").addClass("liactive"); return false }; b.dropDownMenuEvent_MO_FI = function () { $("div.slideDownUp_FI").hide("fast"); $("#liMenu3 a").removeClass("liactive"); return false }; b.dropDownMenuEvent_MR_AU = function () { $("div.slideDownUp_AU").show("fast"); $("#liMenu4 a").addClass("liactive"); return false }; b.dropDownMenuEvent_MO_AU = function () { $("div.slideDownUp_AU").hide("fast"); $("#liMenu4 a").removeClass("liactive"); return false }; b.dropDownMenuEvent_MR_TA = function () { $("div.slideDownUp_TA").show("fast"); $("#liMenu5 a").addClass("top-nav-select"); return false }; b.dropDownMenuEvent_MO_TA = function () { $("div.slideDownUp_TA").hide("fast"); $("#liMenu5 a").removeClass("top-nav-select"); return false }; b.dropDownMenuEvent_MR_TT = function () { $("div.slideDownUp_TT").show("fast"); $("#liMenu51 a").addClass("top-nav-select"); return false }; b.dropDownMenuEvent_MO_TT = function () { $("div.slideDownUp_TT").hide("fast"); $("#liMenu51 a").removeClass("top-nav-select"); return false }; b.dropDownMenuEvent_MR_CA = function () { $("div.slideDownUp_CA").show("fast"); $("#liMenu6 a").addClass("top-nav-select"); return false }; b.dropDownMenuEvent_MO_CA = function () { $("div.slideDownUp_CA").hide("fast"); $("#liMenu6 a").removeClass("top-nav-select"); return false }; b.faqHideShow = function () { $(this).parent("dt").next(".accordianSlideContent").slideToggle("slow") }; b.equipHideShow = function () { $("div#moreSearchOptions").slideToggle("slow"); return false }; b.initializeAosAvailability = function () { $(".hideShow").hide(); $(".showContent").click(b.aosAvailabilityShow); $(".hideContent").click(b.aosAvailabilityHide); $(".toggleSlideContent_BK").mouseover(b.dropDownMenuEvent_MR_BK); $("#liMenu1").mouseleave(b.dropDownMenuEvent_MO_BK); $(".toggleSlideContent_ATA").mouseover(b.dropDownMenuEvent_MR_ATA); $("#liMenu2").mouseleave(b.dropDownMenuEvent_MO_ATA); $(".toggleSlideContent_FI").mouseover(b.dropDownMenuEvent_MR_FI); $("#liMenu3").mouseleave(b.dropDownMenuEvent_MO_FI); $(".toggleSlideContent_AU").mouseover(b.dropDownMenuEvent_MR_AU); $("#liMenu4").mouseleave(b.dropDownMenuEvent_MO_AU); $(".toggleSlideContent_TA").mouseover(b.dropDownMenuEvent_MR_TA); $("#liMenu5").mouseleave(b.dropDownMenuEvent_MO_TA); $(".toggleSlideContent_TT").mouseover(b.dropDownMenuEvent_MR_TT); $("#liMenu51").mouseleave(b.dropDownMenuEvent_MO_TT); $(".toggleSlideContent_CA").mouseover(b.dropDownMenuEvent_MR_CA); $("#liMenu6").mouseleave(b.dropDownMenuEvent_MO_CA); $(".accordian").click(b.faqHideShow); $(".showEquipOpt").click(b.equipHideShow); $(".hideEquipOpt").click(b.equipHideShow) }; b.common = new b.Common(); b.Util.sendAspFormFields = function () { var g = document.SkySales, d = null, f = window.document.getElementById("eventTarget"), e = window.document.getElementById("eventArgument"), c = window.document.getElementById("viewState"); if (!g.onsubmit || (g.onsubmit() !== false)) { f.name = "__EVENTTARGET"; e.name = "__EVENTARGUMENT"; c.name = "__VIEWSTATE"; if (g.checkValidity) { d = function () { $(this).removeAttr("required") }; b.common.getAllInputObjects().each(d) } } return true }; b.Util.initStripeTable = function () { $(".hotelResult").hide(); var c = function () { $(".stripeMe tr").removeClass("over"); $(this).parent().parent().addClass("over") }; $(".stripeMe input").click(c) }; b.initTableSorter = function () { $("table.sortMe").tablesorter({ sortList: [[0, 0]], widgets: ["zebra"], headers: { 5: { sorter: false}} }) }; b.Util.ready = function () { $("form").submit(b.Util.sendAspFormFields); b.Util.initObjects("ready"); b.initializeSkySalesForm(); b.Util.initStripeTable(); b.initializeAosAvailability(); }; b.Util.load = function () { b.Util.initObjects("load"); b.common.initializeCommon(); b.toggleAtAGlance(); b.initTableSorter() }; b.Class.CalendarAvailabilityInputBase = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.containerId = "availabilityInputContainerId"; d.container = null; d.templateId = "availabilityInputTemplateId"; d.template = null; d.totalTemplateId = "totalTemplateId"; d.totalTemplate = null; d.totalId = "totalId"; d.total = null; d.marketArray = []; d.marketClass = ""; d.requestStartDate = null; d.requestEndDate = null; d.pointsLabelAppend = ""; d.pointsSuffix = ""; d.init = function (e) { this.setSettingsByObject(e); this.initMarketArray(); this.setVars(); this.draw(); this.setVarsAfterDraw(); this.addEvents(); this.selectInitialDateMarkets() }; d.setVars = function () { d.container = this.getById(this.containerId); d.template = this.getById(this.templateId); d.totalTemplate = this.getById(this.totalTemplateId) }; d.initMarketArray = function () { var f = 0, g = this.marketArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = new b.Class[this.marketClass](); h.availabilityInput = this; h.marketIndex = f; h.containerId = "market_" + f; h.selectedDateContainerId = "selectedDate_" + f; h.requestStartDate = this.requestStartDate; h.requestEndDate = this.requestEndDate; h.init(g[f]); g[f] = h } }; d.setVarsAfterDraw = function () { d.total = this.getById(this.totalId); var f = 0, g = this.marketArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; h.setVarsAfterDraw() } }; d.addEvents = function () { var f = 0, g = this.marketArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; h.addEvents() } }; d.selectInitialDateMarkets = function () { var f = 0, g = this.marketArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; h.selectInitialDateMarket() } }; d.getHtml = function () { var h = this.template.text(), f = "", g = 0, j = this.marketArray || [], e = j.length, k = null; for (g = 0; g < e; g += 1) { k = j[g]; f += k.getHtml() } h = b.Util.replace(h, /\[marketArray\]/, f); return h }; d.draw = function () { var e = this.getHtml(); this.container.html(e) }; d.updateTotalAmount = function () { var g = this.totalTemplate.text(), f = new b.Class.CalendarAvailabilityTotals(), e = ""; f.marketArray = this.marketArray; f.getTotals(); e = b.Util.formatAmount(f.totalPrice, f.totalPoints, this.pointsLabelAppend, this.pointsSuffix); g = b.Util.replace(g, /\[totalAmount\]/, e); this.total.html(g) }; return d }; b.Class.CalendarAvailabilityTotals = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.totalPoints = 0; d.totalPrice = 0; d.marketArray = []; d.init = function (e) { this.setSettingsByObject(e) }; d.getFormattedPrice = function (f) { var e = ""; if (f !== null && f >= 0) { e = b.Util.convertToLocaleCurrency(f); if (e === "") { e = f.toString() } } return e }; d.getTotals = function () { var g = 0, e = this.marketArray || [], h = e.length, f = null, k = null, l = 0, n = 0, m = 0, j = 0; for (g = 0; g < h; g += 1) { f = e[g]; k = f.selectedDateMarket || {}; n = k.price || 0; l = k.points || 0; m += n; j += l } d.totalPoints = b.Util.convertToLocaleInteger(j); d.totalPrice = this.getFormattedPrice(m) }; return d }; b.Class.CalendarAvailabilityInput = function () { var c = new b.Class.CalendarAvailabilityInputBase(), d = b.Util.extendObject(c); d.init = function (e) { this.setSettingsByObject(e); c.marketClass = "CalendarAvailabilityMarket"; this.initMarketArray(); this.setVars(); this.draw(); this.setVarsAfterDraw(); this.addEvents(); this.selectInitialDateMarkets() }; return d }; b.Class.TripPlannerCalendarAvailabilityInput = function () { var d = new b.Class.CalendarAvailabilityInputBase(), c = b.Util.extendObject(d); c.datePickerManager = {}; c.init = function (e) { this.setSettingsByObject(e); d.marketClass = "TripPlannerCalendarAvailabilityMarket"; this.initMarketArray(); this.setVars(); this.draw(); this.setVarsAfterDraw(); this.addEvents(); this.selectInitialDateMarkets() }; return c }; b.Class.CalendarAvailabilityMarketBase = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.containerId = ""; c.container = null; c.selectedDateContainerId = ""; c.selectedDateContainer = null; c.templateId = "marketTemplateId"; c.template = null; c.selectedDateTemplateId = "selectedDateTemplateId"; c.selectedDateTemplate = null; c.noFlightsTemplateId = "noFlightsTemplateId"; c.noFlightsTemplate = null; c.availabilityInput = null; c.dateMarketHash = {}; c.marketIndex = -1; c.departureStation = ""; c.arrivalStation = ""; c.selectedDateMarket = null; c.selectedDate = ""; c.selectedClass = "selected"; c.dateMarketPrefix = "date_"; c.inputDayId = ""; c.inputDay = null; c.inputMonthId = ""; c.inputMonth = null; c.startYear = ""; c.startMonth = ""; c.startDay = ""; c.startDate = ""; c.firstBlockDate = ""; c.endYear = ""; c.endMonth = ""; c.endDay = ""; c.endDate = ""; c.lastBlockDate = ""; c.requestStartDate = null; c.requestEndDate = null; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.initStartDate(); this.initEndDate(); this.initFirstBlockDate(); this.initLastBlockDate(); this.initDateMarketHash() }; c.setVars = function () { c.template = this.getById(this.templateId); c.inputDay = this.getById(this.inputDayId); c.inputMonth = this.getById(this.inputMonthId); c.noFlightsTemplate = this.getById(this.noFlightsTemplateId) }; c.setVarsAfterDraw = function () { c.container = this.getById(this.containerId); c.selectedDateContainer = this.getById(this.selectedDateContainerId); c.selectedDateTemplate = this.getById(this.selectedDateTemplateId); var e = this.dateMarketHash || {}, g = "", f = null; for (g in e) { if (e.hasOwnProperty(g)) { f = e[g]; if (f) { f.setVarsAfterDraw() } } } }; c.addEvents = function () { this.container.click(this.updateFareHandler) }; c.getDateMarketKey = function (f) { var g = f.target, e = g.id; if (e === "") { e = $(g).parent("div.day").attr("id") || "" } return e }; c.updateFareEvent = function (f) { var e = this.getDateMarketKey(f); this.updateFare(e) }; c.updateFareHandler = function (e) { c.updateFareEvent(e) }; c.updateFare = function (g) { var f = this.dateMarketHash[g], i = "", k = ",", j = ",", h = "", e = -1, l = -1; if (f && (f.price >= 0 || f.points > 0)) { this.deactivateAllDateMarkets(); f.activate(); c.selectedDateMarket = f; i = this.selectedDateTemplate.text(); i = b.Util.replace(i, /\[formattedDate\]/, f.formattedDate); k = f.getFormattedPrice(); j = b.Util.convertToLocaleInteger(f.points); h = b.Util.formatAmount(k, j, f.pointsLabelAppend, f.pointsSuffix); i = b.Util.replace(i, /\[amount\]/, h); this.selectedDateContainer.html(i); l = parseInt(f.month, 10) + 1; this.inputMonth.val(l); e = parseInt(f.day, 10); this.inputDay.val(e); this.availabilityInput.updateTotalAmount() } }; c.selectInitialDateMarket = function () { var e = this.dateMarketPrefix + this.marketIndex + "_" + this.selectedDate; this.updateFare(e) }; c.deactivateAllDateMarkets = function () { var h = this.selectedClass, e = this.dateMarketHash || {}, g = "", f = null; for (g in e) { if (e.hasOwnProperty(g)) { f = e[g]; f.deactivate(h) } } }; c.initStartDate = function () { c.startDate = new Date(this.startYear, this.startMonth, this.startDay) }; c.initEndDate = function () { c.endDate = new Date(this.endYear, this.endMonth, this.endDay) }; c.initFirstBlockDate = function () { var e = this.startDate, h, g = e.getDay(), f = new Date(); h = this.addDays(e, g * -1); f.setTime(h); c.firstBlockDate = f }; c.initLastBlockDate = function () { var h = 7, j = this.endDate, f = j.getDay(), g = h - f, i = 0, e = new Date(); i = this.addDays(j, g); e.setTime(i); c.lastBlockDate = e }; c.getMarketHashKey = function (e) { e = e || new Date(); var f = this.dateMarketPrefix + this.marketIndex + "_" + e.getFullYear() + "_" + e.getMonth() + "_" + e.getDate(); return f }; c.initDateMarketHash = function () { var h = new Date(), e = this.lastBlockDate, f = this.dateMarketHash || {}, i = "", j = 0, g = null; h.setTime(this.firstBlockDate.getTime()); while (h < e) { i = this.getMarketHashKey(h); g = new b.Class.CalendarAvailabilityDateMarket(); g.market = this; f[i] = f[i] || {}; g.init(f[i]); g.date = new Date(h.getFullYear(), h.getMonth(), h.getDate()); g.availableClass = this.availableClass; f[i] = g; j = this.addDays(h, 1); h.setTime(j) } }; c.getMonthName = function (h) { h = parseInt(h, 10); var e = "", g = null, f = null; g = b.Util.getResource(); f = g.dateCultureInfo.monthNames; if (f.length > h) { e = f[h] } return e }; c.getDayNameArray = function () { var e = null, f = null; e = b.Util.getResource(); f = e.dateCultureInfo.dayNamesShort || []; return f }; c.supplantDayNames = function (j) { var g = this.getDayNameArray(), h = 0, f = g.length, k = null, l = "", e = ""; for (h = 0; h < f; h += 1) { e = g[h]; l = "\\[daysOfWeek" + h + "\\]"; k = new RegExp(l); j = b.Util.replace(j, k, e) } return j }; c.getHtml = function () { var e = ""; if (this.startYear) { e = this.template.text() } else { e = this.noFlightsTemplate.text() } e = this.supplant(e); return e }; c.supplant = function (g) { g = g || ""; var f = this.getMonthName(this.startMonth), e = ""; g = b.Util.replace(g, /\[startDateMonth\]/, f); g = b.Util.replace(g, /\[startDateYear\]/, this.startYear); g = b.Util.replace(g, /\[marketIndex\]/g, this.marketIndex); g = b.Util.replace(g, /\[departureStation\]/, this.departureStation); g = b.Util.replace(g, /\[arrivalStation\]/, this.arrivalStation); g = this.supplantDayNames(g); e = this.getMarketHtml(); g = b.Util.replace(g, /\[dateMarketHash\]/, e); return g }; c.getMarketHtml = function () { var i = "", m = [], f = new Date(), e = this.lastBlockDate, g = this.dateMarketHash || {}, l = "", k = 0, j = null, h = ""; f.setTime(this.firstBlockDate.getTime()); while (f < e) { l = this.getMarketHashKey(f); j = g[l]; h = j.getHtml(); m.push(h); k = this.addDays(f, 1); f.setTime(k) } i = m.join(""); return i }; c.addDays = function (f, e) { var g = f.getTime() + (e * 24 * 60 * 60 * 1000); return g }; c.getDateMarketArray = function () { var e = this.dateMarketHash || {}, g = "", f = null, h = []; for (g in e) { if (e.hasOwnProperty(g)) { f = e[g]; h.push(f) } } return h }; return c }; b.Class.CalendarAvailabilityMarket = function () { var d = new b.Class.CalendarAvailabilityMarketBase(), c = b.Util.extendObject(d); c.availableClass = ""; c.updateFareHandler = function (e) { c.updateFareEvent(e) }; return c }; b.Class.TripPlannerCalendarAvailabilityMarket = function () { var c = new b.Class.CalendarAvailabilityMarketBase(), d = b.Util.extendObject(c); d.datePickerManager = {}; d.availableClass = "available"; d.updateDateDropDowns = function (h) { var f = this.getDateMarketKey(h), e = this.dateMarketHash[f], g = e.price, i = e.date; if (g) { this.datePickerManager.datePopulate(i); this.availabilityInput.container.hide() } }; d.updateDateDropDownsHandler = function (e) { d.updateDateDropDowns(e) }; d.addEvents = function () { this.container.click(this.updateDateDropDownsHandler) }; return d }; b.Class.CalendarAvailabilityDateMarket = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.market = null; d.date = null; d.containerId = ""; d.container = null; d.templateId = "dateMarketTemplateId"; d.template = null; d.defaultJourneyTemplateId = "dateMarketJourneyDefaultTemplateId"; d.defaultJourneyTemplate = null; d.price = null; d.formattedDate = ""; d.year = -1; d.month = -1; d.day = -1; d.points = null; d.pointsSuffix = "pts"; d.pointsLabelAppend = " & "; d.availableClass = "available"; d.init = function (e) { this.setSettingsByObject(e); this.setVars() }; d.setVars = function () { d.template = this.getById(this.templateId) }; d.setVarsAfterDraw = function () { d.container = this.getById(this.containerId) }; d.getFormattedPrice = function () { var f = this.price, e = ""; if (f !== null && f >= 0) { e = b.Util.convertToLocaleCurrency(f); if (e === "") { e = f.toString() } } return e }; d.getHtml = function () { var e = this.template.text(); e = this.supplant(e); return e }; d.daySupplantValue = function () { var j = this.market, e = "&nbsp;", h = j.requestStartDate, g = j.requestEndDate, i = this.date, f = i.getDate(); if (h && g) { if (h && g) { if (i < h || i > g) { f = e } } } return f }; d.supplant = function (i) { var j = this.price, f = this.getFormattedPrice(), l = "", o = this.date, m = o.getFullYear().toString(), p = "", k = o.getMonth(), g = 0, n = this.daySupplantValue(), h = this.market, e = "", q = b.Util.convertToLocaleInteger(this.points); g = k + 1; p = m.charAt(2) + m.charAt(3); i = b.Util.replace(i, /\[day\]/g, n); i = b.Util.replace(i, /\[month\]/g, k); i = b.Util.replace(i, /\[showMonth\]/g, g); i = b.Util.replace(i, /\[year\]/g, m); i = b.Util.replace(i, /\[twoDigitYear\]/g, p); i = b.Util.replace(i, /\[marketIndex\]/g, h.marketIndex); if (j > 0) { e = this.availableClass } l = b.Util.formatAmount(f, q, this.pointsLabelAppend, this.pointsSuffix); i = b.Util.replace(i, /\[amount\]/g, l); i = b.Util.replace(i, /\[availableClass\]/g, e); return i }; d.activate = function () { var e = this.market.selectedClass, f = this.availableClass; this.container.removeClass(f); this.container.addClass(e) }; d.deactivate = function () { var e = this.market.selectedClass, f = this.availableClass; this.container.removeClass(e); this.container.addClass(f) }; return d }; b.taxAndFeeInclusiveDisplayDataRequestHandler = function a(k, h) { var c = ",", e = "FLEX", d = { flightKeys: k.join(c), numberOfMarkets: h, keyDelimeter: c, ssrs: e }, j = null, g = null, i = null, f = null; j = function () { if (b.common) { b.common.stripeTables() } g = new b.Class.ToggleView(); i = { elementId: "allUpPricing", hideId: "closeTotalPrice", showId: "taxAndFeeInclusiveTotal" }; g.init(i) }; f = function (l) { l = "<div>" + l + "</div>"; if (window.$) { $("#taxAndFeeInclusiveDivBody").remove(); $("#taxAndFeeInclusiveDivHeader").after($(l).find("#taxAndFeeInclusiveDivBody")); if (h === 1) { $("table#taxesAndFeesInclusiveDisplay_2").hide() } } j() }; $.get("TaxAndFeeInclusiveDisplayAjax-resource.aspx", d, f) }; b.Class.AvailabilityInputBase = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.journeyInfoArray = []; c.journeyInfoList = []; c.init = function (e) { this.setSettingsByObject(e); this.initJourneyInfoContainers() }; c.initJourneyInfoContainers = function () { var e = 0, f = this.journeyInfoList || [], g = {}; for (e = 0; e < f.length; e += 1) { g = new b.Class.JourneyInfo(); g.init(f[e]); this.journeyInfoArray.push(g) } }; return c }; b.Class.AvailabilityInput = function () { var c = new b.Class.AvailabilityInputBase(), d = b.Util.extendObject(c); d.detailsLinks = null; d.dateMarketLowestFareList = []; d.dateMarketLowestFareArray = []; d.getPriceItineraryInfo = function () { if (b.taxAndFeeInclusiveDisplayDataRequestHandler) { var e = $("#selectMainBody .availabilityTable tr td[class^='fareCol'] :radio[checked]"), g = []; $(e).each(function (h) { g[h] = $(this).val() }); $("#selectMainBody .availabilityTable tr[class^='trSSRMarket']").hide(); var f = 0; for (f = 0; f < e.length; f += 1) { $(".trSSRMarket" + e[f].id).show() } b.taxAndFeeInclusiveDisplayDataRequestHandler(g, e.length) } }; d.showPreselectedFares = function (e) { var f = 0; for (f = 0; f < e.length; f += 1) { if (e[f] !== null) { this.getById(e[f]).click() } } }; d.SSRHideShow = function (e) { $("#selectMainBody .availabilityTable tr[class^='trSSRMarket']").hide(); $(".trSSRMarket" & e).show("slow") }; d.updateFareSelectedHandler = function () { var e = this.id || ""; d.SSRHideShow(e); d.updateFareSelected(e) }; d.updateFareSelected = function (e) { this.getPriceItineraryInfo(); this.updateFareRules(e) }; d.updateFareRuleSelected = function (e) { this.updateFareRules(e) }; d.updateFareRules = function (g) { var l = /(RadioButtonMkt[0-9]+Fare[0-9]+)$/, n = [], h = "", q = "", f = this.journeyInfoArray || [], e = 0, j = f.length, m = null, p = null, k = 0, r = 0, i = null, o = b.Util.getFareRuleContainer(); if (o && g) { n = l.exec(g) || []; if (n.length > 1) { h = n[1]; journeyLoop: for (e = 0; e < j; e += 1) { m = f[e]; p = m.fareArray || []; r = p.length; for (k = 0; k < r; k += 1) { i = p[k]; if (h === i.fareId) { q = i.fareRuleKey; if (q) { o.updateFareRule(m.marketIndex, q) } break journeyLoop } } } } } }; d.addGetPriceItineraryInfoEvents = function () { $("#selectMainBody tr td[class^='fareCol'] :radio").click(this.updateFareSelectedHandler) }; d.ajaxEquipmentProperties = function () { }; d.addEquipmentPropertiesAjaxEvent = function () { $(this).click(d.ajaxEquipmentProperties) }; d.addEquipmentPropertiesAjaxEvents = function () { d.detailsLinks.each(d.addEquipmentPropertiesAjaxEvent) }; d.addEvents = function () { d.addGetPriceItineraryInfoEvents(); d.addEquipmentPropertiesAjaxEvents() }; d.setVars = function () { d.detailsLinks = $(".showContent") }; d.initLowestPriceSelection = function () { var e = null, g = this.dateMarketLowestFareList, f = 0; for (f = 0; f < g.length; f += 1) { e = new b.Class.LowestFareInfo(); e.init(g[f]); d.dateMarketLowestFareArray[d.dateMarketLowestFareArray.length] = e } }; d.init = function (g) { c.init.call(this, g); this.setSettingsByObject(g); if (b.taxAndFeeInclusiveDisplayDataRequestHandler) { this.setVars(); this.addEvents() } var f = window.location.pathname; var e = f.substring(f.lastIndexOf("/") + 1); if (e !== "ScheduleSelect.aspx") { this.initLowestPriceSelection(); if (b.taxAndFeeInclusiveDisplayDataRequestHandler) { this.getPriceItineraryInfo() } } }; return d }; b.Class.LowestFareInfo = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.tripMarketIndex = ""; c.marketIndex = ""; c.dateMarketIndex = ""; c.lowestFareControlId = ""; c.lowestFareControl = null; c.lowestFareSellKey = ""; c.lowestJourneySellKey = ""; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents(); this.selectDateMarketLowestFare() }; c.setVars = function () { d.setVars.call(this); var e = this.lowestFareSellKey + "|" + this.lowestJourneySellKey; c.lowestFareControl = $("input[value =" + e + "]", this.container) }; c.selectDateMarketLowestFare = function () { var e = this.lowestFareControl || {}; if (e) { e.attr("checked", "checked") } }; return c }; b.Class.JourneyInfo = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.equipmentInfoUri = "EquipmentPropertiesDisplayAjax-resource.aspx"; c.key = ""; c.journeyContainerId = ""; c.activateJourneyId = ""; c.activateJourney = null; c.deactivateJourneyId = ""; c.deactivateJourney = null; c.journeyContainer = null; c.legInfoArray = []; c.clientName = "EquipmentPropertiesDisplayControlAjax"; c.fareArray = {}; c.marketIndex = -1; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; c.setVars = function () { c.journeyContainer = this.getById(c.journeyContainerId); c.activateJourney = this.getById(c.activateJourneyId); c.deactivateJourney = this.getById(c.deactivateJourneyId) }; c.addEvents = function () { c.activateJourney.click(c.show); c.deactivateJourney.click(c.hide) }; c.showWithDataHandler = function (e) { c.showWithData(e) }; c.showWithData = function (k) { var m = $(k).html(), g = b.Json.parse(m), l = g.legInfo, h = null, f = "", p = null, n = "", e = null, j = 0, o = null; for (f in l) { if (l.hasOwnProperty(f)) { n = ""; h = l[f]; if (h.legIndex !== undefined) { p = this.getById("propertyContainer_" + c.key); e = h.equipmentPropertyArray; for (j = 0; j < e.length; j += 1) { o = e[j]; n += "<div>" + o.name + ": " + o.value + "</div>" } p.html(n) } } } this.journeyContainer.show("slow") }; c.show = function () { var f = c.legInfoArray, h = null, e = {}, k = "", g = 0, j = c.clientName; for (g = 0; g < f.length; g += 1) { h = f[g]; for (k in h) { if (h.hasOwnProperty(k)) { e[j + "$legInfo_" + k + "_" + g] = h[k] } } } $.post(c.equipmentInfoUri, e, c.showWithDataHandler) }; c.hide = function () { c.journeyContainer.hide() }; return c }; b.Util.getFareRuleContainer = function () { var c = b.common.fareRuleContainer; return c }; b.Class.FareRuleContainer = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.fareRuleArray = []; c.containerId = ""; c.init = function (e) { this.setSettingsByObject(e); b.common.fareRuleContainer = this }; c.updateFareRule = function (g, m) { g = parseInt(g, 10); g += 1; var e = this.fareRuleArray || [], h = 0, j = e.length, k = null, l = "", f = "default_" + g, n = null; for (h = 0; h < j; h += 1) { k = e[h]; if (k.key === m.toLowerCase()) { l = k.rule; break } } if (!l) { for (h = 0; h < j; h += 1) { k = e[h]; if (k.key === f) { l = k.rule; break } } } n = this.getById("fareRule" + g); n.html(l) }; return c }; b.Class.SsrPassengerInput = function () { var d = b.Class.SkySales(), c = b.Util.extendObject(d); c.ssrFormArray = null; c.ssrFeeArray = null; c.errorMsgOverMaxPerPassenger = "There has been an error"; c.ssrButtonIdArray = null; c.ssrButtonArray = null; c.buttonTrackId = ""; c.buttonTrack = null; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents(); $("table.ssrSoldContainer :input", this.container).attr("disabled", "disabled") }; c.setVars = function () { c.buttonTrack = this.getById(this.buttonTrackId); c.ssrButtonIdArray = this.ssrButtonIdArray || []; var h = [], f = 0, e = null, g = ""; for (f = 0; f < this.ssrButtonIdArray.length; f += 1) { g = this.ssrButtonIdArray[f]; e = this.getById(g); if (e.length > 0) { h[h.length] = e } } c.ssrButtonArray = h }; c.addEvents = function () { this.addButtonClickedEvents() }; c.addButtonClickedEvents = function () { var f = 0, e = null; for (f = 0; f < this.ssrButtonArray.length; f += 1) { e = this.ssrButtonArray[f]; e.click(this.updateButtonTrackHandler) } }; c.updateButtonTrackHandler = function () { c.buttonTrack.val(this.id) }; c.setSettingsByObject = function (j) { d.setSettingsByObject.call(this, j); var h = 0, g = this.ssrFormArray || [], k = null, f = this.ssrFeeArray || [], e = null; for (h = 0; h < g.length; h += 1) { k = new b.Class.SsrForm(); k.index = h; k.ssrPassengerInput = this; k.init(g[h]); g[h] = k } for (h = 0; h < f.length; h += 1) { e = new b.Class.SsrFormFee(); e.index = h; e.ssrPassengerInput = this; e.init(f[h]); f[h] = e } }; c.deactivateSsrFormNotes = function () { var f = 0, e = this.ssrFormArray, g = null; for (f = 0; f < e.length; f += 1) { g = e[f]; g.deactivateNoteDiv() } }; return c }; b.Class.SsrForm = function () { var c = b.Class.SkySales(), d = b.Util.extendObject(c); d.maximumDropDownLimit = 0; d.ssrPassengerId = ""; d.ssrPassenger = null; d.ssrCodeId = ""; d.ssrCode = null; d.ssrQuantityId = ""; d.ssrQuantity = null; d.ssrNoteId = ""; d.ssrNote = null; d.ssrNoteIframeId = ""; d.ssrNoteIframe = null; d.ssrNoteCloseId = ""; d.ssrNoteClose = null; d.ssrNoteDivId = ""; d.ssrNoteDiv = null; d.ssrNoteImageId = ""; d.ssrNoteImage = null; d.ssrNoteCancelId = ""; d.ssrNoteCancel = null; d.ssrFlightId = ""; d.ssrFlight = null; d.ssrAmountId = ""; d.ssrAmount = null; d.ssrCurrencyId = ""; d.ssrCurrency = null; d.index = -1; d.ssrPassengerInput = null; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents(); this.updateSsrAmount() }; d.setVars = function () { d.ssrNote = this.getById(this.ssrNoteId); d.ssrNoteDiv = this.getById(this.ssrNoteDivId); d.ssrNoteClose = this.getById(this.ssrNoteCloseId); d.ssrNoteCancel = this.getById(this.ssrNoteCancelId); d.ssrNoteImage = this.getById(this.ssrNoteImageId); d.ssrNoteIframe = this.getById(this.ssrNoteIframeId); d.ssrQuantity = this.getById(this.ssrQuantityId); d.ssrPassenger = this.getById(this.ssrPassengerId); d.ssrCode = this.getById(this.ssrCodeId); d.ssrCurrency = this.getById(this.ssrCurrencyId); d.ssrFlight = this.getById(this.ssrFlightId); d.ssrAmount = this.getById(this.ssrAmountId) }; d.addEvents = function () { this.addNoteEvents(); this.addQuantityEvents(); this.addSSRCodeEvents(); this.addFlightEvents() }; d.addFlightEvents = function () { this.ssrFlight.change(this.updateSsrAmountHandler) }; d.updateSsrQuantityHandler = function () { d.updateSsrQuantity() }; d.updateSsrAmountHandler = function () { d.updateSsrAmount() }; d.addSSRCodeEvents = function () { this.ssrCode.change(this.updateSsrQuantityHandler); this.ssrCode.change(this.updateSsrAmountHandler) }; d.addQuantityEvents = function () { this.ssrQuantity.change(this.updateSsrAmountHandler); this.ssrQuantity.blur(this.updateSsrAmountHandler) }; d.updateSsrAmount = function () { var m = this.ssrAmount, p = b.Util.convertToLocaleCurrency("0.00"), o = this.ssrPassenger.val(), k = this.ssrCode.val(), h = this.ssrQuantity.val(), q = /^[0-9]+$/, i = 0, n = this.ssrPassengerInput, e = n.ssrFeeArray, f = null, g = "", l = 0; m.val(p); h = $.trim(h); if (q.test(h)) { g = this.ssrFlight.val(); for (i = 0; i < e.length; i += 1) { f = e[i]; if ((g === "all") || (g === f.segmentKey)) { if ((o === f.passengerNumber) && (k === f.ssrCode)) { l += (f.amount * h) } } } p = b.Util.convertToLocaleCurrency(l); m.val(p) } else { this.ssrQuantity.val(0) } }; d.updateSsrQuantity = function () { var r = this.maximumDropDownLimit, q = this.ssrPassenger.val(), n = this.ssrCode.val(), l = this.ssrFlight.val(), o = 0, m = 0, p = this.ssrPassengerInput, f = p.ssrFeeArray, g = null, k = this.ssrQuantity.val(), s = 0, e = null, h = this.ssrQuantity[0]; r = window.parseInt(r, 10); k = parseInt(k, 10); for (o = 0; o < f.length; o += 1) { g = f[o]; if ((l === "all") || (l === g.segmentKey)) { if ((q === g.passengerNumber) && (n === g.ssrCode)) { s = parseInt(g.maxPerPassenger, 10); if (s === 0) { s = r; s = parseInt(s, 10); if (k >= s) { s = k; s = s + 1 } } if (h.options) { while (h.options.length > 0) { h.options[0] = null } for (m = 0; m <= s; m += 1) { e = new window.Option(m, m); h.options[m] = e; if (k === m) { this.ssrQuantity.val(m) } } } if (k > s) { this.ssrQuantity.val(s); alert(this.getErrorMsgOverMaxPerPassenger()) } else { this.ssrQuantity.val(k) } } } } }; d.getErrorMsgOverMaxPerPassenger = function () { var e = ""; e = this.ssrPassengerInput.errorMsgOverMaxPerPassenger; return e }; d.clearAndDeactivateNoteDiv = function () { var f = this.ssrNote, e = f.is(":disabled"); if (e === false) { f.val("") } this.deactivateNoteDiv() }; d.deactivateNoteDiv = function () { this.ssrNoteDiv.hide(); this.ssrNoteIframe.hide() }; d.activateNoteDiv = function () { this.ssrPassengerInput.deactivateSsrFormNotes(); var h = this.ssrNoteImage[0], i = b.Dhtml(), g = i.getX(h), f = i.getY(h), e = false; this.ssrNoteDiv.css("left", g + "px"); this.ssrNoteDiv.css("top", f + "px"); this.ssrNoteDiv.show(); this.ssrNoteIframe.css("left", g + "px"); this.ssrNoteIframe.css("top", f + "px"); this.ssrNoteIframe.show(); e = this.ssrNote.is(":disabled"); if (e === false) { this.ssrNote.click() } }; d.ssrNoteCancelHandler = function () { d.clearAndDeactivateNoteDiv() }; d.ssrNoteCloseHandler = function () { d.deactivateNoteDiv() }; d.ssrNoteImageHandler = function () { d.activateNoteDiv() }; d.addNoteEvents = function () { this.ssrNoteCancel.mouseup(this.ssrNoteCancelHandler); this.ssrNoteClose.mouseup(this.ssrNoteCloseHandler); this.ssrNoteImage.mouseup(this.ssrNoteImageHandler) }; return d }; b.Class.SsrFormFee = function () { var d = b.Class.SkySales(), c = b.Util.extendObject(d); c.journeyIndex = -1; c.segmentIndex = -1; c.segmentKey = ""; c.passengerNumber = -1; c.ssrCode = ""; c.feeCode = ""; c.amount = 0; c.currencyCode = ""; c.maxPerPassenger = 0; c.index = -1; c.ssrPassengerInput = null; return c }; b.Class.PassengerApis = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.toggleViewIdArray = []; d.init = function (h) { this.setSettingsByObject(h); var f = this.toggleViewIdArray || [], g = 0, j = null, e = f.length; for (g = 0; g < e; g += 1) { j = new b.Class.ToggleView(); j.init(f[g]); if (j.show.is(":checked")) { j.updateShow() } } }; return d }; b.Class.ContactData = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.passengerContactDataArray = []; c.title = ""; c.gender = ""; c.firstName = ""; c.middleName = ""; c.lastName = ""; c.customerNumber = ""; c.birthDay = ""; c.birthMonth = ""; c.birthYear = ""; c.nationality = ""; c.residentCountry = ""; c.programCode = ""; c.programNumber = ""; c.init = function (e) { this.setSettingsByObject(e); this.initPassengerContactDataArray(); this.setVars(); this.addEvents() }; c.initPassengerContactDataArray = function () { var h = 0, f = {}, g = this.passengerContactDataArray || [], e = g.length; for (h = 0; h < e; h += 1) { f = new b.Class.PassengerContactData(); f.contactData = this; f.init(g[h]); g[h] = f } }; return c }; b.Class.PassengerContactData = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.actionId = ""; c.action = null; c.passengerNumber = -1; c.contactData = null; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; c.setVars = function () { c.action = this.getById(this.actionId) }; c.addEvents = function () { this.action.click(this.populatePassengerHandler) }; c.populatePassengerHandler = function () { c.populatePassenger(this, c.passengerNumber) }; c.populatePassenger = function (g, f) { var j = null, i = null, k = false, e = this.contactData, h = -1; if (e) { h = f - 1; j = $("#passengerInputContent>fieldset:eq(" + f + ")"); i = [{ name: "DropDownListTitle", value: e.title }, { name: "TextBoxFirstName", value: e.firstName }, { name: "TextBoxMiddleName", value: e.middleName }, { name: "TextBoxLastName", value: e.lastName }, { name: "TextBoxCustomerNumber", value: e.customerNumber }, { name: "DropDownListBirthDateDay", value: e.birthDay }, { name: "DropDownListBirthDateMonth", value: e.birthMonth }, { name: "DropDownListBirthDateYear", value: e.birthYear }, { name: "DropDownListGender", value: e.gender }, { name: "DropDownListNationality", value: e.nationality }, { name: "DropDownListResidentCountry", value: e.residentCountry }, { name: "TextBoxProgramNumber", value: e.programNumber }, { name: "DropDownListProgram", value: e.programCode}]; k = $("#" + g.id).is(":checked"); if (k) { $.map(i, function (l) { if (l) { $(":input[id*=" + l.name + "]", j).val(l.value) } }) } else { $.map(i, function (l) { if (l) { $(":input[id*=" + l.name + "]", j).val("") } }) } } }; return c }; b.Class.CityText = function (c) { this.textNode = c; this.x = c.getAttribute("x"); this.y = c.getAttribute("y"); this.stringLength = 0; this.endX = 0; this.endY = 0; this.errorCount = 0; this.svgImage = document.getElementById("flightStatusImageId"); this.svgImageWidth = this.svgImage.getAttribute("width"); this.svgImageHeight = this.svgImage.getAttribute("height"); this.midX = 0; this.moveText = function () { if (this.errorCount === 0) { this.alignCenter(); this.placeRelativeToCity(); this.nudgeIntoPlace() } else { this.handleError() } }; this.alignCenter = function () { this.midX = this.getStringLength() / 2; this.setX((this.getX() - this.midX)); this.textNode.setAttribute("x", (this.getX())) }; this.nudgeIntoPlace = function () { while ((this.getEndX() + 165) >= this.svgImageWidth) { this.setX((this.getX() - 1)); this.textNode.setAttribute("x", this.getX()) } while ((this.getX()) <= 1) { this.setX((this.getX() + 1)); this.textNode.setAttribute("x", this.getX()) } while ((this.getY()) <= 10) { this.setY((this.getY() + 1)); this.textNode.setAttribute("y", this.getY()) } while ((this.getY() + 165) >= this.svgImageHeight) { this.setY((this.getY() - 1)); this.textNode.setAttribute("y", this.getY()) } }; this.placeRelativeToCity = function () { var d = "top"; if ((this.getY()) <= 10) { d = "bottom" } if (d === "bottom") { this.setY((this.getY() + 3)) } else { this.setY((this.getY() - 3)) } this.textNode.setAttribute("y", this.getY()) }; this.setY = function (d) { this.y = d }; this.getY = function () { return parseInt(this.y, 10) }; this.setX = function (d) { this.x = d }; this.getX = function () { return parseInt(this.x, 10) }; this.getEndX = function () { if (this.errorCount === 0) { this.endX = this.getX() + this.getStringLength(); if (this.endX === this.getX()) { this.handleError() } return this.endX } this.handleError() }; this.getY = function () { return parseInt(this.y, 10) }; this.getStringLength = function () { if (this.errorCount === 0) { if (!this.stringLength) { this.stringLength = this.textNode.getComputedTextLength(); if (this.stringLength === 0) { this.handleError() } } return this.stringLength } this.handleError() }; this.handleError = function () { if (this.errorCount === 0) { this.x = parseInt(this.x, 10) - 20; c.setAttribute("x", this.x) } this.errorCount += 1 } }; b.Class.FlightPath = function (c, f, d, e) { this.objectId = c; this.object = document.getElementById(c); this.rotateId = f; this.rotate = document.getElementById(f); this.currentLeg = d.toLowerCase(); this.currentLegArray = this.currentLeg.split("_"); this.origin = document.getElementById(this.currentLegArray[0]); this.destination = document.getElementById(this.currentLegArray[1]); this.originX = parseInt(this.origin.getAttribute("cx"), 10); this.originY = parseInt(this.origin.getAttribute("cy"), 10); this.destinationX = parseInt(this.destination.getAttribute("cx"), 10); this.destinationY = parseInt(this.destination.getAttribute("cy"), 10); this.percentageComplete = e; this.distance = null; this.distanceTraveled = null; this.slope = null; this.positionX = null; this.positionY = null; this.moveToCurrentPosition = function () { var g = this.getObject(); g.setAttributeNS(null, "transform", "translate(" + this.getPositionX() + "," + this.getPositionY() + ")") }; this.moveToCurrentRotation = function () { var h = this.destinationX - this.originX, g = this.destinationY - this.originY, k = 0, j = 0, i = ""; if (h < 0) { k = Math.atan(this.getSlope()) + Math.PI } else { if (g < 0) { k = Math.atan(this.getSlope()) + (2 * Math.PI) } else { k = Math.atan(this.getSlope()) } } j = (k * 180) / Math.PI; j = j + 180; i = "rotate(" + ((j)) + ")"; this.rotate.setAttributeNS(null, "transform", i) }; this.getCurrentPosition = function () { var j = 0, i = this.originX, h = this.originY, g = 0; if (this.percentageComplete > 0) { while (j <= this.getDistanceTraveled()) { g = h - (this.getSlope() * i); if (this.originX > this.destinationX) { i = i - 1 } else { i = i + 1 } h = (i * this.getSlope()) + g; j = Math.sqrt(Math.pow((i - this.originX), 2) + Math.pow((h - this.originY), 2)) } this.positionX = i; this.positionY = h } else { this.positionX = this.originX; this.positionY = this.originY } }; this.getObject = function () { if (!this.object) { this.object = document.getElementById(c) } return this.object }; this.getRotate = function () { if (!this.rotate) { this.rotate = document.getElementById(f) } return this.rotate }; this.getPositionX = function () { if (this.percentageComplete <= 0) { this.positionX = this.destinationX } return this.positionX }; this.getPositionY = function () { if (this.percentageComplete <= 0) { this.positionY = this.destinationY } return this.positionY }; this.getSlope = function () { if (!this.slope) { this.slope = ((this.destinationY - this.originY) / (this.destinationX - this.originX)) } return this.slope }; this.getDistance = function () { if (!this.distance) { this.distance = Math.sqrt(Math.pow((this.destinationX - this.originX), 2) + Math.pow((this.destinationY - this.originY), 2)) } return this.distance }; this.getDistanceTraveled = function () { if (!this.distanceTraveled) { this.distanceTraveled = this.distance * (this.percentageComplete * 0.01) } return this.distanceTraveled }; this.setCurrentPosition = function () { this.getDistance(); this.getDistanceTraveled(); this.getSlope(); this.getCurrentPosition() }; this.setCurrentPosition() }; b.Util.calculatePosition = function (c, g, e, f) { var d = new b.Class.FlightPath(c, g, e, f); d.moveToCurrentPosition(); d.moveToCurrentRotation() }; b.Class.ControlGroupBookingRetrieve = function () { var d = new b.Class.ControlGroup(), c = b.Util.extendObject(d); c.bookingRetrieve = null; c.init = function (e) { this.setSettingsByObject(e); var f = new b.Class.BookingRetrieve(); f.init(e); c.bookingRetrieve = f; this.setVars(); this.addEvents() }; c.validateHandler = function () { var e = c.validate(); return e }; c.validate = function () { var f = false, e = this.bookingRetrieve; f = e.isOneSectionPopulated(); if (f) { f = d.validate.call(this) } return f }; return c }; b.Class.BookingRetrieve = function () { var d = new b.Class.FlightSearch(), c = b.Util.extendObject(d); c.marketArray = []; c.missingInformation = ""; c.sectionValidation = {}; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; c.setVars = function () { d.setVars.call(this); var g = 0, e = 0, j = this.sectionValidation, f = [], k = "", h = null; for (k in j) { if (j.hasOwnProperty(k)) { f = j[k] || []; e = f.length; for (g = 0; g < e; g += 1) { h = f[g]; h.input = this.getById(h.id) } } } }; c.isOneSectionPopulated = function () { var j = 0, k = 0, p = this.sectionValidation, m = [], e = "", l = null, n = null, g = false, o = "", h = "", f = true; for (e in p) { if (p.hasOwnProperty(e)) { m = p[e] || []; k = m.length; f = true; for (j = 0; j < k; j += 1) { l = m[j]; n = l.input[0]; if (n) { o = n.value; h = o.requiredempty || ""; if (o === h) { o = "" } if (!o) { f = false; break } } } if (f) { g = true; break } } } if (!g) { alert(this.missingInformation) } return g }; return c }; b.Class.CheckInPassengerInput = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.checkInPassengerJourneyArray = []; c.init = function (e) { this.setSettingsByObject(e); this.initCheckInPassengerJourneyArray() }; c.initCheckInPassengerJourneyArray = function () { var g = 0, f = this.checkInPassengerJourneyArray || [], e = f.length, h = null; for (g = 0; g < e; g += 1) { h = new b.Class.CheckInPassengerJourney(); h.init(f[g]); f[g] = h } }; return c }; b.Class.CheckInPassengerJourney = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.checkInInputId = ""; d.checkInInput = null; d.baggageInputId = ""; d.baggageInput = null; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents(); this.checkInInputUpdate() }; d.setVars = function () { d.checkInInput = this.getById(this.checkInInputId); d.baggageInput = this.getById(this.baggageInputId) }; d.addEvents = function () { this.checkInInput.click(this.checkInInputUpdateHandler) }; d.checkInInputUpdateHandler = function () { d.checkInInputUpdate() }; d.checkInInputUpdate = function () { var e = this.checkInInput.is(":checked"); if (e) { this.baggageInput.removeAttr("disabled") } else { this.baggageInput.attr("disabled", "disabled") } }; return d }; b.Class.TermsAndConditionsBase = function () { var f = new b.Class.AosBase(), d = b.Util.extendObject(f), c = {}, e = "$"; d.showHideId = ""; d.showHide = null; d.inputId = ""; d.input = null; d.url = ""; d.clientName = ""; d.setVars = function () { f.setVars.call(this); d.showHide = this.getById(d.showHideId); d.input = this.getById(d.inputId) }; d.sendRequest = function () { $.post(d.url, c, d.updateDom) }; d.updateDom = function (g) { if (d.container) { d.container.html(g); d.show("slow") } }; d.showTermsAndConditions = function () { var g = d.input.attr("name"); g = d.clientName + e + g; c[g] = 1; c[d.clientName + e + "AjaxControlPrefix"] = d.clientName; c.__EVENTTARGET = d.clientName + e + "OnTermsAndConditions"; d.sendRequest() }; d.addEvents = function () { f.addEvents.call(this); d.showHide.click(d.showTermsAndConditions) }; d.init = function (g) { f.init.call(this, g); d.addEvents() }; return d }; b.Class.PassengerTypeDropDowns = function () { var e = new b.Class.SkySales(), f = b.Util.extendObject(e), g, d, c; f.passengerTypes = {}; f.maximumPassengersPerType = 7; f.passengerTypeDropDownArray = []; f.passengerTypesCountHash = {}; f.setVars = function () { g = this.getById("tripPlannerPassengerTypeTemplateId"); d = this.getById("tripPlannerPassengerTypesContainer") }; f.getHtml = function () { var i = g.text(), m = "", h = "", k = this.passengerTypes, j = "", l = "", n = {}; for (l in k) { if (k.hasOwnProperty(l)) { n = k[l]; j = n.name; m = b.Util.replace(i, /\[key\]/g, l); m = b.Util.replace(m, /\[name\]/g, j); h += m } } return h }; f.getPassengerTypeArray = function () { var h = [], j = 0, k = this.maximumPassengersPerType; for (j = 0; j <= k; j += 1) { h[j] = { code: j, name: j} } return h }; f.populatePassengerTypeDropDown = function (i, j) { var k = $("#paxTypeCountDictionary_" + i), h = { input: k, objectArray: c, selectedItem: j }; b.Util.populate(h); f.passengerTypeDropDownArray.push(k) }; f.populatePassengerTypeDropDowns = function () { var h = this.passengerTypes, l = this.passengerTypesCountHash, k = 0, i = "", j = {}; c = this.getPassengerTypeArray(); for (i in h) { if (h.hasOwnProperty(i)) { j = h[i]; k = l[i]; f.populatePassengerTypeDropDown(i, k) } } }; f.draw = function () { var h = ""; h = this.getHtml(); d.html(h) }; f.init = function (h) { this.setSettingsByObject(h); this.setVars(); this.draw(); this.populatePassengerTypeDropDowns() }; return f }; b.Class.TripPlannerSearchFlight = function () { var i = new b.Class.SkySales(), g = b.Util.extendObject(i), e = "tripFlight_0", c = "tripIsUnavailable_0", l = "tripHasNoFares_0", k = "", d = "", j = "", f = "", h = ""; g.index = 0; g.tripFlightTemplateHtml = ""; g.tripPlannerSearchFlights = {}; g.market = {}; g.flightDate = new Date(); g.container = {}; g.fullDateFormatString = "yy-mm-dd"; g.tripIsUnavailable = {}; g.tripHasNoFares = {}; g.datePickerManager = {}; g.lowFare = {}; g.lowFareDom = {}; g.origin = ""; g.originInput = {}; g.originInputDom = {}; g.destination = ""; g.destinationInput = {}; g.destinationInputDom = {}; g.dayInput = {}; g.yearMonthInput = {}; g.flightLabel = {}; g.closeButton = {}; g.selectedClass = "tpSelectedFlight"; g.journeyFareSellKey = ""; g.setVars = function () { var o = this.tripPlannerSearchFlights.tripPlannerSearch, r = o.flightContainerIdFormat, m = o.tripIsUnavailableIdFormat, p = o.tripHasNoFaresIdFormat, q = o.lowFareIdFormat, n = o.originStationIdFormat, t = o.destinationStationIdFormat, u = o.flightLabelIdFormat, s = o.closeFlightButtonIdFormat; e = b.Util.replace(r, "[index]", this.index); c = b.Util.replace(m, "[index]", this.index); l = b.Util.replace(p, "[index]", this.index); j = b.Util.replace(q, "[index]", this.index); k = b.Util.replace(n, "[index]", this.index); d = b.Util.replace(t, "[index]", this.index); f = b.Util.replace(u, "[index]", this.index); h = b.Util.replace(s, "[index]", this.index) }; g.getHtml = function () { var n = b.Util.replace(this.tripFlightTemplateHtml, /\[index\]/g, this.index), m = this.index + 1; n = b.Util.replace(n, /\[oneBasedIndex\]/g, m); return n }; g.draw = function () { var m = this.tripPlannerSearchFlights.tripFlightsContainer, n = this.getHtml(); m.append(n) }; g.setVarsAfterDrawAndInitMarket = function () { g.container = this.getById(e); g.tripIsUnavailable = this.getById(c); g.tripHasNoFares = this.getById(l); g.lowFare = this.getById(j); g.lowFareDom = this.lowFare[0]; g.originInput = this.getById(k); g.originInputDom = this.originInput[0]; g.flightLabel = this.getById(f); this.originInput.val(this.origin); g.destinationInput = this.getById(d); g.destinationInputDom = this.destinationInput[0]; this.destinationInput.val(this.destination); g.closeButton = this.getById(h) }; g.populateFromDom = function () { var m = null, p = this.market || {}, o = p.marketDateArray || [], n = null; g.destination = this.destinationInput.val() || ""; g.origin = this.originInput.val() || ""; if (o.length) { n = o[0].marketDate || $([]); m = n.val() || ""; m = b.Util.parseIsoDate(m) } if (m) { g.flightDate = m } }; g.initMarket = function () { var s = this.index, r = this.tripPlannerSearchFlights.tripPlannerSearch, m = r.flightSearch, v = r.marketDateIdFormat, t = r.marketDayIdFormat, q = r.marketMonthYearIdFormat, o = b.Util.replace(v, "[index]", s), n = b.Util.replace(t, "[index]", s), w = b.Util.replace(q, "[index]", s), u = {}, p = { marketInputIdArray: [{ originId: k, destinationId: d}], stationInputIdArray: [k, d], lowFareAvailabilityArray: [{ showId: j, tripPlannerSearchFlight: this, marketDateId: o, originId: k, destinationId: d}], marketDateIdArray: [{ marketDateId: o, marketDayId: n, marketMonthYearId: w, useJQueryDatePicker: false, fullDateFormatString: this.fullDateFormatString}] }; g.market = new b.Class.FlightSearchMarket(); g.market.flightSearch = m; g.market.index = s; this.market.init(p); u = this.market.marketDateArray[0].datePickerManager; g.datePickerManager = u; u.datePopulate(this.flightDate); g.dayInput = u.day; g.yearMonthInput = u.yearMonth }; g.selectFlight = function () { this.container.addClass(this.selectedClass) }; g.unselectFlight = function () { this.container.removeClass(this.selectedClass) }; g.selectCurrentFlight = function () { this.tripPlannerSearchFlights.unselectAll(); this.selectFlight() }; g.focusOrigin = function () { this.originInput.focus() }; g.selectCurrentFlightHandler = function () { g.selectCurrentFlight() }; g.removeCurrentFlightHandler = function () { g.removeCurrentFlight() }; g.reapplyDateBoundsHandler = function () { g.tripPlannerSearchFlights.reapplyDateBounds() }; g.removeCurrentFlight = function () { var m = this.tripPlannerSearchFlights, n = m.tripPlannerSearch; if (m) { m.removeSelectedFlight(this); n.updateRetainedJourneyFareSellKeys() } }; g.requireOriginAndDestination = function () { var m = b.Util.setRequiredAttribute; m(this.originInput); m(this.destinationInput) }; g.dontRequireOriginAndDestination = function () { var m = b.Util.removeRequiredAttribute; m(this.originInput); m(this.destinationInput) }; g.validate = function () { this.tripPlannerSearchFlights.dontRequireOriginAndDestinationOnFlights(); this.requireOriginAndDestination(); return b.Util.validate(this.lowFareDom) }; g.validateHandler = function () { return g.validate() }; g.setNextFlightDestinationToThisFlightOrigin = function () { this.tripPlannerSearchFlights.setNextFlightDestinationToThisFlightOrigin(this) }; g.setNextFlightDestinationToThisFlightOriginHandler = function () { g.setNextFlightDestinationToThisFlightOrigin() }; g.addEvents = function () { this.container.click(this.selectCurrentFlightHandler); this.closeButton.click(this.removeCurrentFlightHandler); this.originInput.focus(this.selectCurrentFlightHandler); this.yearMonthInput.focus(this.selectCurrentFlightHandler); this.destinationInput.blur(this.setNextFlightDestinationToThisFlightOriginHandler) }; g.init = function (m) { this.setSettingsByObject(m); this.setVars(); this.draw(); this.initMarket(); this.setVarsAfterDrawAndInitMarket(); this.addEvents() }; g.reinitializeFlight = function (m) { this.setSettingsByObject(m); this.setVars(); this.initMarket(); this.setVarsAfterDrawAndInitMarket(); this.addEvents() }; g.showTripIsUnavailable = function () { this.tripIsUnavailable.show() }; g.hideTripIsUnavailable = function () { this.tripIsUnavailable.hide() }; g.showTripHasNoFares = function () { this.tripHasNoFares.show() }; g.hideTripHasNoFares = function () { this.tripHasNoFares.hide() }; g.show = function () { this.container.show() }; g.hide = function () { this.container.hide() }; g.setOrigin = function (m) { g.origin = m; this.originInput.val(m) }; g.clearStationPair = function () { var m = this.destinationInput.val(), n = this.originInput.val(); if (m === "") { this.originInput.val("") } if (n === "") { this.destinationInput.val("") } }; return g }; b.Class.TripPlannerSearchFlights = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.flightSearch = {}; d.tripFlightsContainer = {}; d.tripFlightTemplateHtml = ""; d.flights = []; d.tripPlannerSearch = {}; d.numberOfDaysApart = 3; d.firstDisplayedFlightIndex = 0; d.addFlightId = "addFlight"; d.removeFlightId = "removeFlight"; d.scrollLeftArrowId = "tpLeftMove"; d.scrollRightArrowId = "tpRightMove"; d.addFlightLink = {}; d.removeFlightLink = {}; d.setVars = function () { d.tripFlightsContainer = $("#tripFlightsContainer"); d.tripFlightTemplateHtml = $("#tripFlightTemplate").text(); d.addFlightLink = this.getById(this.addFlightId); d.removeFlightLink = this.getById(this.removeFlightId); d.scrollLeftArrow = this.getById(this.scrollLeftArrowId); d.scrollRightArrow = this.getById(this.scrollRightArrowId) }; d.getPreviousFlightDate = function (f) { var e = new Date(), g = {}; if (f > 0) { g = this.flights[f - 1]; e = g.datePickerManager.getDate() } return e }; d.setJsonOriginToPreviousFlightDestination = function (e, g) { var f, h = ""; if (e > 0) { f = this.flights[e - 1]; h = f.destinationInput.val(); if (h !== "") { g.origin = h } } return g }; d.setNextFlightDestinationToThisFlightOrigin = function (g) { var f = g.index, e = {}; if (f < (this.flights.length - 1)) { e = this.flights[f + 1]; e.setOrigin(g.destinationInput.val()) } }; d.addFlightWithIndex = function (f) { var g = new b.Class.TripPlannerSearchFlight(), e = this.getPreviousFlightDate(f), h = e, i = {}, j = this.tripPlannerSearch.controlGroupId || ""; h.setDate(e.getDate() + this.numberOfDaysApart); i = { tripFlightTemplateHtml: b.Util.replace(this.tripFlightTemplateHtml, /\[controlGroupId\]/g, j), tripPlannerSearchFlights: this, index: f, flightDate: h }; i = this.setJsonOriginToPreviousFlightDestination(f, i); g.init(i); d.flights[f] = g }; d.toggleAddRemoveLinks = function () { var e = this.flights.length; if (e === 1) { this.removeFlightLink.hide(); this.addFlightLink.show() } else { if (e === 12) { this.removeFlightLink.show(); this.addFlightLink.hide() } else { this.removeFlightLink.show(); this.addFlightLink.show() } } }; d.addFlight = function () { var e = this.flights.length; this.addFlightWithIndex(e); this.showLast4Flights(); this.toggleAddRemoveLinks(); this.toggleRemoveFlightLabel(); this.toggleScrollArrows() }; d.removeFlight = function () { var f = this.tripPlannerSearch, g = this.flights.length - 1, e = this.flights[g]; e.container.remove(); this.flights.splice(g, 1); if (f) { f.updateRetainedJourneyFareSellKeys() } this.showLast4Flights(); this.toggleAddRemoveLinks(); this.toggleRemoveFlightLabel(); this.toggleScrollArrows() }; d.removeSelectedFlight = function (e) { var g = this.flights, h = 0, f = 0; if (e) { f = e.index; e.container.remove(); g.splice(e.index, 1); h = g.length; this.tripFlightsContainer.hide(); this.reinitializeAndRedrawFlights(); if (h - f <= 4) { this.showLast4Flights() } else { if (f < 4) { this.show4FlightsFromIndex(0) } else { this.show4FlightsFromIndex(f) } } this.tripFlightsContainer.show(); this.toggleScrollArrows(); this.toggleRemoveFlightLabel(); this.toggleAddRemoveLinks(); this.flights = g } }; d.reinitializeAndRedrawFlights = function () { var h = 0, f = this.flights, e = {}, k = f.length, j = [], l = {}, g = "", m = this.tripPlannerSearch.controlGroupId || ""; for (h = 0; h < k; h += 1) { e = f[h]; e.index = h; e.populateFromDom(); l = { destination: e.destination, flightDate: e.flightDate, index: e.index, origin: e.origin, tripFlightTemplateHtml: b.Util.replace(e.tripFlightTemplateHtml, /\[controlGroupId\]/g, m), tripPlannerSearchFlights: e.tripPlannerSearchFlights, journeyFareSellKey: e.journeyFareSellKey }; j.push(l); g = g + e.getHtml() } this.tripFlightsContainer.html(g); for (h = 0; h < k; h += 1) { e = f[h]; e.reinitializeFlight(j[h]); f[h] = e } this.flights = f }; d.toggleRemoveFlightLabel = function () { var f = this.flights, g = f.length, e = {}; if (g > 1) { e = f[0]; e.closeButton.show() } if (g === 1) { e = f[0]; e.closeButton.hide() } }; d.addFlightHandler = function () { d.addFlight() }; d.removeFlightHandler = function () { d.removeFlight() }; d.unselectAll = function () { var g = this.flights.length, f = 0, e = {}; for (f = 0; f < g; f += 1) { e = this.flights[f]; e.unselectFlight() } }; d.parseDate = function (j) { var g = j.split("-"), e = g[0], f = g[1], i = g[2], h = new Date(e, f - 1, i); return h }; d.addFlightFromViewModel = function (f, e) { var g = new b.Class.TripPlannerSearchFlight(), k = this.tripPlannerSearch.controlGroupId || "", h = e.departureDate, i = this.parseDate(h), j = { tripFlightTemplateHtml: b.Util.replace(this.tripFlightTemplateHtml, /\[controlGroupId\]/g, k), tripPlannerSearchFlights: this, index: f, flightDate: i, origin: e.originStation, destination: e.destinationStation, journeyFareSellKey: this.tripPlannerSearch.originalJourneyFareSellKeys[f] || "" }; g.init(j); d.flights[f] = g }; d.selectFirstFlight = function () { var e = this.flights[0]; e.selectCurrentFlight(); e.focusOrigin() }; d.initFlights = function () { var f = 0, h = this.tripPlannerSearch.dateMarkets, g = h.length, e = {}; for (f = 0; f < g; f += 1) { e = h[f]; this.addFlightFromViewModel(f, e) } this.show4FlightsFromIndex(0); this.toggleAddRemoveLinks(); this.toggleScrollArrows(); this.selectFirstFlight() }; d.toggleScrollArrows = function () { var e = this.flights.length, f = this.firstDisplayedFlightIndex; if (e <= 4) { this.scrollLeftArrow.hide(); this.scrollRightArrow.hide() } else { if (f === 0) { this.scrollLeftArrow.hide(); this.scrollRightArrow.show() } else { if (f === e - 4) { this.scrollLeftArrow.show(); this.scrollRightArrow.hide() } else { this.scrollLeftArrow.show(); this.scrollRightArrow.show() } } } }; d.scrollLeft = function () { this.show4FlightsFromIndex(this.firstDisplayedFlightIndex - 1); this.toggleScrollArrows() }; d.scrollRight = function () { var e = this.flights.length; this.show4FlightsFromIndex(this.firstDisplayedFlightIndex + 1, e); this.toggleScrollArrows() }; d.scrollLeftHandler = function () { d.scrollLeft() }; d.scrollRightHandler = function () { d.scrollRight() }; d.addEvents = function () { this.addFlightLink.click(this.addFlightHandler); this.removeFlightLink.click(this.removeFlightHandler); this.scrollLeftArrow.click(this.scrollLeftHandler); this.scrollRightArrow.click(this.scrollRightHandler) }; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.initFlights(); this.toggleRemoveFlightLabel(); this.addEvents() }; d.show4FlightsFromIndex = function (f, j) { var h = j || this.flights.length, g = f + 3, e = 0; for (e = 0; e < h; e += 1) { if ((e >= f) && (e <= g)) { this.flights[e].show() } else { this.flights[e].hide() } } d.firstDisplayedFlightIndex = f }; d.showLast4Flights = function () { var f = this.flights.length, e = 0; if (f > 3) { e = f - 4; this.show4FlightsFromIndex(e, f) } }; d.validateDateBounds = function () { var k = 0, o = this.flights, l = o.length, j = l - 1, r = {}, p = new Date(), h = new Date(), q = new Date(), g = {}, n = {}, e = {}, f = {}, m = {}; h.setDate(p.getDate() - 1); q.setYear(p.getFullYear() + 1); g = h; for (k = 0; k < l; k += 1) { r = o[k]; if (k > 0) { e = o[k - 1]; g = e.datePickerManager.getDate() } if (k === j) { n = q } else { f = o[k + 1]; n = f.datePickerManager.getDate() } m = r.datePickerManager; m.setBeginDateBound(g); m.setEndDateBound(n); m.datePopulate() } }; d.dontRequireOriginAndDestinationOnFlights = function () { var g = this.flights || [], h = g.length, f = 0, e = {}; for (f = 1; f < h; f += 1) { e = g[f]; e.dontRequireOriginAndDestination() } }; d.firstFlightRequireOriginAndDestination = function () { var f = this.flights, e = f[0]; this.dontRequireOriginAndDestinationOnFlights(); e.requireOriginAndDestination() }; d.clearIncompleteFlights = function () { var e = {}, g = this.flights, h = g.length, f = 0; for (f = 0; f < h; f += 1) { e = g[f]; e.clearStationPair() } }; return d }; b.Class.TripPlannerSearch = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.controlGroupId = ""; c.flightSearchJson = {}; c.flightSearch = {}; c.tripPlannerSearchDataJson = {}; c.preferredFareDropDownId = "preferredFareDropDown"; c.passengerDiscountDropDownId = "passengerDiscountDropDown"; c.flightContainerIdFormat = "tripFlight_[index]"; c.tripIsUnavailableIdFormat = "tripIsUnavailable_[index]"; c.tripHasNoFaresIdFormat = "tripHasNoFares_[index]"; c.originStationIdFormat = ""; c.destinationStationIdFormat = ""; c.lowFareIdFormat = ""; c.submitButtonId = ""; c.submitButton = {}; c.marketDateIdFormat = "marketDate_[index]"; c.marketDayIdFormat = "marketDay_[index]"; c.marketMonthYearIdFormat = "marketMonthYear_[index]"; c.addFlightId = "addFlight"; c.removeFlightId = "removeFlight"; c.flightLabelIdFormat = "flightNumber_[index]"; c.closeFlightButtonIdFormat = "closeFlightButton_[index]"; c.tripFlights = {}; c.numberOfDaysApart = 4; c.preferredFareDropDown = {}; c.passengerDiscountDropDown = {}; c.passengerTypes = {}; c.passengerTypeDropDowns = {}; c.fareTypes = {}; c.tripPlannerHelp = null; c.maximumPassengersPerType = 0; c.passengerDiscounts = {}; c.dateMarkets = []; c.passengerTypesCount = []; c.passengerTypesCountHash = {}; c.discountCode = ""; c.preferredFare = ""; c.residentCountry = ""; c.originalJourneyFareSellKeys = ""; c.retainedJourneyFareSellKeysId = "retainedJourneyFareSellKeys"; c.retainedJourneyFareSellKeys = {}; c.populatePassengerTypesCountHash = function () { var f = this.passengerTypesCount, h = this.passengerTypesCountHash, e = "", g = {}; for (e in f) { if (f.hasOwnProperty(e)) { g = f[e]; h[e] = g } } }; c.setVars = function () { this.preferredFareDropDown = this.getById(this.preferredFareDropDownId); this.passengerDiscountDropDown = this.getById(this.passengerDiscountDropDownId); this.submitButton = this.getById(this.submitButtonId); this.retainedJourneyFareSellKeys = this.getById(this.retainedJourneyFareSellKeysId); this.populatePassengerTypesCountHash(); this.originalJourneyFareSellKeys = this.originalJourneyFareSellKeys.split(",") }; c.initRetainedJourneyFareSellKeys = function () { var e = this.originalJourneyFareSellKeys || []; this.retainedJourneyFareSellKeys.val(e.join()) }; c.updateRetainedJourneyFareSellKeys = function () { var g = this.tripFlights || {}, j = g.flights || {}, f = {}, k = j.length || 0, h = 0, e = ""; for (h = 0; h < k; h += 1) { f = j[h]; if (e === "") { e = f.journeyFareSellKey } else { e = e + "," + f.journeyFareSellKey } } this.retainedJourneyFareSellKeys.val(e) }; c.createPreferredFareDropDownArray = function () { var g = [], f = this.fareTypes || {}, e = "", h = {}; for (e in f) { if (f.hasOwnProperty(e)) { h = f[e]; g.push({ code: e, name: h.name }) } } return g }; c.populatePreferredFareDropDown = function () { var f = this.createPreferredFareDropDownArray(), e = { input: this.preferredFareDropDown, objectArray: f, selectedItem: this.preferredFare }; b.Util.populate(e) }; c.createPassengerDiscountDropDownArray = function () { var h = [], e = this.passengerDiscounts || {}, f = "", g = {}; for (f in e) { if (e.hasOwnProperty(f)) { g = e[f]; h.push({ code: f, name: g.name }) } } return h }; c.populateDiscountDropDown = function () { var f = this.createPassengerDiscountDropDownArray(), e = { input: this.passengerDiscountDropDown, objectArray: f, selectedItem: this.discountCode }; b.Util.populate(e) }; c.initFlightSearch = function () { var f = {}, e = b.Util.setRequiredAttribute; c.flightSearchJson.countryInputIdArray[0].defaultCountry = this.residentCountry; c.flightSearch = new b.Class.FlightSearch(); this.flightSearch.init(this.flightSearchJson); f = this.flightSearch.countryInputArray[0].input; e(f) }; c.createAndPopulateDropDowns = function () { var e = { passengerTypes: this.passengerTypes, maximumPassengersPerType: this.maximumPassengersPerType, passengerTypesCountHash: this.passengerTypesCountHash }; c.passengerTypeDropDowns = new b.Class.PassengerTypeDropDowns(); this.passengerTypeDropDowns.init(e); this.populatePreferredFareDropDown(); this.populateDiscountDropDown() }; c.initTripFlights = function () { var e = {}; c.tripFlights = new b.Class.TripPlannerSearchFlights(); e = { tripPlannerSearch: this, numberOfDaysApart: this.numberOfDaysApart, addFlightId: this.addFlightId, removeFlightId: this.removeFlightId }; this.tripFlights.init(e) }; c.validateFirstFlight = function () { this.tripFlights.firstFlightRequireOriginAndDestination(); return b.Util.validate(this.submitButton[0]) }; c.validate = function () { var e = null; e = this.validateFirstFlight(); if (e) { this.tripFlights.clearIncompleteFlights() } return e }; c.validateHandler = function () { var e = c.validate(); return e }; c.addEvents = function () { this.submitButton.click(this.validateHandler) }; c.init = function (e) { this.setSettingsByObject(e); this.setSettingsByObject(this.tripPlannerSearchDataJson); this.setVars(); this.createAndPopulateDropDowns(); this.initRetainedJourneyFareSellKeys(); this.initFlightSearch(); this.initTripFlights(); this.addEvents(); this.tripPlannerHelp = new b.Class.TripPlannerHelp(); this.tripPlannerHelp.init() }; return c }; b.Class.TripPlannerSelect = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.tripContainerId = "tripContainerId"; d.tripContainer = null; d.tripFlightTemplateId = "tripFlightTemplateId"; d.tripFlightTemplate = null; d.journeyContainerId = "tpSelect"; d.journeyContainer = null; d.tripJourneyInfoTemplateId = "journeyTableTemplateId"; d.tripJourneyInfoTemplate = null; d.itinerarySummaryContainerId = "tpItinSummary"; d.itinerarySummaryContainer = null; d.itineraryTableTemplateId = "itineraryTableTemplateId"; d.itineraryTableTemplate = null; d.TripAvailabilityResponse = {}; d.ErrorsOccurred = null; d.leftPageButtonId = "tpLeftMove"; d.leftPageButton = null; d.rightPageButtonId = "tpRightMove"; d.rightPageButton = null; d.tripSelectedClass = "tpSelectedPanel"; d.tripSelectClass = "tpSelectPanel"; d.radioButtonSelectedClass = "checked"; d.itineraryJourneyInfoTemplateId = "itineraryJourneyInfoTemplate"; d.itineraryJourneyInfoTemplate = null; d.itineraryJourneyInfoStripedTemplateId = "itineraryJourneyInfoStripedTemplate"; d.itineraryJourneyInfoStripedTemplate = null; d.selectViewPricesCurrencyInfoTemplateId = "selectViewPricesCurrencyInfoTemplate"; d.selectViewPricesCurrencyInfoTemplate = null; d.tripFlightHeaderInfoTemplateId = "tripFlightHeaderInfoTemplateId"; d.tripFlightHeaderInfoTemplate = null; d.tripFlightHeaderInfoContainerId = "tripFlightHeaderInfo"; d.tripFlightHeaderInfoContainer = null; d.tripPlannerHelp = null; d.sellKeysInputId = "tripPlannerSellKeys"; d.sellKeysInput = null; d.JourneyFareSellKeys = ""; d.schedulesArray = []; d.tripSellKeyArray = []; d.itinerarySummary = null; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.itinerarySummary = new b.Class.TripPlannerItinerarySummarySelect(); this.itinerarySummary.init(); this.itinerarySummary.drawSelectViewItinerarySummary = this.drawItinerarySummaryInfo; this.initSchedulesArray(); this.draw(); this.setVarsAfterDraw(); this.addEvents(); this.selectAndDrawInitialTrip(); this.setVarsAfterDrawSchedulesJourneyInfo(); this.updateSelectedRadioButtons(); this.initSellKeyArray(); this.updateItinerarySummary(); this.drawItinerarySummaryInfo(); this.tripPlannerHelp = new b.Class.TripPlannerHelp(); this.tripPlannerHelp.init() }; d.setVars = function () { d.tripContainer = this.getById(this.tripContainerId); d.tripFlightTemplate = this.getById(this.tripFlightTemplateId); d.journeyContainer = this.getById(this.journeyContainerId); d.tripJourneyInfoTemplate = this.getById(this.tripJourneyInfoTemplateId); d.itinerarySummaryContainer = this.getById(this.itinerarySummaryContainerId); d.itineraryTableTemplate = this.getById(this.itineraryTableTemplateId); d.leftPageButton = this.getById(this.leftPageButtonId); d.rightPageButton = this.getById(this.rightPageButtonId); d.itineraryJourneyInfoStripedTemplate = this.getById(this.itineraryJourneyInfoStripedTemplateId); d.itineraryJourneyInfoTemplate = this.getById(this.itineraryJourneyInfoTemplateId); d.schedulesArray = this.TripAvailabilityResponse.Schedules || []; d.sellKeysInput = this.getById(this.sellKeysInputId); d.selectViewPricesCurrencyInfoTemplate = this.getById(this.selectViewPricesCurrencyInfoTemplateId); d.tripFlightHeaderInfoTemplate = this.getById(this.tripFlightHeaderInfoTemplateId); d.tripFlightHeaderInfoContainer = this.getById(this.tripFlightHeaderInfoContainerId) }; d.initSchedulesArray = function () { this.JourneyFareSellKeys = this.JourneyFareSellKeys.split(","); var f = 0, g = this.TripAvailabilityResponse.Schedules || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = new b.Class.Schedule(); h.index = f; h.deactivateAllSchedules = this.deactivateAllSchedules; h.updateTripSellKeyArray = this.updateTripSellKeyArray; h.updateItinerarySummary = this.updateItinerarySummary; if (this.JourneyFareSellKeys[f] !== undefined) { h.journeyFareSellKey = this.JourneyFareSellKeys[f] } h.updateTrips = this.updateTripsHandler; if (f < 4) { h.isShowing = true } h.init(g[f]); g[f] = h } }; d.setVarsAfterDraw = function () { var f = 0, g = this.schedulesArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; h.setVarsAfterDraw() } }; d.setVarsAfterDrawSchedulesJourneyInfo = function () { var f = 0, g = this.schedulesArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; if (h.selected === true) { h.container.removeClass(this.tripSelectClass); h.container.addClass(this.tripSelectedClass) } } }; d.addEvents = function () { d.addTripContainerEvents(); var f = 0, g = this.schedulesArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; h.addEvents() } }; d.addTripContainerEvents = function () { this.tripContainer.click(this.updateTripContainerHandler); this.leftPageButton.click(this.updateTripsLeftHandler); this.rightPageButton.click(this.updateTripsRightHandler) }; d.updateTripsLeftHandler = function () { var g = 0, h = -1, j = d.schedulesArray || [], f = j.length, l = null, m = -1, k = -1, e = null; if (f > 4) { for (g = f - 1; g > -1; g -= 1) { l = j[g]; if (l.isShowing === true) { h = g } } g = 0; if (h > 0) { e = j[h - 1]; if (e !== undefined && e !== null) { k = h - 1; m = h + 3; for (g = 0; g < f; g += 1) { l = j[g]; l.isShowing = false; l.selected = false } for (g = k; g < m; g += 1) { l = j[g]; if (g === k) { l.selected = true } l.isShowing = true } d.tripContainer.empty(); d.drawTripsInfo(); d.drawTripHeaderInfo(); d.setVarsAfterDraw(); d.addEvents(); d.drawScheduleJourneysInfo(); d.setVarsAfterDrawSchedulesJourneyInfo(); d.updateSelectedRadioButtons() } } } }; d.updateTripsRightHandler = function () { var g = 0, f = -1, j = d.schedulesArray || [], e = j.length, l = null, m = -1, k = -1, h = null; if (e > 4) { for (g = 0; g < e; g += 1) { l = j[g]; if (l.isShowing === true) { f = g } } g = 0; if (f < 12) { h = j[f + 1]; if (h !== undefined && h !== null) { m = f + 1; k = m - 3; for (g = 0; g < e; g += 1) { l = j[g]; l.isShowing = false; l.selected = false } for (g = k; g <= m; g += 1) { l = j[g]; if (g === m) { l.selected = true } l.isShowing = true } d.tripContainer.empty(); d.drawTripsInfo(); d.drawTripHeaderInfo(); d.setVarsAfterDraw(); d.addEvents(); d.drawScheduleJourneysInfo(); d.setVarsAfterDrawSchedulesJourneyInfo(); d.updateSelectedRadioButtons() } } } }; d.updateTripContainerHandler = function () { var f = 0, g = d.schedulesArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; h.container.removeClass(d.tripSelectedClass); h.container.addClass(d.tripSelectClass); if (h.selected === true) { h.container.removeClass(d.tripSelectClass); h.container.addClass(d.tripSelectedClass); d.journeyContainer.empty(); d.drawScheduleJourneysInfo(); d.updateSelectedRadioButtons() } } }; d.deactivateAllSchedules = function () { var f = 0, g = d.schedulesArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; h.selected = false } }; d.selectAndDrawInitialTrip = function () { var f = 0, g = this.schedulesArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; if (f === 0) { h.selected = true } } d.drawScheduleJourneysInfo() }; d.getTripsHeaderInfoHtml = function () { var j = "", h = 0, g = -1, f = -1, k = this.schedulesArray || [], e = k.length, l = null; for (h = 0; h < e; h += 1) { l = k[h]; if (l.isShowing === true) { if (g === -1) { g = h + 1 } f = h + 1 } } j = this.tripFlightHeaderInfoTemplate.text(); j = b.Util.replace(j, /\[firstShowingFligt\]/g, g); j = b.Util.replace(j, /\[lastShowingFlight\]/g, f); j = b.Util.replace(j, /\[totalNumberOfFlights\]/g, e); return j }; d.getTripsHtml = function () { var h = "", f = "", g = 0, j = this.schedulesArray || [], e = j.length, k = null; for (g = 0; g < e; g += 1) { k = j[g]; if (k.isShowing === true) { h += this.tripFlightTemplate.text(); f = k.getTripsHtml(); h = b.Util.replace(h, /\[tripFlightInfo\]/g, f); h = b.Util.replace(h, /\[index\]/g, g + 1) } } return h }; d.getJourneyHtml = function () { var g = "", j = "", f = 0, h = "", k = this.schedulesArray || [], e = k.length, l = null; for (f = 0; f < e; f += 1) { l = k[f]; if (l.selected === true) { g = this.tripJourneyInfoTemplate.text(); j += l.getJourneyHtml(); h = "trip" + f; j = b.Util.replace(j, /\[radioButtonIdTrip\]/g, h); j = b.Util.replace(j, /\[radioGroupName\]/g, h); g = b.Util.replace(g, /\[jouneyInfoAndFares\]/, j) } } return g }; d.getItineraryHtml = function () { var f = this.itineraryTableTemplate.text(), i = 0, e = this.itinerarySummary.getSelectViewItineraryJourneysHtml(), g = this.itinerarySummary.getSelectViewItineraryAllPassengerFeesHtml(), h = this.selectViewPricesCurrencyInfoTemplate.text(); f = b.Util.replace(f, /\[itinerarySummaryBody\]/, e); f = b.Util.replace(f, /\[allPassengerFees\]/, g); if (this.itinerarySummary.Booking !== null && this.itinerarySummary.Booking.BookingPricing !== null) { i = b.Util.convertToLocaleCurrency(this.itinerarySummary.Booking.BookingPricing.TotalBookingPrice); h = b.Util.replace(h, /\[totalPrice\]/, i); h = b.Util.replace(h, /\[currencyName\]/, this.itinerarySummary.Booking.BookingPricing.CurrencyDescription) } else { h = b.Util.replace(h, /\[totalPrice\]/, "") } f = b.Util.replace(f, /\[pricesCurrencyInfo\]/, h); return f }; d.draw = function () { d.drawTripsInfo(); d.drawTripHeaderInfo() }; d.drawScheduleJourneysInfo = function () { var g = d.getJourneyHtml(), f = 0, h = this.schedulesArray || [], e = h.length, j = null; d.journeyContainer.html(g); for (f = 0; f < e; f += 1) { j = h[f]; j.setVarsAfterDraw("radioInput_trip" + f); j.addEventsAfterDraw() } if (b.common) { b.common.stripeTables() } }; d.drawTripHeaderInfo = function () { var e = this.getTripsHeaderInfoHtml(); this.tripFlightHeaderInfoContainer.html(e) }; d.drawTripsInfo = function () { var e = this.getTripsHtml(); this.tripContainer.html(e) }; d.drawItinerarySummaryInfo = function () { var e = d.getItineraryHtml(); d.itinerarySummaryContainer.html(e); if (b.common) { b.common.stripeTables() } }; d.updateSelectedRadioButtons = function () { var g = 0, h = "", f = null, j = d.schedulesArray || [], e = j.length, k = null; for (g = 0; g < e; g += 1) { k = j[g]; if (k.selected === true) { h = "radioInput_trip" + g + k.getSelectedTripJourneyFare(); break } } f = this.getById(h); if (f !== null) { f.attr(this.radioButtonSelectedClass, this.radioButtonSelectedClass) } }; d.initSellKeyArray = function () { var f = 0, j = "", g = d.schedulesArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; j = h.getSelectedJourneyFareSellKey(); d.tripSellKeyArray[f] = j } d.sellKeysInput.value = this.tripSellKeyArray.toString(); d.sellKeysInput.val(this.tripSellKeyArray.toString()); this.itinerarySummary.sellKeys.val(this.tripSellKeyArray.toString()) }; d.updateItinerarySummary = function () { d.itinerarySummary.getPriceItineraryResponse(d.tripSellKeyArray.toString()) }; d.updateTripSellKeyArray = function (e, f) { if (d.tripSellKeyArray[e] !== undefined) { d.tripSellKeyArray[e] = f; d.sellKeysInput.value = ""; d.sellKeysInput.value = d.tripSellKeyArray.toString(); d.sellKeysInput.val(d.tripSellKeyArray.toString()) } }; d.updateTripsHandler = function () { d.updateTrips() }; d.updateTrips = function () { this.drawTripsInfo(); var f = 0, g = d.schedulesArray || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = g[f]; h.setVarsAfterDraw(); if (h.selected === true) { h.container.removeClass(d.tripSelectClass); h.container.addClass(d.tripSelectedClass) } } this.addEvents() }; return d }; b.Class.Schedule = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.JourneyDateMarketList = null; d.index = -1; d.selected = false; d.isShowing = false; d.containerId = ""; d.container = null; d.deactivateAllSchedules = null; d.journeyItinerarySummaryInfoTemplateId = "journeyItinerarySummaryInfoTemplate"; d.allPassengerFeesItinerarySummaryInfoTemplateId = "allPassengerFeesItinerarySummaryInfoTemplate"; d.journeyItinerarySummaryInfoTemplate = null; d.updateTripSellKeyArray = null; d.updateItinerarySummary = null; d.updateTrips = null; d.journeyFareSellKey = ""; d.tripUnavailableTextId = "tripUnavailableErrorText"; d.tripUnavailableText = ""; d.tripHasNoFaresTextId = "tripHasNoFaresErrorText"; d.tripHasNoFaresText = ""; d.init = function (e) { this.setSettingsByObject(e); this.initJourneyDateMarketListArray(); this.setVars() }; d.initJourneyDateMarketListArray = function () { var h = 0, f = this.JourneyDateMarketList || [], e = f.length, g = null; for (h = 0; h < e; h += 1) { g = new b.Class.JourneyDateMarketList(); g.updateTripSellKeyArray = this.updateTripSellKeyArray; g.updateItinerarySummary = this.updateItinerarySummary; g.updateTrips = this.updateTrips; g.selectedJourneyFareSellKey = this.journeyFareSellKey; g.tripIndex = this.index; g.init(f[h]); f[h] = g } }; d.setVars = function () { var f = {}, e = {}; d.journeyItinerarySummaryInfoTemplate = this.getById(this.journeyItinerarySummaryInfoTemplateId); d.allPassengerFeesItinerarySummaryInfoTemplate = this.getById(this.allPassengerFeesItinerarySummaryInfoTemplateId); f = this.getById(this.tripUnavailableTextId); if (f.length > 0) { d.tripUnavailableText = f.text() } e = this.getById(this.tripHasNoFaresTextId); if (e.length > 0) { d.tripHasNoFaresText = e.text() } }; d.setVarsAfterDraw = function (k) { var j = this.index + 1, h = 0, f = this.JourneyDateMarketList || [], e = f.length, g = null; d.containerId = "tripFlightContainer" + j; d.container = this.getById(this.containerId); for (h = 0; h < e; h += 1) { g = f[h]; g.setVarsAfterDraw(k) } }; d.addEvents = function () { this.container.click(this.updateScheduleSelectionHandler) }; d.addEventsAfterDraw = function () { var j = this.index + 1, h = 0, f = this.JourneyDateMarketList || [], e = f.length, g = null; d.containerId = "tripFlightContainer" + j; d.container = this.getById(this.containerId); for (h = 0; h < e; h += 1) { g = f[h]; g.addEventsAfterDraw() } }; d.updateScheduleSelectionHandler = function () { if (d.deactivateAllSchedules !== null) { d.deactivateAllSchedules() } d.selected = true }; d.getSelectedTripJourneyFare = function () { var h = 0, j = "", f = this.JourneyDateMarketList || [], e = f.length, g = null; for (h = 0; h < e; h += 1) { g = f[h]; j = g.getSelectedJourneyFare() } return j }; d.getSelectedJourneyFareSellKey = function () { var h = 0, j = "", f = this.JourneyDateMarketList || [], e = f.length, g = null; for (h = 0; h < e; h += 1) { g = f[h]; j = g.getSelectedJourneyFareSellKey() } return j }; d.getTripsHtml = function () { var e, f = d.JourneyDateMarketList[0]; if (f === undefined) { e = this.tripUnavailableText } else { if (f.hasFares()) { e = f.getTripsHtml() } else { e = this.tripHasNoFaresText } } return e }; d.getJourneyHtml = function () { var j = 0, h = "", f = this.JourneyDateMarketList || [], e = f.length, g = null; for (j = 0; j < e; j += 1) { g = f[j]; h += g.getJourneyHtml(); g.selectJourneys() } return h }; d.getItineraryHtml = function () { var h = 0, k = "", p = "", m = this.JourneyDateMarketList || [], l = m.length, n = null, f = 0, g = [], o = 0, e = null; for (h = 0; h < l; h += 1) { n = m[h]; f = 0; g = n.Journeys || []; o = g.length; e = null; for (f = 0; f < o; f += 1) { e = g[f]; if (e.selected === true) { k = this.journeyItinerarySummaryInfoTemplate.text(); k = b.Util.replace(k, /\[stationPair\]/, e.DepartureStation + " to " + e.ArrivalStation); k = b.Util.replace(k, /\[deptArriveTimes\]/, e.DepartureDate.date.toTimeString() + " to " + e.ArrivalDate.date.toTimeString()); k = b.Util.replace(k, /\[flightDesignator\]/, e.FlightDesignator); k = b.Util.replace(k, /\[journeyDate\]/, e.DepartureDate.date.toDateString()); p = k } } } return p }; return d }; b.Class.JourneyDateMarketList = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.ArrivalStation = ""; d.DepartureDate = ""; d.DepartureStation = ""; d.Journeys = []; d.journeyTableInfoTemplateId = "journeyTableInfoTemplateId"; d.journeyTableInfoTemplate = null; d.journeyTableInfoStripedTemplateId = "journeyTableInfoStripedTemplateId"; d.journeyTableInfoStripedTemplate = null; d.updateTripSellKeyArray = null; d.updateItinerarySummary = null; d.updateTrips = null; d.selectedJourneyFareSellKey = ""; d.selectedJourneyKey = ""; d.selectedFareKey = ""; d.tripIndex = 0; d.tripFlightInfoTemplateId = "tripFlightInfoTemplateId"; d.tripFlightInfoTemplate = {}; d.init = function (e) { d.setSettingsByObject(e); d.initSelectedSellKeys(); d.initJourneysArray(); d.setVars(); d.selectJourneys() }; d.initSelectedSellKeys = function () { if (this.selectedJourneyFareSellKey.length > 0) { this.selectedJourneyFareSellKey = this.selectedJourneyFareSellKey.split("|"); if (this.selectedJourneyFareSellKey[1] !== undefined) { this.selectedJourneyKey = this.selectedJourneyFareSellKey[1] } if (this.selectedJourneyFareSellKey[0] !== undefined) { this.selectedFareKey = this.selectedJourneyFareSellKey[0] } } }; d.initJourneysArray = function () { var f = 0, h = this.Journeys || [], e = h.length, g = null; for (f = 0; f < e; f += 1) { g = new b.Class.JourneyDateMarket(); g.updateTripSellKeyArray = this.updateTripSellKeyArray; g.updateItinerarySummary = this.updateItinerarySummary; g.updateTrips = this.updateTrips; g.selectedFareKey = this.selectedFareKey; g.updateSelectedJourney = this.updateSelectedJourneyHandler; g.tripIndex = this.tripIndex; g.journeyIndex = f; g.init(h[f]); h[f] = g } }; d.setVars = function () { d.tripFlightInfoTemplate = this.getById(this.tripFlightInfoTemplateId); d.journeyTableInfoTemplate = this.getById(this.journeyTableInfoTemplateId); d.journeyTableInfoStripedTemplate = this.getById(this.journeyTableInfoStripedTemplateId) }; d.setVarsAfterDraw = function (h) { var f = 0, j = this.Journeys || [], e = j.length, g = null; for (f = 0; f < e; f += 1) { g = j[f]; g.setVarsAfterDraw(h + "journey" + f) } }; d.addEventsAfterDraw = function () { var f = 0, h = this.Journeys || [], e = h.length, g = null; for (f = 0; f < e; f += 1) { g = h[f]; g.addEventsAfterDraw() } }; d.getTripsHtml = function () { var g = this.Journeys[0], l = 0, k = this.Journeys || [], o = k.length, e = null, j = -1, n = this.tripFlightInfoTemplate.text() || "", h = "", f = {}, m = {}, p = {}; for (l = 0; l < o; l += 1) { e = k[l]; if (e.selected === true) { g = e } } if (g && g.Segments) { j = g.Segments.length; n = b.Util.replace(n, /\[departureStation\]/g, g.Segments[0].DepartureStation); n = b.Util.replace(n, /\[departureTime\]/g, g.Segments[0].Std.getTime()); n = b.Util.replace(n, /\[arrivalStation\]/g, g.Segments[j - 1].ArrivalStation); n = b.Util.replace(n, /\[arrivalTime\]/g, g.Segments[j - 1].Sta.getTime()); m = g.Segments[0] || {}; p = m.FlightDesignator || {}; f = new b.Class.Leg(); f.init(m.Legs[0]); h = p.getFlightDesignator() + f.getOperatingDisclosureTypeToolTip() + f.getCodeShareTypeToolTip() + m.getSubjToGovtApprovalSuperscript(); n = b.Util.replace(n, /\[departureDate\]/, $.datepicker.formatDate(m.fullDateFormatString, m.Std.date)); for (l = 1; l < j; l += 1) { m = g.Segments[l] || {}; p = m.FlightDesignator || {}; f = new b.Class.Leg(); f.init(m.Legs[0]); h = h + "/" + p.getFlightDesignator() + f.getOperatingDisclosureTypeToolTip() + f.getCodeShareTypeToolTip() + m.getSubjToGovtApprovalSuperscript() } n = b.Util.replace(n, /\[flightNumber\]/, h); return n } }; d.selectJourneys = function () { var h = 0, k = false, g = -1, m = -1, l = this.Journeys || [], e = l.length, j = null, f = false; if (this.selectedJourneyKey.length > 0) { for (h = 0; h < e; h += 1) { j = l[h]; if (j.SellKey === this.selectedJourneyKey) { j.selected = true; j.selectedFareKey = this.selectedFareKey; f = j.selectPreselectedFare(); if (f === false) { j.getLowestFare() } } } } k = this.journeyIsSelected(); if (k === false) { for (h = 0; h < e; h += 1) { j = l[h]; if (j.getLowestFare() < g && j.getLowestFare() > -1) { g = j.getLowestFare(); m = h } else { if (g === -1 && j.getLowestFare() > -1) { g = j.getLowestFare(); m = h } } if (h === e - 1 && g > -1) { j = l[m]; j.selected = true; l[m] = j } } } }; d.journeyIsSelected = function () { var f = 0, h = false, j = this.Journeys || [], e = j.length, g = null; for (f = 0; f < e; f += 1) { g = j[f]; if (g.selected === true) { h = true; break } } return h }; d.hasFares = function () { var e = false, h = this.Journeys || [], g = h.length || 0, f; for (f = 0; f < g; f += 1) { if (h[f].hasFares()) { e = true; break } } return e }; d.getSelectedJourneyFare = function () { var h = 0, f = -1, g = -1, k = this.Journeys || [], e = k.length, j = null; for (h = 0; h < e; h += 1) { j = k[h]; if (j.selected === true) { g = h; f = j.getSelectedPaxFaresIndex(); break } } return "journey" + g + "fare" + f }; d.getSelectedJourneyFareSellKey = function () { var h = 0, f = "", g = "", k = this.Journeys || [], e = k.length, j = null; for (h = 0; h < e; h += 1) { j = k[h]; if (j.selected === true) { f = j.SellKey; g = j.getSelectedPaxFaresSellKey(); break } } return g + "|" + f }; d.updateSelectedJourneyHandler = function (e) { d.updateSelectedJourney(e) }; d.updateSelectedJourney = function (g) { this.deactivateAllJourneys(); var f = 0, j = this.Journeys || [], e = j.length, h = null; for (f = 0; f < e; f += 1) { h = j[f]; if (g === f) { h.selected = true; break } } }; d.deactivateAllJourneys = function () { var f = 0, h = this.Journeys || [], e = h.length, g = null; for (f = 0; f < e; f += 1) { g = h[f]; g.selected = false } }; d.getJourneyHtml = function () { var n = 0, q = "", f = "", o = "", s = "", m = this.Journeys || [], r = m.length, g = null, j = "", l = "", p = [], k = -1, e = "", h = this.tripIndex; for (n = 0; n < r; n += 1) { g = m[n]; if (n % 2 !== 0) { q = this.journeyTableInfoTemplate.text() } else { q = this.journeyTableInfoStripedTemplate.text() } p = g.Segments; k = p.length; if (p && k > 0) { j = g.Segments[0].Std.getTime(); l = g.Segments[k - 1].Sta.getTime() } q = b.Util.replace(q, /\[departureTime\]/, j); q = b.Util.replace(q, /\[arrivalTime\]/, l); q = b.Util.replace(q, /\[flightDesignator\]/, g.FlightDesignator); q = b.Util.replace(q, /\[journeyType\]/, g.JourneyType); e = g.getJourneyDetailsHtml(); q = b.Util.replace(q, /\[journeyDetails\]/, e); o = g.getFareInfoHtml(); q = b.Util.replace(q, /\[fareInfo\]/, o); q = b.Util.replace(q, /\[journeySellKey\]/g, g.SellKey); q = b.Util.replace(q, /\[tripIndex\]/, h); q = b.Util.replace(q, /\[journeyIndex\]/, n); s = "journey" + n; q = b.Util.replace(q, /\[radioButtonIdJourney\]/g, s); f += q } return f }; return d }; b.Class.JourneyDateMarket = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.JourneyFares = []; c.NotForGeneralUse = ""; c.Segments = []; c.ArrivalStation = ""; c.DepartureDate = ""; c.ArrivalDate = ""; c.DepartureStation = ""; c.JourneyType = ""; c.SalesDate = ""; c.SellKey = ""; c.FlightDesignator = ""; c.selected = false; c.updateTripSellKeyArray = null; c.updateItinerarySummary = null; c.updateSelectedJourney = null; c.updateTrips = null; c.journeyDetailsTemplate = {}; c.journeyDetailsTemplateId = "journeyDetailsTemplate"; c.selectedFareKey = ""; c.journeyIndex = 0; c.tripIndex = 0; c.init = function (e) { this.setSettingsByObject(e); this.initSegmentsArray(); this.initJourneyFares(); this.addCodeShareIndicators(); this.initDates(); this.setVars() }; c.initJourneyFares = function () { var g = 0, f = this.JourneyFares || [], e = f.length, h = null; for (g = 0; g < e; g += 1) { h = new b.Class.JourneyPaxFares(); h.updateTripSellKeyArray = this.updateTripSellKeyArray; h.updateItinerarySummary = this.updateItinerarySummary; h.updateSelectedJourney = this.updateSelectedJourney; h.updateSelectedFare = this.updateSelectedFareHandler; h.updateTrips = this.updateTrips; h.init(f[g]); f[g] = h } }; c.initDates = function () { var e = b.Class.STASTD(), f = b.Class.STASTD(); e.init(this.DepartureDate); c.DepartureDate = e; f.init(this.DepartureDate); c.ArrivalDate = f }; c.initSegmentsArray = function () { var g = 0, f = this.Segments || [], e = f.length, h = null; for (g = 0; g < e; g += 1) { h = new b.Class.Segment(); h.init(f[g]); f[g] = h } }; c.setVarsAfterDraw = function (f) { var h = 0, g = this.JourneyFares || [], e = g.length, j = null; for (h = 0; h < e; h += 1) { j = g[h]; j.setVarsAfterDraw(f + "fare" + h) } }; c.journeyInfoJson = function () { var f = this.journeyIndex, l = this.tripIndex, g = [], k = {}, e = [], j = {}, i = {}, h = { tripIndex: l, marketIndex: "0", dateMarketIndex: "0", journeyIndex: f, key: l.toString() + "_0_0_" + f.toString(), activateJourneyId: "activateJourney_" + l + "_" + f, deactivateJourneyId: "deactivateJourney_" + l + "_" + f, journeyContainerId: "journey_" + l + "_" + f }; g = this.Segments; if (g && g.length > 0) { k = g[0]; e = k.Legs; if (e && e.length > 0) { j = e[0]; i = j.LegInfo; if (i) { h.legInfoArray = [{ legIndex: "0", equipmentType: i.EquipmentType, equipmentTypeSuffix: i.EquipmentTypeSuffix, departureStation: k.DepartureStation, arrivalStation: k.ArrivalStation, carrierCode: i.OperatingCarrier, flightNumber: i.OperatingFlightNumber, opSuffix: i.OperatingOpSuffix, marketingCode: "", marketingOverride: false}] } } } return h }; c.addEventsAfterDraw = function () { var g = 0, f = this.JourneyFares || [], e = f.length, j = null, k = new b.Class.JourneyInfo(), h = this.journeyInfoJson(); k.init(h); for (g = 0; g < e; g += 1) { j = f[g]; j.addEventsAfterDraw() } }; c.setVars = function () { this.journeyDetailsTemplate = this.getById(this.journeyDetailsTemplateId) }; c.selectPreselectedFare = function () { var h = false, g = 0, f = [], e = 0, j = null; if (this.selected === true && this.selectedFareKey.length > 0) { g = 0; f = this.JourneyFares || []; e = f.length; j = null; for (g = 0; g < e; g += 1) { j = f[g]; if (j.SellKey === this.selectedFareKey) { j.selected = true; h = true; break } } } return h }; c.hasFares = function () { var g = this.JourneyFares, i = g.length, f, h, e = false; for (f = 0; f < i; f += 1) { h = g[f].JourneyPaxFares || []; if (h.length > 0) { e = true; break } } return e }; c.getLowestFare = function () { var j = 0, f = -1, g = -1, h = this.JourneyFares || [], e = h.length, k = null; for (j = 0; j < e; j += 1) { k = h[j]; if (j === 0) { f = k.getLowestFare(); g = j } else { if (k.getLowestFare < f) { f = k.getLowestFare(); g = j } } if (j === e - 1 && f > -1) { k = h[g]; k.selected = true } } return f }; c.getSelectedPaxFaresIndex = function () { var h = 0, f = -1, g = this.JourneyFares || [], e = g.length, j = null; for (h = 0; h < e; h += 1) { j = g[h]; if (j.selected === true) { f = h; break } } return f }; c.getSelectedPaxFaresSellKey = function () { var h = 0, f = -1, g = this.JourneyFares || [], e = g.length, j = null; for (h = 0; h < e; h += 1) { j = g[h]; if (j.selected === true) { f = j.SellKey; break } } return f }; c.updateSelectedFareHandler = function (e) { c.updateSelectedFare(e) }; c.updateSelectedFare = function (h) { this.deactivateAllFares(); var g = 0, f = this.JourneyFares || [], e = f.length, j = null; for (g = 0; g < e; g += 1) { j = f[g]; if (g === h) { j.selected = true; break } } }; c.deactivateAllFares = function () { var g = 0, f = this.JourneyFares || [], e = f.length, h = null; for (g = 0; g < e; g += 1) { h = f[g]; h.selected = false } }; c.addCodeShareIndicators = function () { var s = this.FlightDesignator || "", f = s.split("/") || [], i = f.length, k = "", o = this.Segments || [], l = o.length, n = {}, m = {}, e = 0, h = [], j = h.length, r = {}, g = {}, p = {}, q = ""; if (i && i === l) { for (e = 0; e < l; e += 1) { k = f[e] || " "; k = k.substring(0, k.length - 1); n = o[e] || {}; m = new b.Class.Segment(); m.init(n); h = n.Legs || []; j = h.length; r = h[0] || {}; g = new b.Class.Leg(); g.init(r); p = r.FlightDesignator || {}; if (p.CarrierCode + p.FlightNumber === k || b.Util.replace(p.FlightNumber, / /g, "") === k) { q = q + k + g.getOperatingDisclosureTypeToolTip() + g.getCodeShareTypeToolTip() + m.getSubjToGovtApprovalSuperscript(); if (l > 1 && l - 1 !== e) { q = q + " /" } } } } c.FlightDesignator = q }; c.getJourneyDetailsHtml = function () { var m = "", e = this.journeyDetailsTemplate.text(), j = this.Segments, k = {}, i = 0, o = [], n = {}, g = {}, h = 0, l = 0, f = 0; if (j) { i = j.length; if (i > 0) { for (l = 0; l < i; l += 1) { k = j[l]; o = k.Legs; if (o) { h = o.length; if (h > 0) { for (f = 0; f < h; f += 1) { n = o[f]; g = new b.Class.Leg(); g.init(n); m += g.getLegHtml() } } } } } } e = b.Util.replace(e, /\[segmentDetails\]/g, m); e = b.Util.replace(e, /\[tripIndex\]/g, this.tripIndex); e = b.Util.replace(e, /\[journeyIndex\]/g, this.journeyIndex); return e }; c.getFareInfoHtml = function () { var j = 0, h = "", f = "", g = this.JourneyFares || [], e = g.length, k = null; for (j = 0; j < e; j += 1) { k = g[j]; h += k.getFareInfoHtml(); f = "fare" + j; h = b.Util.replace(h, /\[radioButtonIdFare\]/g, f) } return h }; return c }; b.Class.JourneyPaxFares = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.JourneyPaxFares = []; d.ClassOfService = ""; d.Amount = ""; d.SellKey = ""; d.journeyFareInfoRadioButtonTemplateId = "journeyFareInfoRadioButtonTemplateId"; d.journeyFareInfoRadioButtonTemplate = null; d.containerId = ""; d.container = null; d.selected = false; d.updateTripSellKeyArray = null; d.updateItinerarySummary = null; d.updateSelectedJourney = null; d.updateSelectedFare = null; d.updateTrips = null; d.init = function (e) { d.setSettingsByObject(e); d.initJourneyPaxFares(); d.setVars() }; d.initJourneyPaxFares = function () { var g = 0, f = this.JourneyPaxFares || [], e = f.length, h = null; for (g = 0; g < e; g += 1) { h = new b.Class.JourneyPaxFare(); h.init(f[g]); f[g] = h } }; d.setVars = function () { this.journeyFareInfoRadioButtonTemplate = this.getById(this.journeyFareInfoRadioButtonTemplateId) }; d.setVarsAfterDraw = function (e) { this.container = this.getById(e) }; d.addEventsAfterDraw = function () { this.container.click(this.fareClickHandler) }; d.fareClickHandler = function (h) { var i = h.target.value, g = -1, e = -1, f = -1; g = h.target.id.match(/trip[0-9]*/); g = g[0].match(/\d+/); g = g[0]; g = parseInt(g, 10); e = h.target.id.match(/journey[0-9]*/); e = e[0].match(/\d+/); e = e[0]; e = parseInt(e, 10); f = h.target.id.match(/fare[0-9]*/); f = f[0].match(/\d+/); f = f[0]; f = parseInt(f, 10); d.updateTripSellKeyArray(g, i); d.updateItinerarySummary(); d.updateSelectedJourney(e); d.updateSelectedFare(f); d.updateTrips() }; d.getLowestFare = function () { var h = 0, g = -1, f = this.JourneyPaxFares || [], e = f.length, j = null; if (e > 0) { for (h = 0; h < e; h += 1) { j = f[h]; if (h === 0 && j.TotalFareAmount > -1) { g = j.TotalFareAmount } else { if (j.TotalFareAmount < g) { g = j.TotalFareAmount } } } } return g }; d.getFareInfoHtml = function () { var h = 0, k = 0, g = "", j = "", f = this.JourneyPaxFares || [], e = f.length, l = null; for (h = 0; h < e; h += 1) { l = f[h]; g = this.journeyFareInfoRadioButtonTemplate.text(); k = b.Util.convertToLocaleCurrency(l.TotalFareAmount); g = b.Util.replace(g, /\[farePrice\]/, k); g = b.Util.replace(g, /\[fareSellKey\]/, this.SellKey); j += g; h = e } return j }; return d }; b.Class.JourneyPaxFare = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.CurrencyCode = ""; c.DiscountedFareAmount = ""; c.Amount = ""; c.PaxType = ""; c.TotalFareAmount = ""; c.PublishedFareAmount = ""; c.PaxDiscountCode = ""; c.init = function (e) { this.setSettingsByObject(e) }; return c }; b.Class.Segment = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.ArrivalStation = ""; d.Sta = ""; d.DepartureStation = ""; d.Std = ""; d.FlightDesignator = null; d.fullDateFormatString = "D, M dd, yy"; d.Legs = {}; d.init = function (e) { this.setSettingsByObject(e); this.initSta(); this.initStd(); this.initFlightDesignator() }; d.initFlightDesignator = function () { var e = b.Class.FlightDesignator(); e.init(this.FlightDesignator); d.FlightDesignator = e }; d.initSta = function () { var e = b.Class.STASTD(); e.init(this.Sta); this.Sta = e }; d.initStd = function () { var e = b.Class.STASTD(); e.init(this.Std); this.Std = e }; d.getSubjToGovtApprovalSuperscript = function () { var k = this.Legs || [], f = k.length, h = 0, j = {}, g = "subjToGovtApprovalToolTipTemplate", e = ""; for (h = 0; h < f; h += 1) { j = k[h].LegInfo || {}; if (j.SubjectToGovtApproval === "True") { e = this.getById(g).text(); break } } return e }; return d }; b.Class.Leg = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.legTemplateId = "legDetailsTemplate"; d.legTemplate = null; d.layoverTimeTemplateId = "layoverTimeTemplate"; d.layoverTimeTemplate = null; d.optCarrierInfoTemplateId = "optCarrierDisclosureTemplate"; d.optCarrierInfoTemplate = null; d.ArrivalStation = ""; d.DepartureStation = ""; d.FlightDesignator = {}; d.Sta = {}; d.Std = {}; d.OperationsInfo = {}; d.LegInfo = {}; d.TravelTime = {}; d.LayoverTime = {}; d.fullDateFormatString = "D, M dd, yy"; d.init = function (e) { this.setSettingsByObject(e); this.initSta(); this.initStd(); this.initFlightDesignator(); this.setVars() }; d.setVars = function () { this.legTemplate = this.getById(this.legTemplateId); this.layoverTimeTemplate = this.getById(this.layoverTimeTemplateId); this.optCarrierInfoTemplate = this.getById(this.optCarrierInfoTemplateId) }; d.initFlightDesignator = function () { var e = b.Class.FlightDesignator(); e.init(this.FlightDesignator); d.FlightDesignator = e }; d.initSta = function () { var e = b.Class.STASTD(); e.init(this.Sta); d.Sta = e }; d.initStd = function () { var e = b.Class.STASTD(); e.init(this.Std); d.Std = e }; d.getLayoverTimeHtml = function () { var g = "", h = this.LayoverTime, e = h.Hours, f = h.Minutes; if (e > 0 || f > 0) { g = this.layoverTimeTemplate.text(); g = b.Util.replace(g, /\[layoverTimeHours\]/g, e); g = b.Util.replace(g, /\[layoverTimeMinutes\]/g, f) } return g }; d.getLegHtml = function () { var j = this.legTemplate.text(), l = this.FlightDesignator, f = l.CarrierCode, g = b.Resource || {}, k = g.carrierHash[f] || {}, e = k.name || "", m = g.stationHash, o = this.DepartureStation, n = m[o].name, i = this.ArrivalStation, h = m[i].name; j = b.Util.replace(j, /\[carrierName\]/g, e); j = b.Util.replace(j, /\[flightNumber\]/g, l.FlightNumber); j = b.Util.replace(j, /\[departureDate\]/, $.datepicker.formatDate(this.fullDateFormatString, this.Std.date)); j = b.Util.replace(j, /\[departureStation\]/g, n); j = b.Util.replace(j, /\[departureTime\]/g, this.Std.getTime()); j = b.Util.replace(j, /\[arrivalStation\]/g, h); j = b.Util.replace(j, /\[arrivalTime\]/g, this.Sta.getTime()); j = b.Util.replace(j, /\[travelTimeHours\]/g, this.TravelTime.Hours); j = b.Util.replace(j, /\[travelTimeMinutes\]/g, this.TravelTime.Minutes); j = b.Util.replace(j, /\[layoverTime\]/g, this.getLayoverTimeHtml()); j = b.Util.replace(j, /\[optDisclosureSymbol\]/g, this.getOperatingInfoSymbol()); j = b.Util.replace(j, /\[optDisclosureType\]/g, this.getCodeShareSymbol()); j = b.Util.replace(j, /\[optCarrierDisclosure\]/g, this.getOptDisclosureText()); return j }; d.getOptDisclosureText = function () { var e = this.optCarrierInfoTemplate || "", g = this.LegInfo || {}, f = b.Resource || {}, m = g.OperatingCarrier || "", h = f.carrierHash[m] || {}, j = h.name || m, l = g.OperatingFlightNumber, k = l.length, i = ""; if (m) { i = g.OperatedByText; if (!i && j) { i = e.text(); i = b.Util.replace(i, /\[optCarrierName\]/g, j); i = b.Util.replace(i, /\[optCarrierCode\]/g, m); i = b.Util.replace(i, /\[optFlightNumber\]/g, l); if (!l || (k > 0 && l.charAt(k - 1) === " ")) { i = i.substring(0, i.indexOf("[")) } else { i = b.Util.replace(i, /\[/g, ""); i = b.Util.replace(i, /\]/g, "") } } } return i }; d.getOperatingInfoSymbol = function () { var g = this.LegInfo || {}, e = g.OperatingCarrier || "", f = ""; if (e) { f = String.fromCharCode(42) } return f }; d.getCodeShareSymbol = function () { var g = this.LegInfo || {}, f = g.CodeShareIndicator || "", e = ""; if (f.toUpperCase() === "L") { e = String.fromCharCode(8225) } if (f.toUpperCase() === "S") { e = String.fromCharCode(8224) } return e }; d.getCodeShareTypeToolTip = function () { var h = this.LegInfo || {}, f = h.CodeShareIndicator || "", e = "", g = "codeShareToolTipTemplate", i = "wetLeaseToolTipTemplate"; if (f.toUpperCase() === "L") { e = this.getById(g).text() } if (f.toUpperCase() === "S") { e = this.getById(i).text() } return e }; d.getOperatingDisclosureTypeToolTip = function () { var h = this.LegInfo || {}, e = h.OperatingCarrier || "", i = this.getOptDisclosureText() || "", g = "diclosureTypeToolTipTemplate", f = ""; if (e && i) { f = this.getById(g).text(); f = b.Util.replace(f, /\[disclosureTitle\]/g, i) } return f }; return d }; b.Class.FlightDesignator = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.CarrierCode = ""; c.FlightNumber = ""; c.init = function (e) { this.setSettingsByObject(e) }; c.getFlightDesignator = function () { return this.CarrierCode + " " + this.FlightNumber }; return c }; b.Class.STASTD = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.Day = ""; c.Month = ""; c.Hour = ""; c.Minute = ""; c.Second = ""; c.Year = ""; c.date = null; c.init = function (e) { this.setSettingsByObject(e); this.initDateTime() }; c.initDateTime = function () { this.date = new Date(); this.date.setHours(this.Hour, this.Minute, this.Second, 0); this.date.setFullYear(this.Year, this.Month - 1, this.Day) }; c.getTime = function () { var e = b.Util.getTime(this.Hour, this.Minute); return e }; return c }; b.Class.TripPlannerItinerarySummarySelect = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.containerId = ""; c.container = null; c.sellKeysId = "summaryTripPlannerSellKeys"; c.sellKeys = null; c.ErrorsOccurred = ""; c.Booking = null; c.itineraryResponse = null; c.drawSelectViewItinerarySummary = null; c.url = "TripPlannerItinerarySummaryAjax-resource.aspx"; c.init = function (e) { this.setSettingsByObject(e); this.setVars() }; c.setVars = function () { c.container = this.getById(this.containerId); c.sellKeys = this.getById(this.sellKeysId) }; c.initBooking = function (f, e, g) { c.Booking = new b.Class.Booking(); this.Booking.init(f); this.Booking.initBookingPricing(e); this.Booking.initAllPassengerFees(g); c.Booking.AllPassengerFees = this.Booking.AllPassengerFees.AllPassengerFees }; c.addEventsAfterItinerarySummaryDraw = function () { var h = $("[id^='journeyPricingDetails_']"), j = 0, l = null, k = h || [], e = k.length, g = null, f = {}; for (j = 0; j < e; j += 1) { g = k[j]; l = new b.Class.ToggleView(); f = { elementId: "journeyPricingDetails_" + j, hideId: "journeyTotalPrice_" + j, showId: "journeyTotalPrice_" + j }; l.init(f); l.updateHide() } }; c.updateItinerarySummaryInfoHandler = function (e) { c.updateItinerarySummaryInfo(e) }; c.updateItinerarySummaryInfo = function (h) { var f = $(h), e = f.html(), g = b.Json.parse(e); this.initBooking(g.Booking, g.BookingPricing, g.AllPassengerFees); if (g.ErrorsOccurred === 0) { if (this.drawSelectViewItinerarySummary !== null) { this.drawSelectViewItinerarySummary(); this.addEventsAfterItinerarySummaryDraw() } } }; c.getPriceItineraryResponse = function (e) { this.sellKeys.val(e); $.post(this.url, { "ItinerarySummary.JourneyFareSellKeys": e }, this.updateItinerarySummaryInfoHandler) }; c.getSelectViewItineraryJourneysHtml = function () { if (this.Booking !== null) { return this.Booking.getSelectViewItineraryJourneysHtml() } else { return "" } }; c.getSelectViewItineraryAllPassengerFeesHtml = function () { if (this.Booking !== null) { return this.Booking.getSelectViewItineraryAllPassengerFeesHtml() } else { return "" } }; return c }; b.Class.TripPlannerItinerarySummaryConfirm = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.containerId = "itinerarySummaryInfoContainer"; d.container = null; d.ErrorsOccurred = ""; d.Booking = null; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.initBooking(e); this.Booking.drawConfirmView() }; d.setVars = function () { d.container = this.getById(this.containerId) }; d.initBooking = function (e) { this.Booking = new b.Class.Booking(); this.Booking.init(e.Booking); this.Booking.initBookingPricing(e.BookingPricing) }; d.updateItinerarySummaryInfo = function () { }; return d }; b.Class.Booking = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.containerId = "itinerarySummaryInfoContainer"; c.container = null; c.itinerarySummaryLeftViewTableTemplateId = "tripPlannerItinerarySummaryLeftViewTableTemplate"; c.itinerarySummaryLeftViewTableTemplate = null; c.itinerarySummaryLeftViewFinalTableTemplateId = "tripPlannerItinerarySummaryLeftViewFinalTableTemplate"; c.itinerarySummaryLeftViewFinalTableTemplate = null; c.itineraryJourneyInfoTemplateId = "itineraryJourneyInfoTemplate"; c.itineraryJourneyInfoTemplate = null; c.itineraryJourneyInfoStripedTemplateId = "itineraryJourneyInfoStripedTemplate"; c.itineraryJourneyInfoStripedTemplate = null; c.journeyItinerarySummaryInfoTemplateId = "journeyItinerarySummaryInfoTemplate"; c.allPassengerFeesItinerarySummaryInfoTemplateId = "allPassengerFeesItinerarySummaryInfoTemplate"; c.journeyItinerarySummaryInfoTemplate = null; c.journeyPricingHtmlTemlateId = "journeyPricingHtmlTemlate"; c.journeyPricingHtmlTemlate = null; c.RecordLocators = []; c.TypeOfSale = null; c.ReceivedBy = null; c.Payments = null; c.Passengers = []; c.BookingSum = null; c.BookingInfo = null; c.CurrencyCode = ""; c.GroupName = ""; c.Journeys = []; c.TotalPrice = 0; c.BookingPricing = null; c.fullDateFormatString = "D, M dd, yy"; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.initJourneysArray(); this.initPassengersArray() }; c.setVars = function () { this.container = this.getById(this.containerId); this.itinerarySummaryLeftViewTableTemplate = this.getById(this.itinerarySummaryLeftViewTableTemplateId); this.itinerarySummaryLeftViewFinalTableTemplate = this.getById(this.itinerarySummaryLeftViewFinalTableTemplateId); this.itineraryJourneyInfoTemplate = this.getById(this.itineraryJourneyInfoTemplateId); this.itineraryJourneyInfoStripedTemplate = this.getById(this.itineraryJourneyInfoStripedTemplateId); this.journeyItinerarySummaryInfoTemplate = this.getById(this.journeyItinerarySummaryInfoTemplateId); this.allPassengerFeesItinerarySummaryInfoTemplate = this.getById(this.allPassengerFeesItinerarySummaryInfoTemplateId); this.journeyPricingHtmlTemlate = this.getById(this.journeyPricingHtmlTemlateId) }; c.initJourneysArray = function () { var f = 0, h = this.Journeys || [], e = h.length, g = null; for (f = 0; f < e; f += 1) { g = new b.Class.JourneyDateMarket(); g.init(h[f]); h[f] = g } }; c.initPassengersArray = function () { var g = 0, f = this.Passengers || [], e = f.length, h = null; for (g = 0; g < e; g += 1) { h = new b.Class.Passenger(); h.init(f[g]); f[g] = h } }; c.initBookingSum = function () { var e = this.BookingSum; this.BookingSum = new b.Class.BookingSum(); this.BookingSum.init(e) }; c.initBookingPricing = function (e) { this.BookingPricing = new b.Class.BookingPricing(); this.BookingPricing.init(e) }; c.initAllPassengerFees = function (e) { this.AllPassengerFees = new b.Class.AllPassengerFees(); this.AllPassengerFees.init(e) }; c.getSelectViewItineraryJourneysHtml = function () { var l = 0, n = "", e = "", s = "", t = "", r = "", q = "", u = 0, p = 0, k = this.Journeys || [], o = k.length, f = null, g = "", j = "", m = [], h = -1; for (l = 0; l < o; l += 1) { f = k[l]; if (l % 2 !== 0) { e = this.itineraryJourneyInfoTemplate.text() } else { e = this.itineraryJourneyInfoStripedTemplate.text() } s = this.journeyItinerarySummaryInfoTemplate.text(); s = b.Util.replace(s, /\[journeyNumber\]/, l + 1); s = b.Util.replace(s, /\[journeyIndex\]/g, l); q = $.datepicker.formatDate(c.fullDateFormatString, f.DepartureDate.date); s = b.Util.replace(s, /\[journeyDate\]/, q); s = b.Util.replace(s, /\[stationPair\]/, f.DepartureStation + " to " + f.ArrivalStation); s = b.Util.replace(s, /\[flightDesignator\]/, f.FlightDesignator); m = f.Segments; if (m && m.length && m.length > 0) { h = m.length; g = m[0].Std.getTime(); j = m[h - 1].Sta.getTime() } s = b.Util.replace(s, /\[deptArriveTimes\]/, g + " to " + j); u = b.Util.convertToLocaleCurrency(c.BookingPricing.JourneyPricingList[l].JourneyTotalPrice); s = b.Util.replace(s, /\[journeyTotalPrice\]/, u); t = this.journeyPricingHtmlTemlate.text(); r = c.BookingPricing.JourneyPricingList[l].getSelectViewPassengerPricingHtml(); t = b.Util.replace(t, /\[passengerPricingDetails\]/, r); p = b.Util.convertToLocaleCurrency(c.BookingPricing.JourneyPricingList[l].TotalTaxAndFee); t = b.Util.replace(t, /\[taxesAndFeesDetails\]/, p); s = b.Util.replace(s, /\[pricingDetails\]/, t); e = b.Util.replace(e, /\[journeyDetails\]/, s); n += e } return n }; c.getSelectViewItineraryAllPassengerFeesHtml = function () { var g = 0, h = "", f = "", n = "", m = this.AllPassengerFees || [], k = m.length, e = {}, j = "", l = ""; for (g = 0; g < k; g += 1) { e = m[g]; j = e.FeeType; l = e.Total; if (g % 2 !== 0) { f = this.itineraryJourneyInfoTemplate.text() } else { f = this.itineraryJourneyInfoStripedTemplate.text() } n = this.allPassengerFeesItinerarySummaryInfoTemplate.text(); l = b.Util.convertToLocaleCurrency(l); n = b.Util.replace(n, /\[feeType\]/, j); n = b.Util.replace(n, /\[total\]/, l); f = b.Util.replace(f, /\[journeyDetails\]/, n); h += f } return h }; c.drawConfirmView = function () { var n = 0, r = 0, s = 0, h = 0, p = "", l = 0, e = "", j = "", o = "", g = "", k = "", m = this.Journeys || [], q = m.length, f = null; for (n = 0; n < q; n += 1) { f = m[n]; if (n === q - 1) { g = this.itinerarySummaryLeftViewFinalTableTemplate.text() } else { g = this.itinerarySummaryLeftViewTableTemplate.text() } g = b.Util.replace(g, /\[flightIndex\]/, n + 1); g = b.Util.replace(g, /\[deptDate\]/, f.DepartureDate.date.toDateString()); g = b.Util.replace(g, /\[deptStation\]/, f.DepartureStation); g = b.Util.replace(g, /\[arriveStation\]/, f.ArrivalStation); g = b.Util.replace(g, /\[flightDesignator\]/, f.FlightDesignator); if (f.Segments && f.Segments.length && f.Segments[0].Std && f.Segments[f.Segments.length - 1].Sta) { p = f.Segments; l = f.Segments.length; e = f.Segments[0].Std; j = f.Segments[l - 1].Sta; g = b.Util.replace(g, /\[departureTime\]/, e.getTime()); g = b.Util.replace(g, /\[arrivalTime\]/, j.getTime()) } g = b.Util.replace(g, /\[classPricing\]/, f.JourneyFares[0].ClassOfService); k = c.BookingPricing.JourneyPricingList[n].getConfirmViewPassengerPricingHtml(); s = b.Util.convertToLocaleCurrency(c.BookingPricing.TotalBookingPrice); g = b.Util.replace(g, /\[bookingTotalPrice\]/, s); h = b.Util.convertToLocaleCurrency(c.BookingPricing.JourneyPricingList[n].JourneyTotalPrice); g = b.Util.replace(g, /\[totalJourneyPrice\]/, h); g = b.Util.replace(g, /\[passengersPricing\]/, k); r = b.Util.convertToLocaleCurrency(c.BookingPricing.JourneyPricingList[n].TotalTaxAndFee); g = b.Util.replace(g, /\[totalTaxesAndFees\]/, r); g = b.Util.replace(g, /\[currencyName\]/, c.BookingPricing.CurrencyDescription); o += g } this.container.html(o) }; return c }; b.Class.BookingPricing = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.TotalBookingPrice = 0; d.JourneyPricingList = []; d.CurrencyCode = ""; d.CurrencyDescription = ""; d.DisplayPrefix = ""; d.DisplaySuffix = ""; d.init = function (e) { this.setSettingsByObject(e); this.initJourneyPricingListArray() }; d.initJourneyPricingListArray = function () { var f = 0, g = this.JourneyPricingList || [], e = g.length, h = null; for (f = 0; f < e; f += 1) { h = new b.Class.JourneyPricingInfo(); h.init(g[f]); g[f] = h } }; return d }; b.Class.JourneyPricingInfo = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.JourneyTotalPrice = 0; d.TotalTaxAndFee = 0; d.JourneyPassengerPriceInfoList = []; d.journeyPassengerPricingHtmlTemplateId = "journeyPassengerPricingHtmlTemplate"; d.journeyPassengerPricingHtmlTemplate = null; d.confirmViewPassengerPriceInfoTemplateId = "confirmViewPassengerPriceInfoTemplate"; d.confirmViewPassengerPriceInfoTemplate = null; d.init = function (e) { this.setSettingsByObject(e); this.setVars() }; d.setVars = function () { this.journeyPassengerPricingHtmlTemplate = this.getById(this.journeyPassengerPricingHtmlTemplateId); this.confirmViewPassengerPriceInfoTemplate = this.getById(this.confirmViewPassengerPriceInfoTemplateId) }; d.initJourneyPassengerPriceInfoList = function () { var g = 0, f = this.JourneyPassengerPriceInfoList || [], e = f.length, h = null; for (g = 0; g < e; g += 1) { h = new b.Class.JourneyPricingInfo(); h.init(f[g]); f[g] = h } }; d.getSelectViewPassengerPricingHtml = function () { var j = 0, h = "", l = "", f = 0, g = this.JourneyPassengerPriceInfoList || [], e = g.length, k = null; for (j = 0; j < e; j += 1) { k = g[j]; h = this.journeyPassengerPricingHtmlTemplate.text(); h = b.Util.replace(h, /\[paxType\]/, k.PassengerType); f = b.Util.convertToLocaleCurrency(k.PassengerPrice); h = b.Util.replace(h, /\[passengerPrice\]/g, f); l += h } return l }; d.getConfirmViewPassengerPricingHtml = function () { var j = 0, h = "", l = "", f = 0, g = this.JourneyPassengerPriceInfoList || [], e = g.length, k = null; for (j = 0; j < e; j += 1) { k = g[j]; h = this.confirmViewPassengerPriceInfoTemplate.text(); h = b.Util.replace(h, /\[paxType\]/, k.PassengerType); f = b.Util.convertToLocaleCurrency(k.PassengerPrice); h = b.Util.replace(h, /\[passengerPrice\]/g, f); l += h } return l }; return d }; b.Class.JourneyPassengerPriceInfo = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.PassengerType = ""; c.PassengerPrice = 0; c.init = function (e) { this.setSettingsByObject(e) }; return c }; b.Class.AllPassengerFees = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.AllPassengerFees = []; c.init = function (h) { var g = 0, f = 0, e; c.AllPassengerFees = h || []; f = this.AllPassengerFees.length; for (g = 0; g < f; g += 1) { e = new b.Class.PassengerFee(); e.init(this.AllPassengerFees[g]); this.AllPassengerFees[g] = e } }; return c }; b.Class.PassengerFee = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.FeeType = ""; c.Total = 0; c.init = function (e) { this.setSettingsByObject(e) }; return c }; b.Class.BookingSum = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.BalanceDue = ""; c.PassiveSegmentCount = 0; c.SegmentCount = 0; c.TotalCost = ""; c.init = function (e) { this.setSettingsByObject(e) }; return c }; b.Class.Passenger = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.CustomerNumer = -1; d.FamilyNumber = -1; d.Infant = null; d.Name = null; d.PassengerAddresses = []; d.PassengerBags = []; d.PassengerFees = []; d.PassengerId = -1; d.PassengerInfo = null; d.PassengerNumber = -1; d.PassengerProgram = null; d.PassengerTravelDocuments = []; d.PassengerTypeInfo = null; d.init = function (e) { this.setSettingsByObject(e) }; return d }; b.Class.PassengerTypeInfo = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.PaxType = ""; d.Dob = null; d.init = function (e) { this.setSettingsByObject(e) }; return d }; b.Class.TripPlannerFareRules = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.containerId = "tripPlannerFareRules"; d.container = null; d.tripFareRuleTemplateId = "tripPlannerFareRuleTemplate"; d.tripFareRuleTemplate = null; d.fareRulesFormattedList = []; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.draw() }; d.setVars = function () { d.container = this.getById(this.containerId); d.tripFareRuleTemplate = this.getById(this.tripFareRuleTemplateId) }; d.draw = function () { var g = 0, f = "", j = "", h = this.fareRulesFormattedList || [], e = h.length, k = null; for (g = 0; g < e; g += 1) { k = h[g]; j = this.tripFareRuleTemplate.text(); j = b.Util.replace(j, /\[tripNumber\]/g, g + 1); j = b.Util.replace(j, /\[fareRule\]/, b.Util.decodeUriComponent(k)); f += j } this.container.html(f) }; return d }; b.Class.TripPlannerHelp = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.containerId = "tripPlannerHelpLink"; c.container = null; c.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; c.setVars = function () { this.container = this.getById(this.containerId) }; c.addEvents = function () { this.addHelp() }; c.addHelp = function () { var f = new b.Class.ToggleView(), e = { elementId: "tripPlannerHelp", hideId: "tripPlannerHelpLink", showId: "tripPlannerHelpLink" }; f.init(e); f.updateHide() }; return c }; b.Class.LoyaltyHistoryList = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.loyaltyTransactionList = {}; d.startDateId = ""; d.startDateDayId = ""; d.startDateMonthYearId = ""; d.startDate = null; d.startDateDay = null; d.startDateMonthYear = null; d.endDateId = ""; d.endDateDayId = ""; d.endDateMonthYearId = ""; d.endDate = ""; d.endDateDay = ""; d.endDateMonthYear = ""; d.filterButtonId = ""; d.filterButton = null; d.pageSizeId = ""; d.pageSizeDom = null; d.currentPageId = ""; d.currentPageDom = null; d.yearRange = ""; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.initFilterDates(); this.addEvents() }; d.setVars = function () { this.startDate = this.getById(this.startDateId); this.startDateDay = this.getById(this.startDateDayId); this.startDateMonthYear = this.getById(this.startDateMonthYearId); this.endDate = this.getById(this.endDateId); this.endDateDay = this.getById(this.endDateDayId); this.endDateMonthYear = this.getById(this.endDateMonthYearId); this.pageSizeDom = this.getById(this.pageSizeId); this.currentPageDom = this.getById(this.currentPageId); this.filterButton = this.getById(this.filterButtonId) }; d.addEvents = function () { this.filterButton.click(this.updateFilterHandler); this.startDateDay.change(this.updateFilterHandler); this.startDateMonthYear.change(this.updateFilterHandler); this.endDateDay.change(this.updateFilterHandler); this.endDateMonthYear.change(this.updateFilterHandler) }; d.initFilterDates = function () { var e = b.Util.parseIsoDate(this.loyaltyTransactionList.startDate), f = b.Util.parseIsoDate(this.loyaltyTransactionList.endDate); this.populateDay(this.startDateDay, e.getDate()); this.populateDay(this.endDateDay, f.getDate()); this.populateMonthYear(this.startDateMonthYear, e.getFullYear(), (e.getMonth() + 1)); this.populateMonthYear(this.endDateMonthYear, f.getFullYear(), (f.getMonth() + 1)); this.populateHiddenDateFields() }; d.formatDateValue = function (f) { var e = f.toString(); if (e.length === 1) { e = "0" + e } return e }; d.populateDay = function (g, j) { var f = 0, h = [], e = {}; for (f = 1; f <= 31; f += 1) { h[f] = { code: this.formatDateValue(f), name: f} } e = { selectBox: g, objectArray: h, selectedItem: this.formatDateValue(j) }; b.Util.populateSelect(e) }; d.populateMonthYear = function (j, o, g) { var m = 0, h = 0, f = new Date(), k = f.getFullYear(), p = 2, n = [], e = {}, i = 0, l = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]; k = k - p; for (m = p * -1; m <= p; m += 1) { for (h = 1; h <= 12; h += 1) { n[i] = { code: k + "-" + this.formatDateValue(h), name: l[h - 1] + " " + k }; i += 1 } k += 1 } e = { selectBox: j, objectArray: n, selectedItem: o + "-" + this.formatDateValue(g) }; b.Util.populateSelect(e) }; d.updateFilterHandler = function () { d.populateHiddenDateFields() }; d.populateHiddenDateFields = function () { var f = this.startDateMonthYear.val() + "-" + this.startDateDay.val(), e = this.endDateMonthYear.val() + "-" + this.endDateDay.val(); this.startDate.val(f); this.endDate.val(e); this.pageSizeDom.val(this.loyaltyTransactionList.pageSize) }; return d }; b.Class.PaymentPassThroughContent = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.noOfYearsToAdd = 7; d.index = {}; d.vendor = {}; d.passThroughPaymentFields = {}; d.paymentInput = {}; d.useSameCardCheckId = ""; d.useSameCardCheck = {}; d.ccTypeId = ""; d.ccType = {}; d.ccNumberId = ""; d.ccNumber = {}; d.ccExpirationMonthId = ""; d.ccExpirationMonth = {}; d.ccExpirationYearId = ""; d.ccExpirationYear = {}; d.ccExpirationDateId = ""; d.ccExpirationDate = {}; d.ccHolderNameId = ""; d.ccHolderName = {}; d.ccCvvId = ""; d.ccCvv = {}; d.ccIssueNumberId = ""; d.ccIssueNumber = {}; d.requiredNameErrorText = ""; d.requiredCvvErrorText = ""; d.requiredExpMonthErrorText = ""; d.requiredExpYearErrorText = ""; d.requiredCCNumErrorText = ""; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.populateCreditCardTypes(); this.populateExpirationMonthYear(); this.setPaymentPassThroughValidationFields(); this.updateIssueNumberVisibility(); this.addEvents() }; d.setVars = function () { var e = this.index, f = this.passThroughPaymentFields || {}; d.ccCvvId = b.Util.replace(f.ccCvvId, /\[index\]/g, e); d.ccExpirationDateId = b.Util.replace(f.ccExpirationDateId, /\[index\]/g, e); d.ccExpirationMonthId = b.Util.replace(f.ccExpirationMonthId, /\[index\]/g, e); d.ccExpirationYearId = b.Util.replace(f.ccExpirationYearId, /\[index\]/g, e); d.ccHolderNameId = b.Util.replace(f.ccHolderNameId, /\[index\]/g, e); d.ccNumberId = b.Util.replace(f.ccNumberId, /\[index\]/g, e); d.ccTypeId = b.Util.replace(f.ccTypeId, /\[index\]/g, e); d.ccIssueNumberId = b.Util.replace(f.ccIssueNumberId, /\[index\]/g, e); d.useSameCardCheckId = b.Util.replace(f.useSameCardCheckId, /\[index\]/g, e); d.requiredCvvErrorText = f.requiredCvvErrorText; d.requiredNameErrorText = f.requiredNameErrorText; d.requiredExpMonthErrorText = f.requiredExpMonthErrorText; d.requiredExpYearErrorText = f.requiredExpYearErrorText; d.requiredCCNumErrorText = f.requiredCCNumErrorText; d.ccCvv = this.getById(this.ccCvvId); d.ccExpirationDate = this.getById(this.ccExpirationDateId); d.ccExpirationMonth = this.getById(this.ccExpirationMonthId); d.ccExpirationYear = this.getById(this.ccExpirationYearId); d.ccHolderName = this.getById(this.ccHolderNameId); d.ccNumber = this.getById(this.ccNumberId); d.ccType = this.getById(this.ccTypeId); d.ccIssueNumber = this.getById(this.ccIssueNumberId); d.useSameCardCheck = this.getById(this.useSameCardCheckId); this.updateUseSameCardVisibility() }; d.updateUseSameCardVisibility = function () { var e = this.getTrimmedPaymentInputCardType(), j = this.vendor || {}, i = j.acceptedPaymentTypesHash || {}, g = this.useSameCardCheck || {}, f = this.useSameCardCheckId || "", h = $('label[for="' + f + '"]'); if (i[e]) { g.show(); h.show() } else { g.hide(); h.hide() } }; d.populateCreditCardTypes = function () { var f = this.vendor || {}, e = { input: this.ccType, objectArray: f.acceptedPaymentTypes }; b.Util.populate(e) }; d.populateExpirationMonthYear = function () { var j = 0, e = new Date(), k = e.getFullYear(), l = 1, h = this.noOfYearsToAdd || 7, f = {}, g = [], n = {}, m = []; for (j = 0; j <= h; j += 1) { g[j] = { code: k, name: k }; k += 1 } f = { input: this.ccExpirationYear, objectArray: g }; b.Util.populate(f); for (j = 0; j < 9; j += 1) { m[j] = { code: "0" + l, name: "0" + l }; l += 1 } for (j = l - 1; j < 12; j += 1) { m[j] = { code: l, name: l }; l += 1 } n = { input: this.ccExpirationMonth, objectArray: m }; b.Util.populate(n) }; d.updatePaymentPassThroughExpirationDateHandler = function () { d.updatePaymentPassThroughExpirationDate() }; d.updatePaymentPassThroughExpirationDate = function () { var f = "", e = ""; f = this.ccExpirationMonth.val(); e = this.ccExpirationYear.val(); if (f && e) { this.ccExpirationDate.val(f + "/" + e) } }; d.autoPopulateFieldsFromPaymentInputHandler = function () { if (this.checked) { d.populateFieldsFromPaymentInput() } d.updatePaymentPassThroughExpirationDate(); d.setPaymentPassThroughValidationFields(); d.updateIssueNumberVisibility() }; d.getTrimmedPaymentInputCardType = function () { var f = this.paymentInput.paymentInputCreditCardType.val() || "", e = b.Util.replace(f, /ExternalAccount:/, ""); return e }; d.populateFieldsFromPaymentInput = function () { var e = this.getTrimmedPaymentInputCardType(), f = this.paymentInput || {}, i = this.vendor || {}, h = i.acceptedPaymentTypesHash || {}, g = h[e] || {}; if (e) { this.ccType.val(e); this.ccNumber.val(f.paymentInputCreditCardNumber.val()); this.ccExpirationYear.val(f.paymentInputCreditCardExpirationYear.val()); this.ccExpirationMonth.val(f.paymentInputCreditCardExpirationMonth.val()); this.ccHolderName.val(f.paymentInputCreditCardHolderName.val()); this.ccCvv.val(f.paymentInputCreditCardCvv.val()); if (g.supportsIssueNumber) { this.ccIssueNumber.val(f.paymentInputCreditCardIssueNumber.val()) } else { this.ccIssueNumber.val("") } } }; d.setPaymentPassThroughValidationFieldsHandler = function () { d.setPaymentPassThroughValidationFields() }; d.setPaymentPassThroughValidationFields = function () { var h = this.ccType, k = h.val() || "", q = this.ccNumber, i = this.ccHolderName, j = this.ccCvv, o = this.ccExpirationYear, l = this.ccExpirationMonth, n = this.vendor || {}, p = n.acceptedPaymentTypesHash || {}, m = p[k] || { requiresCCType: true }, f = b.Util.setRequiredAttribute, e = b.Util.removeRequiredAttribute, g = ""; e(h); if (m.requiresCCType) { g = this.requiredCCTypeErrorText; f(h, g) } e(q); if (m.requiresCCNum) { g = this.requiredCCNumErrorText; f(q, g) } e(i); if (m.requiresCcName) { g = this.requiredNameErrorText; f(i, g) } e(j); if (m.requiresCvv) { g = this.requiredCvvErrorText; f(j, g) } e(l); if (m.requiresDate) { g = this.requiredExpMonthErrorText; f(l, g) } e(o); if (m.requiresDate) { g = this.requiredExpYearErrorText; f(o, g) } }; d.updateIssueNumberVisibilityHandler = function () { d.updateIssueNumberVisibility() }; d.updateIssueNumberVisibility = function () { var f = this.ccType.val() || "", k = this.vendor || {}, j = k.acceptedPaymentTypesHash || {}, g = j[f] || {}, i = this.ccIssueNumber || {}, e = this.ccIssueNumberId || "", h = $('label[for="' + e + '"]'); if (g.supportsIssueNumber) { h.show(); i.show() } else { i.hide(); h.hide(); i.val("") } }; d.addEvents = function () { this.ccExpirationMonth.change(this.updatePaymentPassThroughExpirationDateHandler); this.ccExpirationYear.change(this.updatePaymentPassThroughExpirationDateHandler); this.ccType.change(this.setPaymentPassThroughValidationFieldsHandler); this.ccType.change(this.updateIssueNumberVisibilityHandler); this.useSameCardCheck.click(this.autoPopulateFieldsFromPaymentInputHandler) }; return d }; b.Class.OrderItem = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.vendorCode = ""; c.init = function (e) { this.setSettingsByObject(e) }; return c }; b.Class.VendorPaymentType = function () { var c = new b.Class.SkySales(), d = b.Util.extendObject(c); d.code = ""; d.name = ""; d.requiresCvv = false; d.requiresDate = false; d.requiresCcName = false; d.requiresCCNum = true; d.supportsIssueNumber = false; d.init = function (e) { this.setSettingsByObject(e) }; return d }; b.Class.Property = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.propertyFieldHash = {}; c.init = function (e) { this.setSettingsByObject(e); this.setVars() }; c.setVars = function () { var t = b.Class.Property.validationHash || {}, f = "", s = null, h = this.propertyFieldHash, l = "", k = null, g = [], o = 0, q = 0, r = null, e = "", p = "", n = {}, m = {}, j = ""; for (l in h) { if (h.hasOwnProperty(l)) { g = h[l] || []; q = g.length; for (o = 0; o < q; o += 1) { k = {}; r = g[o]; f = r.id || ""; k.id = f; s = k.input; s = this.getById(f); s = s[0]; k.propertyHash = {}; t = r.propertyHash || {}; if (s) { for (e in t) { if (t.hasOwnProperty(e)) { p = e.toLowerCase(); n = t[e]; m = $(s); j = p + ".validation"; m.data(j, n); if (p === "required") { b.Util.formatInputLabel(m) } } } } } } } }; return c }; b.Class.Property.validationHash = {}; b.Class.MCCInput = function () { var c = b.Class.SkySales(), e = b.Util.extendObject(c), d = b.Util.getResource(); e.bookingCurrencyCode = ""; e.externalRateId = ""; e.defaultCurrencyValue = ""; e.dropDownListCurrencyId = ""; e.dropDownListCurrency = null; e.externalRateInfo = d.externalRateInfo; e.currencyHash = d.currencyHash; e.setVars = function () { e.dropDownListCurrency = this.getById(this.dropDownListCurrencyId) }; e.populateCurrency = function () { var l = this.externalRateInfo.ExternalRateList, i = "", k = [], h = null, g = null, f = {}, j = "", m = {}; if (this.bookingCurrencyCode && this.dropDownListCurrency) { for (i in l) { if (l.hasOwnProperty(i)) { h = l[i]; if (h.quotedCurrency === this.bookingCurrencyCode) { g = this.currencyHash[h.collectedCurrency]; if (g) { h.name = g.name } else { h.name = h.collectedCurrency } k[k.length] = h } } } g = this.currencyHash[this.bookingCurrencyCode]; if (g) { j = g.name } else { j = this.bookingCurrencyCode } f = { code: this.defaultCurrencyValue, name: j }; k[k.length] = f; m = { objectArray: k, selectBox: this.dropDownListCurrency, selectedItem: this.externalRateId, showCode: false }; b.Util.populateSelect(m) } }; e.init = function (f) { this.setSettingsByObject(f); this.setVars(); this.addEvents(); this.populateCurrency() }; return e }; b.Class.SFPDPassengerInput = function () { var c = b.Class.SkySales(), d = b.Util.extendObject(c); d.passengerGenderIdArray = []; d.infantGenderIdArray = []; d.init = function (e) { this.setSettingsByObject(e); this.setGenderFieldsToEmpty(this.passengerGenderIdArray); this.setGenderFieldsToEmpty(this.infantGenderIdArray) }; d.setGenderFieldsToEmpty = function (g) { g = g || []; var j = "", h = null, f = 0, e = g.length; for (f = 0; f < e; f += 1) { j = g[f]; h = this.getById(j); h.val("") } }; return d }; b.Class.StoredPayment = function () { var c = b.Class.SkySales(), d = b.Util.extendObject(c); d.url = ""; d.key = ""; d.deleteButtonId = ""; d.deleteButton = null; d.deleteInputId = ""; d.deleteInput = null; d.defaultInputId = ""; d.defaultInput = null; d.submitName = ""; d.message = ""; d.init = function (e) { this.setSettingsByObject(e); this.setVars(); this.addEvents() }; d.setVars = function () { this.deleteButton = this.getById(this.deleteButtonId); this.deleteInput = this.getById(this.deleteInputId); this.defaultInput = this.getById(this.defaultInputId) }; d.addEvents = function () { this.deleteButton.click(this.updateDeleteInputHandler); this.defaultInput.click(this.updateDefaultInputHandler) }; d.updateDeleteInputHandler = function (g) { var f = d.updateDeleteInput(); if (!f) { g.preventDefault() } return f }; d.updateDeleteInput = function () { var e = this.message, f = window.confirm(e); if (f) { this.deleteInput.val(this.key) } return f }; d.updateDefaultInputHandler = function () { d.updateDefaultInput() }; d.updateDefaultInput = function () { var j = this.submitName, g = this.defaultInput, i = g.attr("name"), h = g.val(), f = {}, e = "__EVENTTARGET"; f[i] = h; f[e] = ""; f[j] = "SetDefault"; $.post(this.url, f, this.updatePrimaryHandler) }; d.updatePrimaryHandler = function () { }; return d }; b.Class.StoredPayment.validate = function (e) { e = e || ""; var c = false, i = new Date(), k = null, d, g, f, h, j = ""; j = $("#" + e).val(); j = j || ""; if (j) { k = b.Util.parseIsoDate(j); d = k.getFullYear(); g = k.getMonth(); f = i.getFullYear(); h = i.getMonth(); if (d > f || (d === f && g >= h)) { c = true } } return c }; b.Class.PrintDiv = function () { var d = new b.Class.SkySales(), e = b.Util.extendObject(d), c = []; e.init = function (f) { this.setSettingsByObject(f); this.printDiv(this.divID) }; e.printDiv = function (i) { var g = "<html><head><title></title></head><body>"; var f = "</body>"; var j = document.all.item(i).innerHTML; var h = document.body.innerHTML; document.body.innerHTML = g + j + f; window.print(); document.body.innerHTML = h }; return e }; b.Util.PrintItineraryDiv = function (g) { var e = "<html><head><title></title><link href='css/Citilink/standard.css' rel='stylesheet' type='text/css'/></head><body onload='window.print();'>"; var i = "<img src='images/Citilink/citilink_logo.png' />"; var c = "</body></html>"; var h = document.getElementById(g).innerHTML; var d; d = window.confirm("Please note that after Itinerary is printed, you will be redirect back to Search page.\nKindly ensure you have note down your Booking Number for reference purpose."); if (d == true) { var f = window.open(" ", "popUpWindow", "height=600px,width=800px,left=10,top=10,resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=no,directories=yes,status=yes"); f.document.write(e + i + h + c); f.document.close(); window.location.href = "Search.aspx" } }; b.Util.PrintBPDiv = function (g) { var e = "<html><head><title></title><link href='css/Citilink/standard.css' rel='stylesheet' type='text/css'/><link href='css/Citilink/webCheckin.css' rel='stylesheet' type='text/css'/></head><body onload='window.print();'>"; var c = "</body></html>"; var h = document.getElementById(g).innerHTML; var d; d = window.confirm("Please note that after boarding pass is printed, you will be redirect back to Search page."); if (d == true) { var f = window.open(" ", "popUpWindow", "height=600px,width=800px,left=10,top=10,resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=no,directories=yes,status=yes"); f.document.write(e + h + c); f.document.close(); window.location.href = "Search.aspx" } }; b.Class.myTabs = function () { var d = new b.Class.SkySales(), c = b.Util.extendObject(d); c.init = function (f) { this.setSettingsByObject(f); if (document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListTitle")) { document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListTitle").options.selectedIndex = 1; } var h; for (h = 0; h < 9; h++) { if (document.getElementById("passengerTab_" + (h + 1))) { if (document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListGender_" + h)) { document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListGender_" + h).options.selectedIndex = 1 } if (document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListTitle_" + h)) { document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListTitle_" + h).options.selectedIndex = 1 } if (document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListGender_" + h)) { document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListGender_" + h).options.selectedIndex = 1 } if (document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListTitle_" + h)) { document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListTitle_" + h).options.selectedIndex = 1 } } } $(".tabs div").click(function () { e($(this)) }); g($(".tab")); function e(i) { $(".tab-content").hide(); $(".tabs div").removeClass("selected"); var j = i.attr("rel"); $("#" + j).show(); i.addClass("selected") } function g(i) { $(".tab-content").hide(); $(".tabs div").removeClass("selected"); var j = i.attr("rel"); $("#" + j).show(); $("#contactTab").addClass("selected") } }; c.setVars = function (e) { }; c.addEvents = function (e) { }; return c }; $(document).ready(b.Util.ready); $(window).load(b.Util.load); b.Util.nexttab = function () { $("#tabsMeal").hide(); $("#tabsseat").show(); window.location.href = "#top" }; b.Util.mealHide = function (c) { if (document.getElementById(c).style.display == "none") { var e = 1; var d = 1; for (e = 1; e <= 2; e++) { for (d = 1; d <= 9; d++) { $("#" + e + "meal" + d).hide(); $("#" + e + "bag" + d).hide() } } document.getElementById(c).style.display = "none"; document.getElementById(c).style.display = "" } else { document.getElementById(c).style.display = "none" } }; b.Util.baggageHide = function (c) { if (document.getElementById(c).style.display == "none") { var e = 1; var d = 1; for (e = 1; e <= 2; e++) { for (d = 1; d <= 9; d++) { $("#" + e + "meal" + d).hide(); $("#" + e + "bag" + d).hide() } } document.getElementById(c).style.display = "none"; document.getElementById(c).style.display = "" } else { document.getElementById(c).style.display = "none" } }; b.Util.nexttabPassenger = function (f) { $("#tabsContact").hide(); if (document.getElementById("contactTab")) { $("#contactTab").removeClass("selected") } var c; for (c = 1; c <= 9; c++) { if (document.getElementById("passengerTab_" + c)) { $("#tabs" + c).hide(); $("#passengerTab_" + c).removeClass("selected") } } for (c = 1; c <= 9; c++) { if (document.getElementById("infantTab_" + c)) { $("#infanttabs" + c).hide(); $("#infantTab_" + c).removeClass("selected") } } if (document.getElementById("tabsseat")) { $("#tabsseat").hide(); $("#tabsseat").removeClass("selected") } var e = f.substring(0, 3); var d = f.substring(f.length - 1); if (f === "tabsContact") { $("#passengerTab_1").addClass("selected"); $("#tabs1").show(); window.location.href = "#passengerInputContent"; if (document.getElementById("travellerCheck").checked != "") { if (document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListTitle_0")) { document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListTitle_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListTitle").value; document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_TextBoxFirstName_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxFirstName").value; document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_TextBoxMiddleName_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxMiddleName").value; document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_TextBoxLastName_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxLastName").value; document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListGender_0").options.selectedIndex = 1; document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListNationality_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListCountry").value; document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListResidentCountry_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListCountry").value } if (document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListTitle_0")) { document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListTitle_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListTitle").value; document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_TextBoxFirstName_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxFirstName").value; document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_TextBoxMiddleName_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxMiddleName").value; document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_TextBoxLastName_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxLastName").value; document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_TextBoxGender_0").options.selectedIndex = 1; document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListNationality_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListCountry").value; document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListResidentCountry_0").value = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListCountry").value } } } else { if (document.getElementById(f)) { if (e === "tab") { $("#passengerTab_" + d).addClass("selected") } else { $("#infantTab_" + d).addClass("selected") } $("#" + f).show(); window.location.href = "#passengerInputContent" } else { if (f.substring(0, 3) == "tab") { if (document.getElementById("infanttabs1")) { $("#infantTab_1").addClass("selected"); $("#infanttabs1").show(); window.location.href = "#passengerInputContent" } else { $("#tabsseat").show(); window.location.href = "#passengerInputContent" } } else { $("#tabsseat").show(); window.location.href = "#passengerInputContent" } } } }; b.Util.newPopup = function (c) { popupWindow = window.open(c, "popUpWindow", "height=500,width=800,left=10,top=10,resizable=yes,scrollbars=yes,toolbar=yes,menubar=yes,location=no,directories=yes,status=yes") }; b.Util.BaggagePassengerGroup = function (c, e, f) { var d; for (d = 0; d <= 20; d++) { if (d != e) { if (document.getElementById("CONTROLGROUPPASSENGER_MealLegInputViewPassengerView_bagIndex_" + c + "_" + d + "_" + f + "_1")) { $("#CONTROLGROUPPASSENGER_MealLegInputViewPassengerView_bagIndex_" + c + "_" + d + "_" + f + "_1").removeAttr("checked") } } } if (e != 0) { document.getElementById("noThanks" + c + f).checked = false } }; b.Util.tabContactValidate = function (p) { var k = /^\d{1,10}$/; var g = /^((\+)?(\d){3,10}(\-)?(\d){3,10}|)$/; var d = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/; var o = ""; var l; var j; var r; var e; var m; var c; var i; var h; var n; var q; var f; if (p === "tabsContact") { if (document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListTitle")) { l = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListTitle"); j = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxFirstName"); r = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxMiddleName"); e = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxLastName"); m = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxAddressLine1"); c = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxCity"); i = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxPostalCode"); h = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_DropDownListCountry"); n = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxHomePhone"); q = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxOtherPhone"); f = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxEmailAddress"); contactFax = document.getElementById("CONTROLGROUPPASSENGER_ContactInputPassengerView_TextBoxFax") } if (document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_DropDownListTitle")) { l = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_DropDownListTitle"); j = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_TextBoxFirstName"); r = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_TextBoxMiddleName"); e = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_TextBoxLastName"); m = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_TextBoxAddressLine1"); c = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_TextBoxCity"); i = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_TextBoxPostalCode"); h = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_DropDownListCountry"); n = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_TextBoxHomePhone"); q = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_TextBoxOtherPhone"); f = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_TextBoxEmailAddress"); contactFax = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_ContactInputPassengerView_Flighttab_TextBoxFax") } if (l.selectedIndex == 0) { o = o + "Please ensure Title is selected\n" } if (j.value === "first" || j.value.length < 1) { o = o + "Please ensure First Name is entered\n" } if (e.value === "last" || e.value.length < 1) { o = o + "Please ensure Last Name is entered\n" } if (m.value.length < 1) { o = o + "Please ensure Address is entered\n" } if (c.value.length < 1) { o = o + "Please ensure City is entered\n" } if (f.value.length < 1) { o = o + "Please ensure Email Address is entered\n" } if (!g.test(n.value)) { o = o + "Please ensure Home Phone is entered correctly\n" } if (!g.test(contactFax.value)) { o = o + "Please ensure Fax Number is enter correctly\n" } if (!d.test(f.value)) { o = o + "Please ensure Email is entered correctly\n" } } if (o.length > 0) { alert(o); return false } else { return true } }; b.Util.tabPassengerValidate = function (r, d) { var k = ""; var i = r.substring(0, 3); var e = r[r.length - 1] - 1; var p; var f; var n; var g; var c; var s; var q; var o; var j; if (i === "tab") { if (document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListTitle_" + e)) { p = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListTitle_" + e); f = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_TextBoxFirstName_" + e); n = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_TextBoxMiddleName_" + e); g = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_TextBoxLastName_" + e); c = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListGender_" + e); s = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListNationality_" + e); q = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListBirthDateDay_" + e); o = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListBirthDateMonth_" + e); j = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListBirthDateYear_" + e); DocType = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListDocumentType0_" + e); DocNo = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_TextBoxDocumentNumber0_" + e); IssCtry = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListDocumentCountry0_" + e) } if (document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListTitle_" + e)) { p = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListTitle_" + e); f = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_TextBoxFirstName_" + e); n = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_TextBoxMiddleName_" + e); g = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_TextBoxLastName_" + e); c = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListGender_" + e); s = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListNationality_" + e); q = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListBirthDateDay_" + e); o = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListBirthDateMonth_" + e); j = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListBirthDateYear_" + e); DocType = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_DropDownListDocumentType0_" + e); DocNo = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_TextBoxDocumentNumber0_" + e); IssCtry = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_DropDownListDocumentCountry0_" + e) } if (p.selectedIndex == 0) { k = k + "Please ensure Title is selected\n" } if (f.value.length < 1) { k = k + "Please ensure First Name is entered\n" } if (g.value.length < 1) { k = k + "Please ensure Last Name is entered\n" } if (c.selectedIndex == 0) { k = k + "Please ensure Gender is selected\n" } if (q.selectedIndex == 0) { k = k + "Please ensure Birth Date is selected\n" } if (o.selectedIndex == 0) { k = k + "Please ensure Birth Month is selected\n" } if (j.selectedIndex == 0) { k = k + "Please ensure Birth Year is selected\n" } var m = j.options[j.selectedIndex].value; var l = new Date(); var t = l.getFullYear(); var h = t - m } if (k.length > 0) { alert(k); return false } else { return true } }; b.Util.tabInfantValidate = function (r) { var j = ""; var h = r.substring(0, 3); var d = r[r.length - 1] - 1; var l; var p; var e; var n; var f; var c; var s; var q; var o; var i; if (h === "inf") { if (document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListAssign_" + d + "_" + d)) { l = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListAssign_" + d + "_" + d); e = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_TextBoxFirstName_" + d + "_" + d); n = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_TextBoxMiddleName_" + d + "_" + d); f = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_TextBoxLastName_" + d + "_" + d); c = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListGender_" + d + "_" + d); s = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListNationality_" + d + "_" + d); q = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListBirthDateDay_" + d + "_" + d); o = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListBirthDateMonth_" + d + "_" + d); i = document.getElementById("CONTROLGROUPPASSENGER_PassengerInputViewPassengerView_DropDownListBirthDateYear_" + d + "_" + d) } if (document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListAssign_" + d + "_" + d)) { l = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListAssign_" + d + "_" + d); e = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_TextBoxFirstName_" + d + "_" + d); n = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_TextBoxMiddleName_" + d + "_" + d); f = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_TextBoxLastName_" + d + "_" + d); c = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListGender_" + d + "_" + d); s = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListNationality_" + d + "_" + d); q = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListBirthDateDay_" + d + "_" + d); o = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListBirthDateMonth_" + d + "_" + d); i = document.getElementById("CONTROLGROUPPASSENGER_Flighttab_PassengerInputViewPassengerView_Flighttab_DropDownListBirthDateYear_" + d + "_" + d) } if (l.selectedIndex == 0) { j = j + "Please ensure the infant is assigned to an Adult\n" } if (e.value.length < 1) { j = j + "Please ensure First Name is entered\n" } if (f.value.length < 1) { j = j + "Please ensure Last Name is entered\n" } if (c.selectedIndex == 0) { j = j + "Please ensure Gender is selected\n" } if (q.selectedIndex == 0) { j = j + "Please ensure Birth Date is selected\n" } if (o.selectedIndex == 0) { j = j + "Please ensure Birth Month is selected\n" } if (i.selectedIndex == 0) { j = j + "Please ensure Birth Year is selected\n" } var m = i.options[i.selectedIndex].value; var k = new Date(); var t = k.getFullYear(); var g = t - m } if (j.length > 0) { alert(j); return false } else { return true } }; $(".book-flight-form input, .booking-flight .input a, .book-flight-sidebar-form .input input, .book-flight-sidebar-form .input a, .search-flight-form .input input, .search-flight-form .input a, .modify-search-form .input input, .modify-search-form .input a, .find-flight-form .input input, .find-flight-form .input a").click(function () { $(".dialog-active").removeClass("dialog-active"); $(this).parent().next().addClass("dialog-active"); return false }); $(".dialog").click(function (c) { c.stopPropagation() }); $(document).click(function () { $(".dialog").removeClass("dialog-active") }); $(".dialog li a").click(function () { $(".dialog").removeClass("dialog-active") }); $(".book-flight-form .dialog .close, .book-flight-sidebar-form .dialog .close, .search-flight-form .dialog .close, .modify-search-form .dialog .close, , .find-flight-form .dialog .close").click(function () { $(".dialog").removeClass("dialog-active"); return false }); $("#dialog-1 li a").click(function (c) { c.preventDefault(); $(this).closest(".field").find("input").val($(this).html()); $(this).closest(".field").find("#ori").val($(this).attr("title")); setTimeout(function () { $("#input-destination").click() }, 100) }); $("#dialog-2 li a").click(function (c) { c.preventDefault(); $(this).closest(".field").find("input").val($(this).html()); $(this).closest(".field").find("#des").val($(this).attr("title")); $("#datepicker-btn-1").click() }); $("#dialog-3 li a").click(function (c) { c.preventDefault(); $(this).closest(".field").find("input").val($(this).html()); $(this).closest(".field").find("#currency").val($(this).attr("title")) }); $("#dialog-1-alt li a").click(function (c) { c.preventDefault(); $(this).closest(".field").find("input").val($(this).html()); $(this).closest(".field").find("#ori-2").val($(this).attr("name")); setTimeout(function () { $("#input-destination-alt").click() }, 100) }); $("#dialog-2-alt li a").click(function (c) { c.preventDefault(); $(this).closest(".field").find("input").val($(this).html()); $(this).closest(".field").find("#des-2").val($(this).attr("name")); $("#datepicker-btn-1-alt").click() }); $(".outer-links .fans").hover(function () { $(this).addClass("active"); $("#liMenu7 a").addClass("top-nav-select") }, function () { $(this).removeClass("active"); $("#liMenu7 a").removeClass("top-nav-select") }); b.Util.ChangeFlightOnLoad = function () { if (document.getElementById("ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_CheckBoxChangeMarket_1")) { } if (document.getElementById("ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_CheckBoxChangeMarket_2")) { document.getElementById("ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketOrigin1").setAttribute("onchange", "document.getElementById('ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketDestination2').value = document.getElementById('ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketOrigin1').value;"); document.getElementById("ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketDestination1").setAttribute("onchange", "document.getElementById('ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketOrigin2').value = document.getElementById('ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketDestination1').value;"); document.getElementById("ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketOrigin2").setAttribute("onchange", "document.getElementById('ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketDestination1').value = document.getElementById('ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketOrigin2').value;"); document.getElementById("ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketDestination2").setAttribute("onchange", "document.getElementById('ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketOrigin1').value = document.getElementById('ControlGroupSearchChangeView_AvailabilitySearchInputSearchChangeView_TextBoxMarketDestination2').value;") } }; b.Util.CancelCont = function () { if (document.getElementById("ControlGroupUnitMapView_UnitMapViewControl_ButtonSubmit")) { document.getElementById("ControlGroupUnitMapView_UnitMapViewControl_LinkButtonCancelAllPaxSeats").removeAttribute("href"); document.getElementById("ControlGroupUnitMapView_UnitMapViewControl_ButtonSubmit").click() } if (document.getElementById("ControlGroupMBUnitMapView_MBUnitMapViewControl_ButtonSubmit")) { document.getElementById("ControlGroupMBUnitMapView_MBUnitMapViewControl_LinkButtonCancelAllPaxSeats").removeAttribute("href"); document.getElementById("ControlGroupMBUnitMapView_MBUnitMapViewControl_ButtonSubmit").click() } }; b.Util.disablePreselect = function () { var c = 0; if (document.getElementsByName("ControlGroupScheduleSelectView$AvailabilityInputScheduleSelectView$market1")) { for (c = 0; c < document.getElementsByName("ControlGroupScheduleSelectView$AvailabilityInputScheduleSelectView$market1").length; c++) { if (document.getElementsByName("ControlGroupScheduleSelectView$AvailabilityInputScheduleSelectView$market1")[c].checked == true) { document.getElementsByName("ControlGroupScheduleSelectView$AvailabilityInputScheduleSelectView$market1")[c].checked = false } } } if (document.getElementsByName("ControlGroupScheduleSelectView$AvailabilityInputScheduleSelectView$market2")) { for (c = 0; c < document.getElementsByName("ControlGroupScheduleSelectView$AvailabilityInputScheduleSelectView$market2").length; c++) { if (document.getElementsByName("ControlGroupScheduleSelectView$AvailabilityInputScheduleSelectView$market2")[c].checked == true) { document.getElementsByName("ControlGroupScheduleSelectView$AvailabilityInputScheduleSelectView$market2")[c].checked = false } } } $("#selectMainBody .availabilityTable tr[class^='trSSRMarket']").hide() }; b.Util.SSRQuestion = function () { var c; c = window.confirm("Do you want to purchase any extra Meal/Baggage?"); if (c == true) { document.getElementById("ControlGroupViewFlightView_LinkButtonSubmit").removeAttribute("href"); window.location = "ChangeSSR.aspx"; return false } else { return true; __doPostBack("ControlGroupViewFlightView$LinkButtonSubmit", "") } }; b.Util.TCInsurance = function () { var cb = document.getElementById("TCCheck"); if (!cb.checked) { alert("Please check the Terms and Conditions checkbox"); return false; } else { return true; } }; b.Util.InsuranceQuestion = function (id) { var reminder; var c; reminder = "A Friendly Reminder!"; c = window.confirm("A Friendly Reminder!\nKami sangat merekomendasikan untuk membeli Asuransi Perjalanan pada trip anda kali ini, Karena Citilink Shield menawarkan perlindungan asuransi secara menyeluruh dengan harga yang sangat kompetitif, Penawaran yang sangat menarik ini anda bisa dapatkan melalui pembelian online saat ini juga.\n\n" + "Untuk tetap membeli Asuransi Perjalan ini, tekan [OK]\n(To keep travel insurance in your itinerary, please click [OK])"); var dd = document.getElementById(id); if (c == true) { dd.selectedIndex = 1; } else { dd.selectedIndex = 0; } __doPostBack('ControlGroupInsuranceView$LinkButtonSubmit', ''); }; b.Util.SearchOnLoad = function () { var d, i, f, c; if (c != $(".wMed1s")[0].id) { c = $(".wMed1s")[0].id.split("_DropDownListPassengerType_") } var h = false; if (document.getElementById(c[0] + "_DropDownListPassengerType_ADT")) { d = c[0] + "_DropDownListPassengerType_ADT"; i = c[0] + "_DropDownListPassengerType_CHD"; f = c[0] + "_DropDownListPassengerType_INFANT"; h = true } if (h == true) { var j = "return SKYSALES.Util.ADTDDChange('" + d + "', '" + i + "', '" + f + "');"; var e = "return SKYSALES.Util.CHDDDChange('" + d + "', '" + i + "', '" + f + "');"; var g = "return SKYSALES.Util.INFDDChange('" + d + "', '" + i + "', '" + f + "');"; if (document.getElementById(d)) { b.Util.ADTDDChange(d, i, f); document.getElementById(d).setAttribute("onchange", j) } if (document.getElementById(i)) { document.getElementById(i).setAttribute("onchange", e) } if (document.getElementById(f)) { document.getElementById(f).setAttribute("onchange", g) } } document.getElementById(d).removeChild(document.getElementById(d).firstChild) }; b.Util.ADTDDChange = function (d, h, e) { if (document.getElementById(d) && document.getElementById(h) && document.getElementById(e)) { var g = document.getElementById(d); var i = g.options[g.selectedIndex].value; var c = 9; var f = c - i; b.Util.RemoveDD(h); b.Util.RemoveDD(e); b.Util.AddItemInList(h, f); if (i <= 4) { b.Util.AddItemInList(e, i) } else { b.Util.AddItemInList(e, f) } } }; b.Util.CHDDDChange = function (l, i, j) { if (document.getElementById(l) && document.getElementById(i) && document.getElementById(j)) { var h = document.getElementById(i); var n = h.options[h.selectedIndex].value; var g = document.getElementById(l); var c = g.options[g.selectedIndex].value; var e = document.getElementById(j); var m = e.options[e.selectedIndex].value; var f = (c * 1) + (n * 1); var k = 9; var d = k - f; b.Util.RemoveDD(j); if (d >= c) { b.Util.AddItemInList(j, c); e.value = m } else { b.Util.AddItemInList(j, d); e.value = m } } }; b.Util.INFDDChange = function (m, i, j) { if (document.getElementById(m) && document.getElementById(i) && document.getElementById(j)) { var h = document.getElementById(j); var n = h.options[h.selectedIndex].value; var g = document.getElementById(m); var c = g.options[g.selectedIndex].value; var d = document.getElementById(i); var l = d.options[d.selectedIndex].value; var f = (c * 1) + (n * 1); var k = 9; var e = k - f; b.Util.RemoveDD(i); b.Util.AddItemInList(i, e); d.value = l } }; b.Util.RemoveDD = function (c) { if (document.getElementById(c)) { var e = document.getElementById(c); if (e.options.length > 0) { for (var d = e.options.length - 1; d >= 0; d--) { e.remove(d) } } } }; b.Util.AddItemInList = function (d, e) { if (document.getElementById(d)) { var g = document.getElementById(d); for (var f = 0; f <= e; f++) { var c = document.createElement("OPTION"); c.text = f; c.value = f; g.add(c) } } }; b.Util.ValidatePax = function () { var c = document.getElementById("AvailabilitySearchInputSearchView_DropDownListPassengerType_ADT"); var e = c.options[c.selectedIndex].value; var g = document.getElementById("AvailabilitySearchInputSearchView_DropDownListPassengerType_CHD"); var i = g.options[g.selectedIndex].value; var d = document.getElementById("AvailabilitySearchInputSearchView_DropDownListPassengerType_INFANT"); var h = d.options[d.selectedIndex].value; var f = (e * 1) + (i * 1) + (h * 1); if (f > 9) { alert("Please ensure total number of passengers is not more than 9"); return false } else { if (e == 0) { alert("Please ensure at least one adult passenger is selected"); return false } } }; b.Util.BaggagePassengerDropDown = function (f) { var e = document.getElementById(f.id).options[document.getElementById(f.id).selectedIndex].getAttribute("id"); var g = e.split("_dropdownbagIndex_"); var d = g[1].split("_"); if (d[1] != 0) { document.getElementById(g[0] + "_bagIndex_" + g[1]).checked = true; b.Util.BaggageRadioGroup(g[0] + "_bagIndex_", d[0], d[1], d[2]) } else { document.getElementById(g[0] + "_bagIndex_" + d[0] + d[2]).checked = true; b.Util.BaggageRadioGroup(g[0] + "_bagIndex_", d[0], 0, d[2]) } }; b.Util.BaggageRadioGroup = function (d, e, g, h) { var c; if (d == "[object HTMLInputElement]") { c = d.id.split("_bagIndex_") } else { c = d.split("_bagIndex_") } var f = 1; for (f = 1; f <= 20; f++) { if (f != g) { if (document.getElementById(c[0] + "_bagIndex_" + e + "_" + f + "_" + h + "_1")) { document.getElementById(c[0] + "_bagIndex_" + e + "_" + f + "_" + h + "_1").checked = false } } } if (g != 0) { document.getElementById(c[0] + "_bagIndex_" + e + h).checked = false } }; b.Util.OnwardDate = function (g) { if ($(".dayHeaderTodayImage a").length > 1) { var e, k, j; var f, h, i; $(".dayHeaders a[name=0-" + g + "]").each(function () { e = this.innerHTML.split("<span>"); k = e[0].split(" "); j = k[1].split("/") }); f = $(".dayHeaderTodayImage a")[1].innerHTML.split("<span>"); h = f[0].split(" "); i = h[1].split("/"); if (parseInt(j[0]) < parseInt(i[0])) { return true } else { if (parseInt(j[0]) == parseInt(i[0])) { if (parseInt(j[1]) <= parseInt(i[1])) { return true } else { return false } } else { return false } } } else { return true } }; b.Util.ReturnDate = function (g) { if ($(".dayHeaderTodayImage a").length > 1) { var e, k, j; var f, h, i; $(".dayHeaders a[name=1-" + g + "]").each(function () { e = this.innerHTML.split("<span>"); k = e[0].split(" "); j = k[1].split("/") }); f = $(".dayHeaderTodayImage a")[0].innerHTML.split("<span>"); h = f[0].split(" "); i = h[1].split("/"); if (parseInt(j[0]) > parseInt(i[0])) { return true } else { if (parseInt(j[0]) == parseInt(i[0])) { if (parseInt(j[1]) >= parseInt(i[1])) { return true } else { return false } } else { return false } } } else { return true } }; b.Util.validateAgencyReg = function () { var l = ""; var q = /^\d{1,10}$/; var m = /^((\+)?(\d){3,10}(\-)?(\d){3,10}|)$/; var u = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/; var g; var e; var j; var f; var o; var h; var w; var d; var p; var k; var n; var x; var r; var t; var i; var c; var s; var v; if (document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxOrganizationCode")) { g = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxOrganizationCode"); e = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxOrganizationName"); j = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_DropDownListTitle"); f = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxFirstName"); o = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxMiddleName"); h = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxLastName"); x = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxStreetAddress1"); r = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxTownCity"); i = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_DropDownListCountry"); c = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_DropDownListCurrency"); s = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_DropDownListCulture"); w = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxEmail"); d = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxFirstPhone"); p = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxSecondPhone"); k = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxPhone"); n = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxFax"); t = document.getElementById("ControlGroupRegisterAgencyView_OrganizationInputViewRegisterAgencyView_TextBoxPostalCode"); v = document.getElementById("ControlGroupRegisterAgencyView_AgreementViewRegisterAgencyView_CheckBoxAgreement") } if (g.value.length < 1) { l = l + "Please ensure Organization Code is entered\n" } if (e.value.length < 1) { l = l + "Please ensure Organization Name is entered\n" } if (j.selectedIndex == 0) { l = l + "Please ensure Title is selected\n" } if (f.value === "first" || f.value.length < 1) { l = l + "Please ensure First Name is entered\n" } if (h.value === "last" || h.value.length < 1) { l = l + "Please ensure Last Name is entered\n" } if (x.value.length < 1) { l = l + "Please ensure Address is entered\n" } if (r.value.length < 1) { l = l + "Please ensure City is entered\n" } if (i.selectedIndex == 0) { l = l + "Please ensure Country is selected\n" } if (c.selectedIndex == 0) { l = l + "Please ensure Preferred Currency is selected\n" } if (s.selectedIndex == 0) { l = l + "Please ensure Preferred Culture is selected\n" } if (!q.test(t.value)) { l = l + "Please ensure valid Postal Code is entered\n" } if (d.value.length < 1) { l = l + "Please ensure Contact Phone is entered\n" } if (w.value.length < 1) { l = l + "Please ensure Email Address is entered\n" } if (!m.test(d.value)) { l = l + "Please ensure Contact Phone is entered correctly\n" } if (!m.test(p.value)) { l = l + "Please ensure Contact Phone (other) is entered correctly\n" } if (!m.test(k.value)) { l = l + "Please ensure Agency Phone is entered correctly\n" } if (!m.test(n.value)) { l = l + "Please ensure Agency Fax Number is entered correctly\n" } if (!u.test(w.value)) { l = l + "Please ensure Contact Email is entered correctly\n" } if (!v.checked) { l = l + "Please ensure you agree the terms and conditions\n" } if (l.length > 0) { alert(l); return false } else { return true } }; b.Util.validateAgentReg = function () { var l = ""; var t = /^\d{1,10}$/; var n = /^((\+)?(\d){3,10}(\-)?(\d){3,10}|)$/; var v = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/; var i; var j; var o; var e; var r; var g; var x; var s; var d; var c; var p; var m; var h; var u; var w; if (document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredMasterAgentInputRegisterMasterOrgAgentInputView_TextBoxAgentUserName")) { i = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredMasterAgentInputRegisterMasterOrgAgentInputView_TextBoxAgentUserName"); Pwd = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredMasterAgentInputRegisterMasterOrgAgentInputView_PasswordFieldAgentPassword"); RPwd = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredMasterAgentInputRegisterMasterOrgAgentInputView_PasswordFieldPasswordConfirm"); e = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_TextBoxFirstName"); r = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_TextBoxMiddleName"); g = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_TextBoxLastName"); x = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_TextBoxEmail"); s = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_TextBoxSecondPhone"); d = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_TextBoxFirstPhone"); c = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_TextBoxCellPhone"); p = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_TextBoxFax"); m = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_DropDownListDOBYear"); h = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_DropDownListLanguage"); Curr = document.getElementById("ControlGroupRegisterMasterOrgAgentView_RegisteredPersonInputRegisterMasterOrgAgentView_DropDownListCurrency"); w = document.getElementById("ControlGroupRegisterMasterOrgAgentView_AgreementViewRegisterMasterOrgAgentView_CheckBoxAgreement") } if (document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredAgentInputRegisterOrgAgentView_TextBoxAgentUserName")) { i = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredAgentInputRegisterOrgAgentView_TextBoxAgentUserName"); Pwd = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredAgentInputRegisterOrgAgentView_PasswordFieldAgentPassword"); RPwd = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredAgentInputRegisterOrgAgentView_PasswordFieldPasswordConfirm"); e = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_TextBoxFirstName"); r = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_TextBoxMiddleName"); g = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_TextBoxLastName"); x = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_TextBoxEmail"); s = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_TextBoxSecondPhone"); d = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_TextBoxFirstPhone"); c = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_TextBoxCellPhone"); p = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_TextBoxFax"); m = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_DropDownListDOBYear"); h = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_DropDownListLanguage"); Curr = document.getElementById("ControlGroupRegisterOrgAgentView_RegisteredPersonInputRegisterOrgAgentView_DropDownListCurrency"); w = document.getElementById("ControlGroupRegisterOrgAgentView_AgreementViewRegisterOrgAgentView_CheckBoxAgreement") } if (i.value.length < 1) { l = l + "Please ensure Username is entered\n" } if (Pwd.value.length < 1) { l = l + "Please ensure Password is entered\n" } if (RPwd.value.length < 1) { l = l + "Please ensure Re-enter Password is entered\n" } if (Pwd.value != RPwd.value) { l = l + "Please ensure second password is same as the first password\n" } if (e.value === "first" || e.value.length < 1) { l = l + "Please ensure First Name is entered\n" } if (g.value === "last" || g.value.length < 1) { l = l + "Please ensure Last Name is entered\n" } if (h.selectedIndex == 0) { l = l + "Please ensure Preferred Language is selected\n" } if (Curr.selectedIndex == 0) { l = l + "Please ensure Preferred Currency is selected\n" } if (d.value.length < 1) { l = l + "Please ensure Contact Phone is entered\n" } if (x.value.length < 1) { l = l + "Please ensure Email Address is entered\n" } if (!n.test(d.value)) { l = l + "Please ensure Contact Phone is entered correctly\n" } if (!n.test(s.value)) { l = l + "Please ensure Contact Phone (other) is entered correctly\n" } if (!n.test(c.value)) { l = l + "Please ensure Cell Phone is entered correctly\n" } if (!n.test(p.value)) { l = l + "Please ensure Fax Number is entered correctly\n" } if (!v.test(x.value)) { l = l + "Please ensure Email is entered correctly\n" } var q = m.options[m.selectedIndex].value; var k = new Date(); var y = k.getFullYear(); var f = y - q; if (f < 18) { l = l + "Please ensure Agent is not younger than 18 years old\n" } if (!w.checked) { l = l + "Please ensure you agree the terms and conditions\n" } if (l.length > 0) { alert(l); return false } else { return true } }; b.Util.validateInsuranceTnC = function () { var x; x = document.getElementById("TCCheck"); if (x.checked) { return true; } else { alert("Citilink Shield Travel Insurance is part of your booking. In order to proceed with your purchase, you need to agree with the Citilink Shield Travel Insurance Declaration."); return false; } }; b.Util.noBack = function () { window.history.forward() }; } ());